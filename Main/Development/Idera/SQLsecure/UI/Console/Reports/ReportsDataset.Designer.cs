//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Idera.SQLsecure.UI.Console.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ReportsDataset")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ReportsDataset : global::System.Data.DataSet {
        
        private isp_sqlsecure_report_getguestenabledserversDataTable tableisp_sqlsecure_report_getguestenabledservers;
        
        private isp_sqlsecure_report_getserveraccessDataTable tableisp_sqlsecure_report_getserveraccess;
        
        private isp_sqlsecure_report_authenticationDataTable tableisp_sqlsecure_report_authentication;
        
        private isp_sqlsecure_report_checkwellknowngroupDataTable tableisp_sqlsecure_report_checkwellknowngroup;
        
        private isp_sqlsecure_report_sysadmin_administratorDataTable tableisp_sqlsecure_report_sysadmin_administrator;
        
        private isp_sqlsecure_report_orphanedloginsDataTable tableisp_sqlsecure_report_orphanedlogins;
        
        private isp_sqlsecure_report_dbuserfixedroleDataTable tableisp_sqlsecure_report_dbuserfixedrole;
        
        private isp_sqlsecure_report_checkcmdshellDataTable tableisp_sqlsecure_report_checkcmdshell;
        
        private isp_sqlsecure_report_getuserinfoDataTable tableisp_sqlsecure_report_getuserinfo;
        
        private isp_sqlsecure_report_checkdbchainingDataTable tableisp_sqlsecure_report_checkdbchaining;
        
        private isp_sqlsecure_report_checksystemstoredproceduresDataTable tableisp_sqlsecure_report_checksystemstoredprocedures;
        
        private isp_sqlsecure_report_checkxpmailDataTable tableisp_sqlsecure_report_checkxpmail;
        
        private isp_sqlsecure_report_getauditfiltersDataTable tableisp_sqlsecure_report_getauditfilters;
        
        private isp_sqlsecure_report_getuserpermissionsDataTable tableisp_sqlsecure_report_getuserpermissions;
        
        private isp_sqlsecure_report_getuserdatabasepermissionsDataTable tableisp_sqlsecure_report_getuserdatabasepermissions;
        
        private isp_sqlsecure_report_getauditedinstancesDataTable tableisp_sqlsecure_report_getauditedinstances;
        
        private isp_sqlsecure_report_getassessmentcomparisonDataTable tableisp_sqlsecure_report_getassessmentcomparison;
        
        private isp_sqlsecure_getsnapshotcomparisonDataTable tableisp_sqlsecure_getsnapshotcomparison;
        
        private isp_sqlsecure_report_getcomparesnapshotinfoDataTable tableisp_sqlsecure_report_getcomparesnapshotinfo;
        
        private isp_sqlsecure_report_checkweakpasswordDataTable tableisp_sqlsecure_report_checkweakpassword;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReportsDataset() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ReportsDataset(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["isp_sqlsecure_report_getguestenabledservers"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getguestenabledserversDataTable(ds.Tables["isp_sqlsecure_report_getguestenabledservers"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getserveraccess"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getserveraccessDataTable(ds.Tables["isp_sqlsecure_report_getserveraccess"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_authentication"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_authenticationDataTable(ds.Tables["isp_sqlsecure_report_authentication"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkwellknowngroup"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkwellknowngroupDataTable(ds.Tables["isp_sqlsecure_report_checkwellknowngroup"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_sysadmin_administrator"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_sysadmin_administratorDataTable(ds.Tables["isp_sqlsecure_report_sysadmin_administrator"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_orphanedlogins"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_orphanedloginsDataTable(ds.Tables["isp_sqlsecure_report_orphanedlogins"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_dbuserfixedrole"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_dbuserfixedroleDataTable(ds.Tables["isp_sqlsecure_report_dbuserfixedrole"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkcmdshell"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkcmdshellDataTable(ds.Tables["isp_sqlsecure_report_checkcmdshell"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getuserinfo"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getuserinfoDataTable(ds.Tables["isp_sqlsecure_report_getuserinfo"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkdbchaining"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkdbchainingDataTable(ds.Tables["isp_sqlsecure_report_checkdbchaining"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checksystemstoredprocedures"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checksystemstoredproceduresDataTable(ds.Tables["isp_sqlsecure_report_checksystemstoredprocedures"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkxpmail"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkxpmailDataTable(ds.Tables["isp_sqlsecure_report_checkxpmail"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getauditfilters"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getauditfiltersDataTable(ds.Tables["isp_sqlsecure_report_getauditfilters"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getuserpermissions"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getuserpermissionsDataTable(ds.Tables["isp_sqlsecure_report_getuserpermissions"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getuserdatabasepermissions"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getuserdatabasepermissionsDataTable(ds.Tables["isp_sqlsecure_report_getuserdatabasepermissions"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getauditedinstances"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getauditedinstancesDataTable(ds.Tables["isp_sqlsecure_report_getauditedinstances"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getassessmentcomparison"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getassessmentcomparisonDataTable(ds.Tables["isp_sqlsecure_report_getassessmentcomparison"]));
                }
                if ((ds.Tables["isp_sqlsecure_getsnapshotcomparison"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_getsnapshotcomparisonDataTable(ds.Tables["isp_sqlsecure_getsnapshotcomparison"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getcomparesnapshotinfo"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getcomparesnapshotinfoDataTable(ds.Tables["isp_sqlsecure_report_getcomparesnapshotinfo"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkweakpassword"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkweakpasswordDataTable(ds.Tables["isp_sqlsecure_report_checkweakpassword"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getguestenabledserversDataTable isp_sqlsecure_report_getguestenabledservers {
            get {
                return this.tableisp_sqlsecure_report_getguestenabledservers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getserveraccessDataTable isp_sqlsecure_report_getserveraccess {
            get {
                return this.tableisp_sqlsecure_report_getserveraccess;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_authenticationDataTable isp_sqlsecure_report_authentication {
            get {
                return this.tableisp_sqlsecure_report_authentication;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_checkwellknowngroupDataTable isp_sqlsecure_report_checkwellknowngroup {
            get {
                return this.tableisp_sqlsecure_report_checkwellknowngroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_sysadmin_administratorDataTable isp_sqlsecure_report_sysadmin_administrator {
            get {
                return this.tableisp_sqlsecure_report_sysadmin_administrator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_orphanedloginsDataTable isp_sqlsecure_report_orphanedlogins {
            get {
                return this.tableisp_sqlsecure_report_orphanedlogins;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_dbuserfixedroleDataTable isp_sqlsecure_report_dbuserfixedrole {
            get {
                return this.tableisp_sqlsecure_report_dbuserfixedrole;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_checkcmdshellDataTable isp_sqlsecure_report_checkcmdshell {
            get {
                return this.tableisp_sqlsecure_report_checkcmdshell;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getuserinfoDataTable isp_sqlsecure_report_getuserinfo {
            get {
                return this.tableisp_sqlsecure_report_getuserinfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_checkdbchainingDataTable isp_sqlsecure_report_checkdbchaining {
            get {
                return this.tableisp_sqlsecure_report_checkdbchaining;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_checksystemstoredproceduresDataTable isp_sqlsecure_report_checksystemstoredprocedures {
            get {
                return this.tableisp_sqlsecure_report_checksystemstoredprocedures;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_checkxpmailDataTable isp_sqlsecure_report_checkxpmail {
            get {
                return this.tableisp_sqlsecure_report_checkxpmail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getauditfiltersDataTable isp_sqlsecure_report_getauditfilters {
            get {
                return this.tableisp_sqlsecure_report_getauditfilters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getuserpermissionsDataTable isp_sqlsecure_report_getuserpermissions {
            get {
                return this.tableisp_sqlsecure_report_getuserpermissions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getuserdatabasepermissionsDataTable isp_sqlsecure_report_getuserdatabasepermissions {
            get {
                return this.tableisp_sqlsecure_report_getuserdatabasepermissions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getauditedinstancesDataTable isp_sqlsecure_report_getauditedinstances {
            get {
                return this.tableisp_sqlsecure_report_getauditedinstances;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getassessmentcomparisonDataTable isp_sqlsecure_report_getassessmentcomparison {
            get {
                return this.tableisp_sqlsecure_report_getassessmentcomparison;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_getsnapshotcomparisonDataTable isp_sqlsecure_getsnapshotcomparison {
            get {
                return this.tableisp_sqlsecure_getsnapshotcomparison;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_getcomparesnapshotinfoDataTable isp_sqlsecure_report_getcomparesnapshotinfo {
            get {
                return this.tableisp_sqlsecure_report_getcomparesnapshotinfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public isp_sqlsecure_report_checkweakpasswordDataTable isp_sqlsecure_report_checkweakpassword {
            get {
                return this.tableisp_sqlsecure_report_checkweakpassword;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ReportsDataset cln = ((ReportsDataset)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["isp_sqlsecure_report_getguestenabledservers"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getguestenabledserversDataTable(ds.Tables["isp_sqlsecure_report_getguestenabledservers"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getserveraccess"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getserveraccessDataTable(ds.Tables["isp_sqlsecure_report_getserveraccess"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_authentication"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_authenticationDataTable(ds.Tables["isp_sqlsecure_report_authentication"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkwellknowngroup"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkwellknowngroupDataTable(ds.Tables["isp_sqlsecure_report_checkwellknowngroup"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_sysadmin_administrator"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_sysadmin_administratorDataTable(ds.Tables["isp_sqlsecure_report_sysadmin_administrator"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_orphanedlogins"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_orphanedloginsDataTable(ds.Tables["isp_sqlsecure_report_orphanedlogins"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_dbuserfixedrole"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_dbuserfixedroleDataTable(ds.Tables["isp_sqlsecure_report_dbuserfixedrole"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkcmdshell"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkcmdshellDataTable(ds.Tables["isp_sqlsecure_report_checkcmdshell"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getuserinfo"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getuserinfoDataTable(ds.Tables["isp_sqlsecure_report_getuserinfo"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkdbchaining"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkdbchainingDataTable(ds.Tables["isp_sqlsecure_report_checkdbchaining"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checksystemstoredprocedures"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checksystemstoredproceduresDataTable(ds.Tables["isp_sqlsecure_report_checksystemstoredprocedures"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkxpmail"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkxpmailDataTable(ds.Tables["isp_sqlsecure_report_checkxpmail"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getauditfilters"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getauditfiltersDataTable(ds.Tables["isp_sqlsecure_report_getauditfilters"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getuserpermissions"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getuserpermissionsDataTable(ds.Tables["isp_sqlsecure_report_getuserpermissions"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getuserdatabasepermissions"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getuserdatabasepermissionsDataTable(ds.Tables["isp_sqlsecure_report_getuserdatabasepermissions"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getauditedinstances"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getauditedinstancesDataTable(ds.Tables["isp_sqlsecure_report_getauditedinstances"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getassessmentcomparison"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getassessmentcomparisonDataTable(ds.Tables["isp_sqlsecure_report_getassessmentcomparison"]));
                }
                if ((ds.Tables["isp_sqlsecure_getsnapshotcomparison"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_getsnapshotcomparisonDataTable(ds.Tables["isp_sqlsecure_getsnapshotcomparison"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_getcomparesnapshotinfo"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_getcomparesnapshotinfoDataTable(ds.Tables["isp_sqlsecure_report_getcomparesnapshotinfo"]));
                }
                if ((ds.Tables["isp_sqlsecure_report_checkweakpassword"] != null)) {
                    base.Tables.Add(new isp_sqlsecure_report_checkweakpasswordDataTable(ds.Tables["isp_sqlsecure_report_checkweakpassword"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableisp_sqlsecure_report_getguestenabledservers = ((isp_sqlsecure_report_getguestenabledserversDataTable)(base.Tables["isp_sqlsecure_report_getguestenabledservers"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getguestenabledservers != null)) {
                    this.tableisp_sqlsecure_report_getguestenabledservers.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getserveraccess = ((isp_sqlsecure_report_getserveraccessDataTable)(base.Tables["isp_sqlsecure_report_getserveraccess"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getserveraccess != null)) {
                    this.tableisp_sqlsecure_report_getserveraccess.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_authentication = ((isp_sqlsecure_report_authenticationDataTable)(base.Tables["isp_sqlsecure_report_authentication"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_authentication != null)) {
                    this.tableisp_sqlsecure_report_authentication.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_checkwellknowngroup = ((isp_sqlsecure_report_checkwellknowngroupDataTable)(base.Tables["isp_sqlsecure_report_checkwellknowngroup"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_checkwellknowngroup != null)) {
                    this.tableisp_sqlsecure_report_checkwellknowngroup.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_sysadmin_administrator = ((isp_sqlsecure_report_sysadmin_administratorDataTable)(base.Tables["isp_sqlsecure_report_sysadmin_administrator"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_sysadmin_administrator != null)) {
                    this.tableisp_sqlsecure_report_sysadmin_administrator.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_orphanedlogins = ((isp_sqlsecure_report_orphanedloginsDataTable)(base.Tables["isp_sqlsecure_report_orphanedlogins"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_orphanedlogins != null)) {
                    this.tableisp_sqlsecure_report_orphanedlogins.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_dbuserfixedrole = ((isp_sqlsecure_report_dbuserfixedroleDataTable)(base.Tables["isp_sqlsecure_report_dbuserfixedrole"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_dbuserfixedrole != null)) {
                    this.tableisp_sqlsecure_report_dbuserfixedrole.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_checkcmdshell = ((isp_sqlsecure_report_checkcmdshellDataTable)(base.Tables["isp_sqlsecure_report_checkcmdshell"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_checkcmdshell != null)) {
                    this.tableisp_sqlsecure_report_checkcmdshell.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getuserinfo = ((isp_sqlsecure_report_getuserinfoDataTable)(base.Tables["isp_sqlsecure_report_getuserinfo"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getuserinfo != null)) {
                    this.tableisp_sqlsecure_report_getuserinfo.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_checkdbchaining = ((isp_sqlsecure_report_checkdbchainingDataTable)(base.Tables["isp_sqlsecure_report_checkdbchaining"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_checkdbchaining != null)) {
                    this.tableisp_sqlsecure_report_checkdbchaining.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_checksystemstoredprocedures = ((isp_sqlsecure_report_checksystemstoredproceduresDataTable)(base.Tables["isp_sqlsecure_report_checksystemstoredprocedures"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_checksystemstoredprocedures != null)) {
                    this.tableisp_sqlsecure_report_checksystemstoredprocedures.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_checkxpmail = ((isp_sqlsecure_report_checkxpmailDataTable)(base.Tables["isp_sqlsecure_report_checkxpmail"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_checkxpmail != null)) {
                    this.tableisp_sqlsecure_report_checkxpmail.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getauditfilters = ((isp_sqlsecure_report_getauditfiltersDataTable)(base.Tables["isp_sqlsecure_report_getauditfilters"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getauditfilters != null)) {
                    this.tableisp_sqlsecure_report_getauditfilters.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getuserpermissions = ((isp_sqlsecure_report_getuserpermissionsDataTable)(base.Tables["isp_sqlsecure_report_getuserpermissions"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getuserpermissions != null)) {
                    this.tableisp_sqlsecure_report_getuserpermissions.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getuserdatabasepermissions = ((isp_sqlsecure_report_getuserdatabasepermissionsDataTable)(base.Tables["isp_sqlsecure_report_getuserdatabasepermissions"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getuserdatabasepermissions != null)) {
                    this.tableisp_sqlsecure_report_getuserdatabasepermissions.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getauditedinstances = ((isp_sqlsecure_report_getauditedinstancesDataTable)(base.Tables["isp_sqlsecure_report_getauditedinstances"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getauditedinstances != null)) {
                    this.tableisp_sqlsecure_report_getauditedinstances.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getassessmentcomparison = ((isp_sqlsecure_report_getassessmentcomparisonDataTable)(base.Tables["isp_sqlsecure_report_getassessmentcomparison"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getassessmentcomparison != null)) {
                    this.tableisp_sqlsecure_report_getassessmentcomparison.InitVars();
                }
            }
            this.tableisp_sqlsecure_getsnapshotcomparison = ((isp_sqlsecure_getsnapshotcomparisonDataTable)(base.Tables["isp_sqlsecure_getsnapshotcomparison"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_getsnapshotcomparison != null)) {
                    this.tableisp_sqlsecure_getsnapshotcomparison.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_getcomparesnapshotinfo = ((isp_sqlsecure_report_getcomparesnapshotinfoDataTable)(base.Tables["isp_sqlsecure_report_getcomparesnapshotinfo"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_getcomparesnapshotinfo != null)) {
                    this.tableisp_sqlsecure_report_getcomparesnapshotinfo.InitVars();
                }
            }
            this.tableisp_sqlsecure_report_checkweakpassword = ((isp_sqlsecure_report_checkweakpasswordDataTable)(base.Tables["isp_sqlsecure_report_checkweakpassword"]));
            if ((initTable == true)) {
                if ((this.tableisp_sqlsecure_report_checkweakpassword != null)) {
                    this.tableisp_sqlsecure_report_checkweakpassword.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ReportsDataset";
            this.Prefix = "";
            this.Namespace = "Idera.SQLsecure.Reports";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableisp_sqlsecure_report_getguestenabledservers = new isp_sqlsecure_report_getguestenabledserversDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getguestenabledservers);
            this.tableisp_sqlsecure_report_getserveraccess = new isp_sqlsecure_report_getserveraccessDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getserveraccess);
            this.tableisp_sqlsecure_report_authentication = new isp_sqlsecure_report_authenticationDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_authentication);
            this.tableisp_sqlsecure_report_checkwellknowngroup = new isp_sqlsecure_report_checkwellknowngroupDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_checkwellknowngroup);
            this.tableisp_sqlsecure_report_sysadmin_administrator = new isp_sqlsecure_report_sysadmin_administratorDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_sysadmin_administrator);
            this.tableisp_sqlsecure_report_orphanedlogins = new isp_sqlsecure_report_orphanedloginsDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_orphanedlogins);
            this.tableisp_sqlsecure_report_dbuserfixedrole = new isp_sqlsecure_report_dbuserfixedroleDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_dbuserfixedrole);
            this.tableisp_sqlsecure_report_checkcmdshell = new isp_sqlsecure_report_checkcmdshellDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_checkcmdshell);
            this.tableisp_sqlsecure_report_getuserinfo = new isp_sqlsecure_report_getuserinfoDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getuserinfo);
            this.tableisp_sqlsecure_report_checkdbchaining = new isp_sqlsecure_report_checkdbchainingDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_checkdbchaining);
            this.tableisp_sqlsecure_report_checksystemstoredprocedures = new isp_sqlsecure_report_checksystemstoredproceduresDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_checksystemstoredprocedures);
            this.tableisp_sqlsecure_report_checkxpmail = new isp_sqlsecure_report_checkxpmailDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_checkxpmail);
            this.tableisp_sqlsecure_report_getauditfilters = new isp_sqlsecure_report_getauditfiltersDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getauditfilters);
            this.tableisp_sqlsecure_report_getuserpermissions = new isp_sqlsecure_report_getuserpermissionsDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getuserpermissions);
            this.tableisp_sqlsecure_report_getuserdatabasepermissions = new isp_sqlsecure_report_getuserdatabasepermissionsDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getuserdatabasepermissions);
            this.tableisp_sqlsecure_report_getauditedinstances = new isp_sqlsecure_report_getauditedinstancesDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getauditedinstances);
            this.tableisp_sqlsecure_report_getassessmentcomparison = new isp_sqlsecure_report_getassessmentcomparisonDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getassessmentcomparison);
            this.tableisp_sqlsecure_getsnapshotcomparison = new isp_sqlsecure_getsnapshotcomparisonDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_getsnapshotcomparison);
            this.tableisp_sqlsecure_report_getcomparesnapshotinfo = new isp_sqlsecure_report_getcomparesnapshotinfoDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_getcomparesnapshotinfo);
            this.tableisp_sqlsecure_report_checkweakpassword = new isp_sqlsecure_report_checkweakpasswordDataTable();
            base.Tables.Add(this.tableisp_sqlsecure_report_checkweakpassword);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getguestenabledservers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getserveraccess() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_authentication() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_checkwellknowngroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_sysadmin_administrator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_orphanedlogins() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_dbuserfixedrole() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_checkcmdshell() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getuserinfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_checkdbchaining() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_checksystemstoredprocedures() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_checkxpmail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getauditfilters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getuserpermissions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getuserdatabasepermissions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getauditedinstances() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getassessmentcomparison() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_getsnapshotcomparison() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_getcomparesnapshotinfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeisp_sqlsecure_report_checkweakpassword() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ReportsDataset ds = new ReportsDataset();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void isp_sqlsecure_report_getguestenabledserversRowChangeEventHandler(object sender, isp_sqlsecure_report_getguestenabledserversRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getserveraccessRowChangeEventHandler(object sender, isp_sqlsecure_report_getserveraccessRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_authenticationRowChangeEventHandler(object sender, isp_sqlsecure_report_authenticationRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_checkwellknowngroupRowChangeEventHandler(object sender, isp_sqlsecure_report_checkwellknowngroupRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_sysadmin_administratorRowChangeEventHandler(object sender, isp_sqlsecure_report_sysadmin_administratorRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_orphanedloginsRowChangeEventHandler(object sender, isp_sqlsecure_report_orphanedloginsRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_dbuserfixedroleRowChangeEventHandler(object sender, isp_sqlsecure_report_dbuserfixedroleRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_checkcmdshellRowChangeEventHandler(object sender, isp_sqlsecure_report_checkcmdshellRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getuserinfoRowChangeEventHandler(object sender, isp_sqlsecure_report_getuserinfoRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_checkdbchainingRowChangeEventHandler(object sender, isp_sqlsecure_report_checkdbchainingRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_checksystemstoredproceduresRowChangeEventHandler(object sender, isp_sqlsecure_report_checksystemstoredproceduresRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_checkxpmailRowChangeEventHandler(object sender, isp_sqlsecure_report_checkxpmailRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getauditfiltersRowChangeEventHandler(object sender, isp_sqlsecure_report_getauditfiltersRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getuserpermissionsRowChangeEventHandler(object sender, isp_sqlsecure_report_getuserpermissionsRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEventHandler(object sender, isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getauditedinstancesRowChangeEventHandler(object sender, isp_sqlsecure_report_getauditedinstancesRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getassessmentcomparisonRowChangeEventHandler(object sender, isp_sqlsecure_report_getassessmentcomparisonRowChangeEvent e);
        
        public delegate void isp_sqlsecure_getsnapshotcomparisonRowChangeEventHandler(object sender, isp_sqlsecure_getsnapshotcomparisonRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEventHandler(object sender, isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEvent e);
        
        public delegate void isp_sqlsecure_report_checkweakpasswordRowChangeEventHandler(object sender, isp_sqlsecure_report_checkweakpasswordRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getguestenabledserversDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columndatabasename;
            
            private global::System.Data.DataColumn columnowner;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getguestenabledserversDataTable() {
                this.TableName = "isp_sqlsecure_report_getguestenabledservers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getguestenabledserversDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getguestenabledserversDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databasenameColumn {
                get {
                    return this.columndatabasename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ownerColumn {
                get {
                    return this.columnowner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getguestenabledserversRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getguestenabledserversRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getguestenabledserversRowChangeEventHandler isp_sqlsecure_report_getguestenabledserversRowChanging;
            
            public event isp_sqlsecure_report_getguestenabledserversRowChangeEventHandler isp_sqlsecure_report_getguestenabledserversRowChanged;
            
            public event isp_sqlsecure_report_getguestenabledserversRowChangeEventHandler isp_sqlsecure_report_getguestenabledserversRowDeleting;
            
            public event isp_sqlsecure_report_getguestenabledserversRowChangeEventHandler isp_sqlsecure_report_getguestenabledserversRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getguestenabledserversRow(isp_sqlsecure_report_getguestenabledserversRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getguestenabledserversRow Addisp_sqlsecure_report_getguestenabledserversRow(string connectionname, string databasename, string owner) {
                isp_sqlsecure_report_getguestenabledserversRow rowisp_sqlsecure_report_getguestenabledserversRow = ((isp_sqlsecure_report_getguestenabledserversRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        databasename,
                        owner};
                rowisp_sqlsecure_report_getguestenabledserversRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getguestenabledserversRow);
                return rowisp_sqlsecure_report_getguestenabledserversRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getguestenabledserversDataTable cln = ((isp_sqlsecure_report_getguestenabledserversDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getguestenabledserversDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columndatabasename = base.Columns["databasename"];
                this.columnowner = base.Columns["owner"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columndatabasename = new global::System.Data.DataColumn("databasename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabasename);
                this.columnowner = new global::System.Data.DataColumn("owner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnowner);
                this.columnconnectionname.AllowDBNull = false;
                this.columnconnectionname.MaxLength = 400;
                this.columndatabasename.AllowDBNull = false;
                this.columndatabasename.MaxLength = 128;
                this.columnowner.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getguestenabledserversRow Newisp_sqlsecure_report_getguestenabledserversRow() {
                return ((isp_sqlsecure_report_getguestenabledserversRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getguestenabledserversRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getguestenabledserversRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getguestenabledserversRowChanged != null)) {
                    this.isp_sqlsecure_report_getguestenabledserversRowChanged(this, new isp_sqlsecure_report_getguestenabledserversRowChangeEvent(((isp_sqlsecure_report_getguestenabledserversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getguestenabledserversRowChanging != null)) {
                    this.isp_sqlsecure_report_getguestenabledserversRowChanging(this, new isp_sqlsecure_report_getguestenabledserversRowChangeEvent(((isp_sqlsecure_report_getguestenabledserversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getguestenabledserversRowDeleted != null)) {
                    this.isp_sqlsecure_report_getguestenabledserversRowDeleted(this, new isp_sqlsecure_report_getguestenabledserversRowChangeEvent(((isp_sqlsecure_report_getguestenabledserversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getguestenabledserversRowDeleting != null)) {
                    this.isp_sqlsecure_report_getguestenabledserversRowDeleting(this, new isp_sqlsecure_report_getguestenabledserversRowChangeEvent(((isp_sqlsecure_report_getguestenabledserversRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getguestenabledserversRow(isp_sqlsecure_report_getguestenabledserversRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getguestenabledserversDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getserveraccessDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnsnapshotid;
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnlogintype;
            
            private global::System.Data.DataColumn columnloginname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getserveraccessDataTable() {
                this.TableName = "isp_sqlsecure_report_getserveraccess";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getserveraccessDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getserveraccessDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotidColumn {
                get {
                    return this.columnsnapshotid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn logintypeColumn {
                get {
                    return this.columnlogintype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loginnameColumn {
                get {
                    return this.columnloginname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getserveraccessRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getserveraccessRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getserveraccessRowChangeEventHandler isp_sqlsecure_report_getserveraccessRowChanging;
            
            public event isp_sqlsecure_report_getserveraccessRowChangeEventHandler isp_sqlsecure_report_getserveraccessRowChanged;
            
            public event isp_sqlsecure_report_getserveraccessRowChangeEventHandler isp_sqlsecure_report_getserveraccessRowDeleting;
            
            public event isp_sqlsecure_report_getserveraccessRowChangeEventHandler isp_sqlsecure_report_getserveraccessRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getserveraccessRow(isp_sqlsecure_report_getserveraccessRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getserveraccessRow Addisp_sqlsecure_report_getserveraccessRow(int snapshotid, string connectionname, string logintype, string loginname) {
                isp_sqlsecure_report_getserveraccessRow rowisp_sqlsecure_report_getserveraccessRow = ((isp_sqlsecure_report_getserveraccessRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        snapshotid,
                        connectionname,
                        logintype,
                        loginname};
                rowisp_sqlsecure_report_getserveraccessRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getserveraccessRow);
                return rowisp_sqlsecure_report_getserveraccessRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getserveraccessDataTable cln = ((isp_sqlsecure_report_getserveraccessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getserveraccessDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsnapshotid = base.Columns["snapshotid"];
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnlogintype = base.Columns["logintype"];
                this.columnloginname = base.Columns["loginname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsnapshotid = new global::System.Data.DataColumn("snapshotid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotid);
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnlogintype = new global::System.Data.DataColumn("logintype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogintype);
                this.columnloginname = new global::System.Data.DataColumn("loginname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnloginname);
                this.columnsnapshotid.ReadOnly = true;
                this.columnconnectionname.ReadOnly = true;
                this.columnlogintype.ReadOnly = true;
                this.columnlogintype.MaxLength = 1;
                this.columnloginname.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getserveraccessRow Newisp_sqlsecure_report_getserveraccessRow() {
                return ((isp_sqlsecure_report_getserveraccessRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getserveraccessRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getserveraccessRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getserveraccessRowChanged != null)) {
                    this.isp_sqlsecure_report_getserveraccessRowChanged(this, new isp_sqlsecure_report_getserveraccessRowChangeEvent(((isp_sqlsecure_report_getserveraccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getserveraccessRowChanging != null)) {
                    this.isp_sqlsecure_report_getserveraccessRowChanging(this, new isp_sqlsecure_report_getserveraccessRowChangeEvent(((isp_sqlsecure_report_getserveraccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getserveraccessRowDeleted != null)) {
                    this.isp_sqlsecure_report_getserveraccessRowDeleted(this, new isp_sqlsecure_report_getserveraccessRowChangeEvent(((isp_sqlsecure_report_getserveraccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getserveraccessRowDeleting != null)) {
                    this.isp_sqlsecure_report_getserveraccessRowDeleting(this, new isp_sqlsecure_report_getserveraccessRowChangeEvent(((isp_sqlsecure_report_getserveraccessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getserveraccessRow(isp_sqlsecure_report_getserveraccessRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getserveraccessDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_authenticationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_authenticationDataTable() {
                this.TableName = "isp_sqlsecure_report_authentication";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_authenticationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_authenticationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_authenticationRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_authenticationRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_authenticationRowChangeEventHandler isp_sqlsecure_report_authenticationRowChanging;
            
            public event isp_sqlsecure_report_authenticationRowChangeEventHandler isp_sqlsecure_report_authenticationRowChanged;
            
            public event isp_sqlsecure_report_authenticationRowChangeEventHandler isp_sqlsecure_report_authenticationRowDeleting;
            
            public event isp_sqlsecure_report_authenticationRowChangeEventHandler isp_sqlsecure_report_authenticationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_authenticationRow(isp_sqlsecure_report_authenticationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_authenticationRow Addisp_sqlsecure_report_authenticationRow(string connectionname) {
                isp_sqlsecure_report_authenticationRow rowisp_sqlsecure_report_authenticationRow = ((isp_sqlsecure_report_authenticationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname};
                rowisp_sqlsecure_report_authenticationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_authenticationRow);
                return rowisp_sqlsecure_report_authenticationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_authenticationDataTable cln = ((isp_sqlsecure_report_authenticationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_authenticationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnconnectionname.AllowDBNull = false;
                this.columnconnectionname.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_authenticationRow Newisp_sqlsecure_report_authenticationRow() {
                return ((isp_sqlsecure_report_authenticationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_authenticationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_authenticationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_authenticationRowChanged != null)) {
                    this.isp_sqlsecure_report_authenticationRowChanged(this, new isp_sqlsecure_report_authenticationRowChangeEvent(((isp_sqlsecure_report_authenticationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_authenticationRowChanging != null)) {
                    this.isp_sqlsecure_report_authenticationRowChanging(this, new isp_sqlsecure_report_authenticationRowChangeEvent(((isp_sqlsecure_report_authenticationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_authenticationRowDeleted != null)) {
                    this.isp_sqlsecure_report_authenticationRowDeleted(this, new isp_sqlsecure_report_authenticationRowChangeEvent(((isp_sqlsecure_report_authenticationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_authenticationRowDeleting != null)) {
                    this.isp_sqlsecure_report_authenticationRowDeleting(this, new isp_sqlsecure_report_authenticationRowChangeEvent(((isp_sqlsecure_report_authenticationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_authenticationRow(isp_sqlsecure_report_authenticationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_authenticationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_checkwellknowngroupDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columngroupname;
            
            private global::System.Data.DataColumn columnaccess;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkwellknowngroupDataTable() {
                this.TableName = "isp_sqlsecure_report_checkwellknowngroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkwellknowngroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_checkwellknowngroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn groupnameColumn {
                get {
                    return this.columngroupname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accessColumn {
                get {
                    return this.columnaccess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkwellknowngroupRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_checkwellknowngroupRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_checkwellknowngroupRowChangeEventHandler isp_sqlsecure_report_checkwellknowngroupRowChanging;
            
            public event isp_sqlsecure_report_checkwellknowngroupRowChangeEventHandler isp_sqlsecure_report_checkwellknowngroupRowChanged;
            
            public event isp_sqlsecure_report_checkwellknowngroupRowChangeEventHandler isp_sqlsecure_report_checkwellknowngroupRowDeleting;
            
            public event isp_sqlsecure_report_checkwellknowngroupRowChangeEventHandler isp_sqlsecure_report_checkwellknowngroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_checkwellknowngroupRow(isp_sqlsecure_report_checkwellknowngroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkwellknowngroupRow Addisp_sqlsecure_report_checkwellknowngroupRow(string connectionname, string name, string groupname, string access) {
                isp_sqlsecure_report_checkwellknowngroupRow rowisp_sqlsecure_report_checkwellknowngroupRow = ((isp_sqlsecure_report_checkwellknowngroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        name,
                        groupname,
                        access};
                rowisp_sqlsecure_report_checkwellknowngroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_checkwellknowngroupRow);
                return rowisp_sqlsecure_report_checkwellknowngroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_checkwellknowngroupDataTable cln = ((isp_sqlsecure_report_checkwellknowngroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_checkwellknowngroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnname = base.Columns["name"];
                this.columngroupname = base.Columns["groupname"];
                this.columnaccess = base.Columns["access"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columngroupname = new global::System.Data.DataColumn("groupname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroupname);
                this.columnaccess = new global::System.Data.DataColumn("access", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccess);
                this.columnconnectionname.ReadOnly = true;
                this.columnname.ReadOnly = true;
                this.columngroupname.ReadOnly = true;
                this.columnaccess.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkwellknowngroupRow Newisp_sqlsecure_report_checkwellknowngroupRow() {
                return ((isp_sqlsecure_report_checkwellknowngroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_checkwellknowngroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_checkwellknowngroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_checkwellknowngroupRowChanged != null)) {
                    this.isp_sqlsecure_report_checkwellknowngroupRowChanged(this, new isp_sqlsecure_report_checkwellknowngroupRowChangeEvent(((isp_sqlsecure_report_checkwellknowngroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_checkwellknowngroupRowChanging != null)) {
                    this.isp_sqlsecure_report_checkwellknowngroupRowChanging(this, new isp_sqlsecure_report_checkwellknowngroupRowChangeEvent(((isp_sqlsecure_report_checkwellknowngroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_checkwellknowngroupRowDeleted != null)) {
                    this.isp_sqlsecure_report_checkwellknowngroupRowDeleted(this, new isp_sqlsecure_report_checkwellknowngroupRowChangeEvent(((isp_sqlsecure_report_checkwellknowngroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_checkwellknowngroupRowDeleting != null)) {
                    this.isp_sqlsecure_report_checkwellknowngroupRowDeleting(this, new isp_sqlsecure_report_checkwellknowngroupRowChangeEvent(((isp_sqlsecure_report_checkwellknowngroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_checkwellknowngroupRow(isp_sqlsecure_report_checkwellknowngroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_checkwellknowngroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_sysadmin_administratorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnlogin;
            
            private global::System.Data.DataColumn columnfixedrole;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_sysadmin_administratorDataTable() {
                this.TableName = "isp_sqlsecure_report_sysadmin_administrator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_sysadmin_administratorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_sysadmin_administratorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loginColumn {
                get {
                    return this.columnlogin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fixedroleColumn {
                get {
                    return this.columnfixedrole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_sysadmin_administratorRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_sysadmin_administratorRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_sysadmin_administratorRowChangeEventHandler isp_sqlsecure_report_sysadmin_administratorRowChanging;
            
            public event isp_sqlsecure_report_sysadmin_administratorRowChangeEventHandler isp_sqlsecure_report_sysadmin_administratorRowChanged;
            
            public event isp_sqlsecure_report_sysadmin_administratorRowChangeEventHandler isp_sqlsecure_report_sysadmin_administratorRowDeleting;
            
            public event isp_sqlsecure_report_sysadmin_administratorRowChangeEventHandler isp_sqlsecure_report_sysadmin_administratorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_sysadmin_administratorRow(isp_sqlsecure_report_sysadmin_administratorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_sysadmin_administratorRow Addisp_sqlsecure_report_sysadmin_administratorRow(string connectionname, string login, string fixedrole) {
                isp_sqlsecure_report_sysadmin_administratorRow rowisp_sqlsecure_report_sysadmin_administratorRow = ((isp_sqlsecure_report_sysadmin_administratorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        login,
                        fixedrole};
                rowisp_sqlsecure_report_sysadmin_administratorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_sysadmin_administratorRow);
                return rowisp_sqlsecure_report_sysadmin_administratorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_sysadmin_administratorDataTable cln = ((isp_sqlsecure_report_sysadmin_administratorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_sysadmin_administratorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnlogin = base.Columns["login"];
                this.columnfixedrole = base.Columns["fixedrole"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnlogin = new global::System.Data.DataColumn("login", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin);
                this.columnfixedrole = new global::System.Data.DataColumn("fixedrole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfixedrole);
                this.columnconnectionname.ReadOnly = true;
                this.columnlogin.ReadOnly = true;
                this.columnfixedrole.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_sysadmin_administratorRow Newisp_sqlsecure_report_sysadmin_administratorRow() {
                return ((isp_sqlsecure_report_sysadmin_administratorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_sysadmin_administratorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_sysadmin_administratorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_sysadmin_administratorRowChanged != null)) {
                    this.isp_sqlsecure_report_sysadmin_administratorRowChanged(this, new isp_sqlsecure_report_sysadmin_administratorRowChangeEvent(((isp_sqlsecure_report_sysadmin_administratorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_sysadmin_administratorRowChanging != null)) {
                    this.isp_sqlsecure_report_sysadmin_administratorRowChanging(this, new isp_sqlsecure_report_sysadmin_administratorRowChangeEvent(((isp_sqlsecure_report_sysadmin_administratorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_sysadmin_administratorRowDeleted != null)) {
                    this.isp_sqlsecure_report_sysadmin_administratorRowDeleted(this, new isp_sqlsecure_report_sysadmin_administratorRowChangeEvent(((isp_sqlsecure_report_sysadmin_administratorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_sysadmin_administratorRowDeleting != null)) {
                    this.isp_sqlsecure_report_sysadmin_administratorRowDeleting(this, new isp_sqlsecure_report_sysadmin_administratorRowChangeEvent(((isp_sqlsecure_report_sysadmin_administratorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_sysadmin_administratorRow(isp_sqlsecure_report_sysadmin_administratorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_sysadmin_administratorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_orphanedloginsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnstate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_orphanedloginsDataTable() {
                this.TableName = "isp_sqlsecure_report_orphanedlogins";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_orphanedloginsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_orphanedloginsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stateColumn {
                get {
                    return this.columnstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_orphanedloginsRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_orphanedloginsRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_orphanedloginsRowChangeEventHandler isp_sqlsecure_report_orphanedloginsRowChanging;
            
            public event isp_sqlsecure_report_orphanedloginsRowChangeEventHandler isp_sqlsecure_report_orphanedloginsRowChanged;
            
            public event isp_sqlsecure_report_orphanedloginsRowChangeEventHandler isp_sqlsecure_report_orphanedloginsRowDeleting;
            
            public event isp_sqlsecure_report_orphanedloginsRowChangeEventHandler isp_sqlsecure_report_orphanedloginsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_orphanedloginsRow(isp_sqlsecure_report_orphanedloginsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_orphanedloginsRow Addisp_sqlsecure_report_orphanedloginsRow(string connectionname, string name, string type, string state) {
                isp_sqlsecure_report_orphanedloginsRow rowisp_sqlsecure_report_orphanedloginsRow = ((isp_sqlsecure_report_orphanedloginsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        name,
                        type,
                        state};
                rowisp_sqlsecure_report_orphanedloginsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_orphanedloginsRow);
                return rowisp_sqlsecure_report_orphanedloginsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_orphanedloginsDataTable cln = ((isp_sqlsecure_report_orphanedloginsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_orphanedloginsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnname = base.Columns["name"];
                this.columntype = base.Columns["type"];
                this.columnstate = base.Columns["state"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnstate = new global::System.Data.DataColumn("state", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstate);
                this.columnconnectionname.ReadOnly = true;
                this.columnname.ReadOnly = true;
                this.columntype.ReadOnly = true;
                this.columnstate.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_orphanedloginsRow Newisp_sqlsecure_report_orphanedloginsRow() {
                return ((isp_sqlsecure_report_orphanedloginsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_orphanedloginsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_orphanedloginsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_orphanedloginsRowChanged != null)) {
                    this.isp_sqlsecure_report_orphanedloginsRowChanged(this, new isp_sqlsecure_report_orphanedloginsRowChangeEvent(((isp_sqlsecure_report_orphanedloginsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_orphanedloginsRowChanging != null)) {
                    this.isp_sqlsecure_report_orphanedloginsRowChanging(this, new isp_sqlsecure_report_orphanedloginsRowChangeEvent(((isp_sqlsecure_report_orphanedloginsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_orphanedloginsRowDeleted != null)) {
                    this.isp_sqlsecure_report_orphanedloginsRowDeleted(this, new isp_sqlsecure_report_orphanedloginsRowChangeEvent(((isp_sqlsecure_report_orphanedloginsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_orphanedloginsRowDeleting != null)) {
                    this.isp_sqlsecure_report_orphanedloginsRowDeleting(this, new isp_sqlsecure_report_orphanedloginsRowChangeEvent(((isp_sqlsecure_report_orphanedloginsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_orphanedloginsRow(isp_sqlsecure_report_orphanedloginsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_orphanedloginsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_dbuserfixedroleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columndatabasename;
            
            private global::System.Data.DataColumn columnusername;
            
            private global::System.Data.DataColumn columnrole;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_dbuserfixedroleDataTable() {
                this.TableName = "isp_sqlsecure_report_dbuserfixedrole";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_dbuserfixedroleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_dbuserfixedroleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databasenameColumn {
                get {
                    return this.columndatabasename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usernameColumn {
                get {
                    return this.columnusername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roleColumn {
                get {
                    return this.columnrole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_dbuserfixedroleRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_dbuserfixedroleRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_dbuserfixedroleRowChangeEventHandler isp_sqlsecure_report_dbuserfixedroleRowChanging;
            
            public event isp_sqlsecure_report_dbuserfixedroleRowChangeEventHandler isp_sqlsecure_report_dbuserfixedroleRowChanged;
            
            public event isp_sqlsecure_report_dbuserfixedroleRowChangeEventHandler isp_sqlsecure_report_dbuserfixedroleRowDeleting;
            
            public event isp_sqlsecure_report_dbuserfixedroleRowChangeEventHandler isp_sqlsecure_report_dbuserfixedroleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_dbuserfixedroleRow(isp_sqlsecure_report_dbuserfixedroleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_dbuserfixedroleRow Addisp_sqlsecure_report_dbuserfixedroleRow(string connectionname, string databasename, string username, string role) {
                isp_sqlsecure_report_dbuserfixedroleRow rowisp_sqlsecure_report_dbuserfixedroleRow = ((isp_sqlsecure_report_dbuserfixedroleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        databasename,
                        username,
                        role};
                rowisp_sqlsecure_report_dbuserfixedroleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_dbuserfixedroleRow);
                return rowisp_sqlsecure_report_dbuserfixedroleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_dbuserfixedroleDataTable cln = ((isp_sqlsecure_report_dbuserfixedroleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_dbuserfixedroleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columndatabasename = base.Columns["databasename"];
                this.columnusername = base.Columns["username"];
                this.columnrole = base.Columns["role"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columndatabasename = new global::System.Data.DataColumn("databasename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabasename);
                this.columnusername = new global::System.Data.DataColumn("username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusername);
                this.columnrole = new global::System.Data.DataColumn("role", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrole);
                this.columnconnectionname.ReadOnly = true;
                this.columndatabasename.ReadOnly = true;
                this.columnusername.ReadOnly = true;
                this.columnrole.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_dbuserfixedroleRow Newisp_sqlsecure_report_dbuserfixedroleRow() {
                return ((isp_sqlsecure_report_dbuserfixedroleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_dbuserfixedroleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_dbuserfixedroleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_dbuserfixedroleRowChanged != null)) {
                    this.isp_sqlsecure_report_dbuserfixedroleRowChanged(this, new isp_sqlsecure_report_dbuserfixedroleRowChangeEvent(((isp_sqlsecure_report_dbuserfixedroleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_dbuserfixedroleRowChanging != null)) {
                    this.isp_sqlsecure_report_dbuserfixedroleRowChanging(this, new isp_sqlsecure_report_dbuserfixedroleRowChangeEvent(((isp_sqlsecure_report_dbuserfixedroleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_dbuserfixedroleRowDeleted != null)) {
                    this.isp_sqlsecure_report_dbuserfixedroleRowDeleted(this, new isp_sqlsecure_report_dbuserfixedroleRowChangeEvent(((isp_sqlsecure_report_dbuserfixedroleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_dbuserfixedroleRowDeleting != null)) {
                    this.isp_sqlsecure_report_dbuserfixedroleRowDeleting(this, new isp_sqlsecure_report_dbuserfixedroleRowChangeEvent(((isp_sqlsecure_report_dbuserfixedroleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_dbuserfixedroleRow(isp_sqlsecure_report_dbuserfixedroleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_dbuserfixedroleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_checkcmdshellDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columndatabasename;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkcmdshellDataTable() {
                this.TableName = "isp_sqlsecure_report_checkcmdshell";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkcmdshellDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_checkcmdshellDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databasenameColumn {
                get {
                    return this.columndatabasename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkcmdshellRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_checkcmdshellRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_checkcmdshellRowChangeEventHandler isp_sqlsecure_report_checkcmdshellRowChanging;
            
            public event isp_sqlsecure_report_checkcmdshellRowChangeEventHandler isp_sqlsecure_report_checkcmdshellRowChanged;
            
            public event isp_sqlsecure_report_checkcmdshellRowChangeEventHandler isp_sqlsecure_report_checkcmdshellRowDeleting;
            
            public event isp_sqlsecure_report_checkcmdshellRowChangeEventHandler isp_sqlsecure_report_checkcmdshellRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_checkcmdshellRow(isp_sqlsecure_report_checkcmdshellRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkcmdshellRow Addisp_sqlsecure_report_checkcmdshellRow(string connectionname, string name, string databasename) {
                isp_sqlsecure_report_checkcmdshellRow rowisp_sqlsecure_report_checkcmdshellRow = ((isp_sqlsecure_report_checkcmdshellRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        name,
                        databasename};
                rowisp_sqlsecure_report_checkcmdshellRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_checkcmdshellRow);
                return rowisp_sqlsecure_report_checkcmdshellRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_checkcmdshellDataTable cln = ((isp_sqlsecure_report_checkcmdshellDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_checkcmdshellDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnname = base.Columns["name"];
                this.columndatabasename = base.Columns["databasename"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columndatabasename = new global::System.Data.DataColumn("databasename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabasename);
                this.columnconnectionname.ReadOnly = true;
                this.columnname.ReadOnly = true;
                this.columndatabasename.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkcmdshellRow Newisp_sqlsecure_report_checkcmdshellRow() {
                return ((isp_sqlsecure_report_checkcmdshellRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_checkcmdshellRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_checkcmdshellRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_checkcmdshellRowChanged != null)) {
                    this.isp_sqlsecure_report_checkcmdshellRowChanged(this, new isp_sqlsecure_report_checkcmdshellRowChangeEvent(((isp_sqlsecure_report_checkcmdshellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_checkcmdshellRowChanging != null)) {
                    this.isp_sqlsecure_report_checkcmdshellRowChanging(this, new isp_sqlsecure_report_checkcmdshellRowChangeEvent(((isp_sqlsecure_report_checkcmdshellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_checkcmdshellRowDeleted != null)) {
                    this.isp_sqlsecure_report_checkcmdshellRowDeleted(this, new isp_sqlsecure_report_checkcmdshellRowChangeEvent(((isp_sqlsecure_report_checkcmdshellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_checkcmdshellRowDeleting != null)) {
                    this.isp_sqlsecure_report_checkcmdshellRowDeleting(this, new isp_sqlsecure_report_checkcmdshellRowChangeEvent(((isp_sqlsecure_report_checkcmdshellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_checkcmdshellRow(isp_sqlsecure_report_checkcmdshellRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_checkcmdshellDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getuserinfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnloginname;
            
            private global::System.Data.DataColumn columnlogintype;
            
            private global::System.Data.DataColumn columndatabasename;
            
            private global::System.Data.DataColumn columnusername;
            
            private global::System.Data.DataColumn columnisalias;
            
            private global::System.Data.DataColumn columnhasaccess;
            
            private global::System.Data.DataColumn columndefaultschema;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserinfoDataTable() {
                this.TableName = "isp_sqlsecure_report_getuserinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getuserinfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getuserinfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loginnameColumn {
                get {
                    return this.columnloginname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn logintypeColumn {
                get {
                    return this.columnlogintype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databasenameColumn {
                get {
                    return this.columndatabasename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usernameColumn {
                get {
                    return this.columnusername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isaliasColumn {
                get {
                    return this.columnisalias;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hasaccessColumn {
                get {
                    return this.columnhasaccess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defaultschemaColumn {
                get {
                    return this.columndefaultschema;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserinfoRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getuserinfoRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getuserinfoRowChangeEventHandler isp_sqlsecure_report_getuserinfoRowChanging;
            
            public event isp_sqlsecure_report_getuserinfoRowChangeEventHandler isp_sqlsecure_report_getuserinfoRowChanged;
            
            public event isp_sqlsecure_report_getuserinfoRowChangeEventHandler isp_sqlsecure_report_getuserinfoRowDeleting;
            
            public event isp_sqlsecure_report_getuserinfoRowChangeEventHandler isp_sqlsecure_report_getuserinfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getuserinfoRow(isp_sqlsecure_report_getuserinfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserinfoRow Addisp_sqlsecure_report_getuserinfoRow(string connectionname, string loginname, string logintype, string databasename, string username, string isalias, string hasaccess, string defaultschema) {
                isp_sqlsecure_report_getuserinfoRow rowisp_sqlsecure_report_getuserinfoRow = ((isp_sqlsecure_report_getuserinfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        loginname,
                        logintype,
                        databasename,
                        username,
                        isalias,
                        hasaccess,
                        defaultschema};
                rowisp_sqlsecure_report_getuserinfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getuserinfoRow);
                return rowisp_sqlsecure_report_getuserinfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getuserinfoDataTable cln = ((isp_sqlsecure_report_getuserinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getuserinfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnloginname = base.Columns["loginname"];
                this.columnlogintype = base.Columns["logintype"];
                this.columndatabasename = base.Columns["databasename"];
                this.columnusername = base.Columns["username"];
                this.columnisalias = base.Columns["isalias"];
                this.columnhasaccess = base.Columns["hasaccess"];
                this.columndefaultschema = base.Columns["defaultschema"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnloginname = new global::System.Data.DataColumn("loginname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnloginname);
                this.columnlogintype = new global::System.Data.DataColumn("logintype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogintype);
                this.columndatabasename = new global::System.Data.DataColumn("databasename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabasename);
                this.columnusername = new global::System.Data.DataColumn("username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusername);
                this.columnisalias = new global::System.Data.DataColumn("isalias", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisalias);
                this.columnhasaccess = new global::System.Data.DataColumn("hasaccess", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhasaccess);
                this.columndefaultschema = new global::System.Data.DataColumn("defaultschema", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefaultschema);
                this.columnconnectionname.ReadOnly = true;
                this.columnloginname.ReadOnly = true;
                this.columnlogintype.ReadOnly = true;
                this.columndatabasename.ReadOnly = true;
                this.columnusername.ReadOnly = true;
                this.columnisalias.ReadOnly = true;
                this.columnhasaccess.ReadOnly = true;
                this.columndefaultschema.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserinfoRow Newisp_sqlsecure_report_getuserinfoRow() {
                return ((isp_sqlsecure_report_getuserinfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getuserinfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getuserinfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getuserinfoRowChanged != null)) {
                    this.isp_sqlsecure_report_getuserinfoRowChanged(this, new isp_sqlsecure_report_getuserinfoRowChangeEvent(((isp_sqlsecure_report_getuserinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getuserinfoRowChanging != null)) {
                    this.isp_sqlsecure_report_getuserinfoRowChanging(this, new isp_sqlsecure_report_getuserinfoRowChangeEvent(((isp_sqlsecure_report_getuserinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getuserinfoRowDeleted != null)) {
                    this.isp_sqlsecure_report_getuserinfoRowDeleted(this, new isp_sqlsecure_report_getuserinfoRowChangeEvent(((isp_sqlsecure_report_getuserinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getuserinfoRowDeleting != null)) {
                    this.isp_sqlsecure_report_getuserinfoRowDeleting(this, new isp_sqlsecure_report_getuserinfoRowChangeEvent(((isp_sqlsecure_report_getuserinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getuserinfoRow(isp_sqlsecure_report_getuserinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getuserinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_checkdbchainingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkdbchainingDataTable() {
                this.TableName = "isp_sqlsecure_report_checkdbchaining";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkdbchainingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_checkdbchainingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkdbchainingRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_checkdbchainingRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_checkdbchainingRowChangeEventHandler isp_sqlsecure_report_checkdbchainingRowChanging;
            
            public event isp_sqlsecure_report_checkdbchainingRowChangeEventHandler isp_sqlsecure_report_checkdbchainingRowChanged;
            
            public event isp_sqlsecure_report_checkdbchainingRowChangeEventHandler isp_sqlsecure_report_checkdbchainingRowDeleting;
            
            public event isp_sqlsecure_report_checkdbchainingRowChangeEventHandler isp_sqlsecure_report_checkdbchainingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_checkdbchainingRow(isp_sqlsecure_report_checkdbchainingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkdbchainingRow Addisp_sqlsecure_report_checkdbchainingRow(string connectionname) {
                isp_sqlsecure_report_checkdbchainingRow rowisp_sqlsecure_report_checkdbchainingRow = ((isp_sqlsecure_report_checkdbchainingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname};
                rowisp_sqlsecure_report_checkdbchainingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_checkdbchainingRow);
                return rowisp_sqlsecure_report_checkdbchainingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_checkdbchainingDataTable cln = ((isp_sqlsecure_report_checkdbchainingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_checkdbchainingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnconnectionname.AllowDBNull = false;
                this.columnconnectionname.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkdbchainingRow Newisp_sqlsecure_report_checkdbchainingRow() {
                return ((isp_sqlsecure_report_checkdbchainingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_checkdbchainingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_checkdbchainingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_checkdbchainingRowChanged != null)) {
                    this.isp_sqlsecure_report_checkdbchainingRowChanged(this, new isp_sqlsecure_report_checkdbchainingRowChangeEvent(((isp_sqlsecure_report_checkdbchainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_checkdbchainingRowChanging != null)) {
                    this.isp_sqlsecure_report_checkdbchainingRowChanging(this, new isp_sqlsecure_report_checkdbchainingRowChangeEvent(((isp_sqlsecure_report_checkdbchainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_checkdbchainingRowDeleted != null)) {
                    this.isp_sqlsecure_report_checkdbchainingRowDeleted(this, new isp_sqlsecure_report_checkdbchainingRowChangeEvent(((isp_sqlsecure_report_checkdbchainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_checkdbchainingRowDeleting != null)) {
                    this.isp_sqlsecure_report_checkdbchainingRowDeleting(this, new isp_sqlsecure_report_checkdbchainingRowChangeEvent(((isp_sqlsecure_report_checkdbchainingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_checkdbchainingRow(isp_sqlsecure_report_checkdbchainingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_checkdbchainingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_checksystemstoredproceduresDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columndatabasename;
            
            private global::System.Data.DataColumn columnusername;
            
            private global::System.Data.DataColumn columnobjectname;
            
            private global::System.Data.DataColumn columnpermission;
            
            private global::System.Data.DataColumn columnisgrant;
            
            private global::System.Data.DataColumn columnisgrantwith;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checksystemstoredproceduresDataTable() {
                this.TableName = "isp_sqlsecure_report_checksystemstoredprocedures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checksystemstoredproceduresDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_checksystemstoredproceduresDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databasenameColumn {
                get {
                    return this.columndatabasename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn usernameColumn {
                get {
                    return this.columnusername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn permissionColumn {
                get {
                    return this.columnpermission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isgrantColumn {
                get {
                    return this.columnisgrant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isgrantwithColumn {
                get {
                    return this.columnisgrantwith;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checksystemstoredproceduresRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_checksystemstoredproceduresRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_checksystemstoredproceduresRowChangeEventHandler isp_sqlsecure_report_checksystemstoredproceduresRowChanging;
            
            public event isp_sqlsecure_report_checksystemstoredproceduresRowChangeEventHandler isp_sqlsecure_report_checksystemstoredproceduresRowChanged;
            
            public event isp_sqlsecure_report_checksystemstoredproceduresRowChangeEventHandler isp_sqlsecure_report_checksystemstoredproceduresRowDeleting;
            
            public event isp_sqlsecure_report_checksystemstoredproceduresRowChangeEventHandler isp_sqlsecure_report_checksystemstoredproceduresRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_checksystemstoredproceduresRow(isp_sqlsecure_report_checksystemstoredproceduresRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checksystemstoredproceduresRow Addisp_sqlsecure_report_checksystemstoredproceduresRow(string connectionname, string databasename, string username, string objectname, string permission, string isgrant, string isgrantwith) {
                isp_sqlsecure_report_checksystemstoredproceduresRow rowisp_sqlsecure_report_checksystemstoredproceduresRow = ((isp_sqlsecure_report_checksystemstoredproceduresRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        databasename,
                        username,
                        objectname,
                        permission,
                        isgrant,
                        isgrantwith};
                rowisp_sqlsecure_report_checksystemstoredproceduresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_checksystemstoredproceduresRow);
                return rowisp_sqlsecure_report_checksystemstoredproceduresRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_checksystemstoredproceduresDataTable cln = ((isp_sqlsecure_report_checksystemstoredproceduresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_checksystemstoredproceduresDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columndatabasename = base.Columns["databasename"];
                this.columnusername = base.Columns["username"];
                this.columnobjectname = base.Columns["objectname"];
                this.columnpermission = base.Columns["permission"];
                this.columnisgrant = base.Columns["isgrant"];
                this.columnisgrantwith = base.Columns["isgrantwith"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columndatabasename = new global::System.Data.DataColumn("databasename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabasename);
                this.columnusername = new global::System.Data.DataColumn("username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnusername);
                this.columnobjectname = new global::System.Data.DataColumn("objectname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobjectname);
                this.columnpermission = new global::System.Data.DataColumn("permission", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpermission);
                this.columnisgrant = new global::System.Data.DataColumn("isgrant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisgrant);
                this.columnisgrantwith = new global::System.Data.DataColumn("isgrantwith", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisgrantwith);
                this.columnconnectionname.ReadOnly = true;
                this.columndatabasename.ReadOnly = true;
                this.columnusername.ReadOnly = true;
                this.columnobjectname.ReadOnly = true;
                this.columnpermission.ReadOnly = true;
                this.columnisgrant.ReadOnly = true;
                this.columnisgrantwith.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checksystemstoredproceduresRow Newisp_sqlsecure_report_checksystemstoredproceduresRow() {
                return ((isp_sqlsecure_report_checksystemstoredproceduresRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_checksystemstoredproceduresRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_checksystemstoredproceduresRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_checksystemstoredproceduresRowChanged != null)) {
                    this.isp_sqlsecure_report_checksystemstoredproceduresRowChanged(this, new isp_sqlsecure_report_checksystemstoredproceduresRowChangeEvent(((isp_sqlsecure_report_checksystemstoredproceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_checksystemstoredproceduresRowChanging != null)) {
                    this.isp_sqlsecure_report_checksystemstoredproceduresRowChanging(this, new isp_sqlsecure_report_checksystemstoredproceduresRowChangeEvent(((isp_sqlsecure_report_checksystemstoredproceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_checksystemstoredproceduresRowDeleted != null)) {
                    this.isp_sqlsecure_report_checksystemstoredproceduresRowDeleted(this, new isp_sqlsecure_report_checksystemstoredproceduresRowChangeEvent(((isp_sqlsecure_report_checksystemstoredproceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_checksystemstoredproceduresRowDeleting != null)) {
                    this.isp_sqlsecure_report_checksystemstoredproceduresRowDeleting(this, new isp_sqlsecure_report_checksystemstoredproceduresRowChangeEvent(((isp_sqlsecure_report_checksystemstoredproceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_checksystemstoredproceduresRow(isp_sqlsecure_report_checksystemstoredproceduresRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_checksystemstoredproceduresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_checkxpmailDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkxpmailDataTable() {
                this.TableName = "isp_sqlsecure_report_checkxpmail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkxpmailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_checkxpmailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkxpmailRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_checkxpmailRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_checkxpmailRowChangeEventHandler isp_sqlsecure_report_checkxpmailRowChanging;
            
            public event isp_sqlsecure_report_checkxpmailRowChangeEventHandler isp_sqlsecure_report_checkxpmailRowChanged;
            
            public event isp_sqlsecure_report_checkxpmailRowChangeEventHandler isp_sqlsecure_report_checkxpmailRowDeleting;
            
            public event isp_sqlsecure_report_checkxpmailRowChangeEventHandler isp_sqlsecure_report_checkxpmailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_checkxpmailRow(isp_sqlsecure_report_checkxpmailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkxpmailRow Addisp_sqlsecure_report_checkxpmailRow(string connectionname, string name) {
                isp_sqlsecure_report_checkxpmailRow rowisp_sqlsecure_report_checkxpmailRow = ((isp_sqlsecure_report_checkxpmailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        name};
                rowisp_sqlsecure_report_checkxpmailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_checkxpmailRow);
                return rowisp_sqlsecure_report_checkxpmailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_checkxpmailDataTable cln = ((isp_sqlsecure_report_checkxpmailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_checkxpmailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnname = base.Columns["name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnconnectionname.ReadOnly = true;
                this.columnname.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkxpmailRow Newisp_sqlsecure_report_checkxpmailRow() {
                return ((isp_sqlsecure_report_checkxpmailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_checkxpmailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_checkxpmailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_checkxpmailRowChanged != null)) {
                    this.isp_sqlsecure_report_checkxpmailRowChanged(this, new isp_sqlsecure_report_checkxpmailRowChangeEvent(((isp_sqlsecure_report_checkxpmailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_checkxpmailRowChanging != null)) {
                    this.isp_sqlsecure_report_checkxpmailRowChanging(this, new isp_sqlsecure_report_checkxpmailRowChangeEvent(((isp_sqlsecure_report_checkxpmailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_checkxpmailRowDeleted != null)) {
                    this.isp_sqlsecure_report_checkxpmailRowDeleted(this, new isp_sqlsecure_report_checkxpmailRowChangeEvent(((isp_sqlsecure_report_checkxpmailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_checkxpmailRowDeleting != null)) {
                    this.isp_sqlsecure_report_checkxpmailRowDeleting(this, new isp_sqlsecure_report_checkxpmailRowChangeEvent(((isp_sqlsecure_report_checkxpmailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_checkxpmailRow(isp_sqlsecure_report_checkxpmailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_checkxpmailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getauditfiltersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnservername;
            
            private global::System.Data.DataColumn columnrulename;
            
            private global::System.Data.DataColumn columnruledescription;
            
            private global::System.Data.DataColumn columnmodifiedby;
            
            private global::System.Data.DataColumn columnmodifiedon;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnscope;
            
            private global::System.Data.DataColumn columnnamematchstring;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditfiltersDataTable() {
                this.TableName = "isp_sqlsecure_report_getauditfilters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getauditfiltersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getauditfiltersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn servernameColumn {
                get {
                    return this.columnservername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rulenameColumn {
                get {
                    return this.columnrulename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ruledescriptionColumn {
                get {
                    return this.columnruledescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modifiedbyColumn {
                get {
                    return this.columnmodifiedby;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn modifiedonColumn {
                get {
                    return this.columnmodifiedon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scopeColumn {
                get {
                    return this.columnscope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn namematchstringColumn {
                get {
                    return this.columnnamematchstring;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditfiltersRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getauditfiltersRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getauditfiltersRowChangeEventHandler isp_sqlsecure_report_getauditfiltersRowChanging;
            
            public event isp_sqlsecure_report_getauditfiltersRowChangeEventHandler isp_sqlsecure_report_getauditfiltersRowChanged;
            
            public event isp_sqlsecure_report_getauditfiltersRowChangeEventHandler isp_sqlsecure_report_getauditfiltersRowDeleting;
            
            public event isp_sqlsecure_report_getauditfiltersRowChangeEventHandler isp_sqlsecure_report_getauditfiltersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getauditfiltersRow(isp_sqlsecure_report_getauditfiltersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditfiltersRow Addisp_sqlsecure_report_getauditfiltersRow(string servername, string rulename, string ruledescription, string modifiedby, System.DateTime modifiedon, string type, string scope, string namematchstring) {
                isp_sqlsecure_report_getauditfiltersRow rowisp_sqlsecure_report_getauditfiltersRow = ((isp_sqlsecure_report_getauditfiltersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        servername,
                        rulename,
                        ruledescription,
                        modifiedby,
                        modifiedon,
                        type,
                        scope,
                        namematchstring};
                rowisp_sqlsecure_report_getauditfiltersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getauditfiltersRow);
                return rowisp_sqlsecure_report_getauditfiltersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getauditfiltersDataTable cln = ((isp_sqlsecure_report_getauditfiltersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getauditfiltersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnservername = base.Columns["servername"];
                this.columnrulename = base.Columns["rulename"];
                this.columnruledescription = base.Columns["ruledescription"];
                this.columnmodifiedby = base.Columns["modifiedby"];
                this.columnmodifiedon = base.Columns["modifiedon"];
                this.columntype = base.Columns["type"];
                this.columnscope = base.Columns["scope"];
                this.columnnamematchstring = base.Columns["namematchstring"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnservername = new global::System.Data.DataColumn("servername", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservername);
                this.columnrulename = new global::System.Data.DataColumn("rulename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrulename);
                this.columnruledescription = new global::System.Data.DataColumn("ruledescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnruledescription);
                this.columnmodifiedby = new global::System.Data.DataColumn("modifiedby", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodifiedby);
                this.columnmodifiedon = new global::System.Data.DataColumn("modifiedon", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodifiedon);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnscope = new global::System.Data.DataColumn("scope", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscope);
                this.columnnamematchstring = new global::System.Data.DataColumn("namematchstring", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnamematchstring);
                this.columnservername.AllowDBNull = false;
                this.columnservername.MaxLength = 400;
                this.columnrulename.AllowDBNull = false;
                this.columnrulename.MaxLength = 256;
                this.columnruledescription.MaxLength = 80;
                this.columnmodifiedby.MaxLength = 500;
                this.columntype.AllowDBNull = false;
                this.columntype.MaxLength = 128;
                this.columnscope.ReadOnly = true;
                this.columnscope.MaxLength = 15;
                this.columnnamematchstring.ReadOnly = true;
                this.columnnamematchstring.MaxLength = 1000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditfiltersRow Newisp_sqlsecure_report_getauditfiltersRow() {
                return ((isp_sqlsecure_report_getauditfiltersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getauditfiltersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getauditfiltersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getauditfiltersRowChanged != null)) {
                    this.isp_sqlsecure_report_getauditfiltersRowChanged(this, new isp_sqlsecure_report_getauditfiltersRowChangeEvent(((isp_sqlsecure_report_getauditfiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getauditfiltersRowChanging != null)) {
                    this.isp_sqlsecure_report_getauditfiltersRowChanging(this, new isp_sqlsecure_report_getauditfiltersRowChangeEvent(((isp_sqlsecure_report_getauditfiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getauditfiltersRowDeleted != null)) {
                    this.isp_sqlsecure_report_getauditfiltersRowDeleted(this, new isp_sqlsecure_report_getauditfiltersRowChangeEvent(((isp_sqlsecure_report_getauditfiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getauditfiltersRowDeleting != null)) {
                    this.isp_sqlsecure_report_getauditfiltersRowDeleting(this, new isp_sqlsecure_report_getauditfiltersRowChangeEvent(((isp_sqlsecure_report_getauditfiltersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getauditfiltersRow(isp_sqlsecure_report_getauditfiltersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getauditfiltersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getuserpermissionsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnloginname;
            
            private global::System.Data.DataColumn columnlogintype;
            
            private global::System.Data.DataColumn columnserveraccess;
            
            private global::System.Data.DataColumn columndisabled;
            
            private global::System.Data.DataColumn columnrole;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserpermissionsDataTable() {
                this.TableName = "isp_sqlsecure_report_getuserpermissions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getuserpermissionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getuserpermissionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loginnameColumn {
                get {
                    return this.columnloginname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn logintypeColumn {
                get {
                    return this.columnlogintype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn serveraccessColumn {
                get {
                    return this.columnserveraccess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn disabledColumn {
                get {
                    return this.columndisabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roleColumn {
                get {
                    return this.columnrole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserpermissionsRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getuserpermissionsRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getuserpermissionsRowChangeEventHandler isp_sqlsecure_report_getuserpermissionsRowChanging;
            
            public event isp_sqlsecure_report_getuserpermissionsRowChangeEventHandler isp_sqlsecure_report_getuserpermissionsRowChanged;
            
            public event isp_sqlsecure_report_getuserpermissionsRowChangeEventHandler isp_sqlsecure_report_getuserpermissionsRowDeleting;
            
            public event isp_sqlsecure_report_getuserpermissionsRowChangeEventHandler isp_sqlsecure_report_getuserpermissionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getuserpermissionsRow(isp_sqlsecure_report_getuserpermissionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserpermissionsRow Addisp_sqlsecure_report_getuserpermissionsRow(string connectionname, string loginname, string logintype, string serveraccess, string disabled, string role) {
                isp_sqlsecure_report_getuserpermissionsRow rowisp_sqlsecure_report_getuserpermissionsRow = ((isp_sqlsecure_report_getuserpermissionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        loginname,
                        logintype,
                        serveraccess,
                        disabled,
                        role};
                rowisp_sqlsecure_report_getuserpermissionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getuserpermissionsRow);
                return rowisp_sqlsecure_report_getuserpermissionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getuserpermissionsDataTable cln = ((isp_sqlsecure_report_getuserpermissionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getuserpermissionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnloginname = base.Columns["loginname"];
                this.columnlogintype = base.Columns["logintype"];
                this.columnserveraccess = base.Columns["serveraccess"];
                this.columndisabled = base.Columns["disabled"];
                this.columnrole = base.Columns["role"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnloginname = new global::System.Data.DataColumn("loginname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnloginname);
                this.columnlogintype = new global::System.Data.DataColumn("logintype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogintype);
                this.columnserveraccess = new global::System.Data.DataColumn("serveraccess", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnserveraccess);
                this.columndisabled = new global::System.Data.DataColumn("disabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisabled);
                this.columnrole = new global::System.Data.DataColumn("role", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrole);
                this.columnconnectionname.ReadOnly = true;
                this.columnloginname.ReadOnly = true;
                this.columnlogintype.ReadOnly = true;
                this.columnserveraccess.ReadOnly = true;
                this.columndisabled.ReadOnly = true;
                this.columnrole.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserpermissionsRow Newisp_sqlsecure_report_getuserpermissionsRow() {
                return ((isp_sqlsecure_report_getuserpermissionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getuserpermissionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getuserpermissionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getuserpermissionsRowChanged != null)) {
                    this.isp_sqlsecure_report_getuserpermissionsRowChanged(this, new isp_sqlsecure_report_getuserpermissionsRowChangeEvent(((isp_sqlsecure_report_getuserpermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getuserpermissionsRowChanging != null)) {
                    this.isp_sqlsecure_report_getuserpermissionsRowChanging(this, new isp_sqlsecure_report_getuserpermissionsRowChangeEvent(((isp_sqlsecure_report_getuserpermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getuserpermissionsRowDeleted != null)) {
                    this.isp_sqlsecure_report_getuserpermissionsRowDeleted(this, new isp_sqlsecure_report_getuserpermissionsRowChangeEvent(((isp_sqlsecure_report_getuserpermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getuserpermissionsRowDeleting != null)) {
                    this.isp_sqlsecure_report_getuserpermissionsRowDeleting(this, new isp_sqlsecure_report_getuserpermissionsRowChangeEvent(((isp_sqlsecure_report_getuserpermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getuserpermissionsRow(isp_sqlsecure_report_getuserpermissionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getuserpermissionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getuserdatabasepermissionsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnsnapshotid;
            
            private global::System.Data.DataColumn columnpermissionlevel;
            
            private global::System.Data.DataColumn columnlogintype;
            
            private global::System.Data.DataColumn columnloginname;
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columndatabasename;
            
            private global::System.Data.DataColumn columnprincipalid;
            
            private global::System.Data.DataColumn columnprincipalname;
            
            private global::System.Data.DataColumn columnprincipaltype;
            
            private global::System.Data.DataColumn columndatabaseprincipal;
            
            private global::System.Data.DataColumn columndatabaseprincipaltype;
            
            private global::System.Data.DataColumn columngrantor;
            
            private global::System.Data.DataColumn columngrantorname;
            
            private global::System.Data.DataColumn columngrantee;
            
            private global::System.Data.DataColumn columngranteename;
            
            private global::System.Data.DataColumn columnclassid;
            
            private global::System.Data.DataColumn columnpermissiontype;
            
            private global::System.Data.DataColumn columncoveringfrom;
            
            private global::System.Data.DataColumn columnpermission;
            
            private global::System.Data.DataColumn columnisgrant;
            
            private global::System.Data.DataColumn columnisgrantwith;
            
            private global::System.Data.DataColumn columnisrevoke;
            
            private global::System.Data.DataColumn columnisdeny;
            
            private global::System.Data.DataColumn columnparentobjectid;
            
            private global::System.Data.DataColumn columnobjectid;
            
            private global::System.Data.DataColumn columnobjectname;
            
            private global::System.Data.DataColumn columnqualifiedname;
            
            private global::System.Data.DataColumn columnobjecttype;
            
            private global::System.Data.DataColumn columnschemaid;
            
            private global::System.Data.DataColumn columnschemaname;
            
            private global::System.Data.DataColumn columnowner;
            
            private global::System.Data.DataColumn columnownername;
            
            private global::System.Data.DataColumn columnisaliased;
            
            private global::System.Data.DataColumn columninherited;
            
            private global::System.Data.DataColumn columnsourcename;
            
            private global::System.Data.DataColumn columnsourcetype;
            
            private global::System.Data.DataColumn columnsourcepermission;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserdatabasepermissionsDataTable() {
                this.TableName = "isp_sqlsecure_report_getuserdatabasepermissions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getuserdatabasepermissionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getuserdatabasepermissionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotidColumn {
                get {
                    return this.columnsnapshotid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn permissionlevelColumn {
                get {
                    return this.columnpermissionlevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn logintypeColumn {
                get {
                    return this.columnlogintype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loginnameColumn {
                get {
                    return this.columnloginname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databasenameColumn {
                get {
                    return this.columndatabasename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn principalidColumn {
                get {
                    return this.columnprincipalid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn principalnameColumn {
                get {
                    return this.columnprincipalname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn principaltypeColumn {
                get {
                    return this.columnprincipaltype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databaseprincipalColumn {
                get {
                    return this.columndatabaseprincipal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databaseprincipaltypeColumn {
                get {
                    return this.columndatabaseprincipaltype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grantorColumn {
                get {
                    return this.columngrantor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grantornameColumn {
                get {
                    return this.columngrantorname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn granteeColumn {
                get {
                    return this.columngrantee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn granteenameColumn {
                get {
                    return this.columngranteename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn classidColumn {
                get {
                    return this.columnclassid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn permissiontypeColumn {
                get {
                    return this.columnpermissiontype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn coveringfromColumn {
                get {
                    return this.columncoveringfrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn permissionColumn {
                get {
                    return this.columnpermission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isgrantColumn {
                get {
                    return this.columnisgrant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isgrantwithColumn {
                get {
                    return this.columnisgrantwith;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isrevokeColumn {
                get {
                    return this.columnisrevoke;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isdenyColumn {
                get {
                    return this.columnisdeny;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parentobjectidColumn {
                get {
                    return this.columnparentobjectid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn objectidColumn {
                get {
                    return this.columnobjectid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn objectnameColumn {
                get {
                    return this.columnobjectname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qualifiednameColumn {
                get {
                    return this.columnqualifiedname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn objecttypeColumn {
                get {
                    return this.columnobjecttype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn schemaidColumn {
                get {
                    return this.columnschemaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn schemanameColumn {
                get {
                    return this.columnschemaname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ownerColumn {
                get {
                    return this.columnowner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ownernameColumn {
                get {
                    return this.columnownername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isaliasedColumn {
                get {
                    return this.columnisaliased;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inheritedColumn {
                get {
                    return this.columninherited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourcenameColumn {
                get {
                    return this.columnsourcename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourcetypeColumn {
                get {
                    return this.columnsourcetype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourcepermissionColumn {
                get {
                    return this.columnsourcepermission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserdatabasepermissionsRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getuserdatabasepermissionsRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEventHandler isp_sqlsecure_report_getuserdatabasepermissionsRowChanging;
            
            public event isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEventHandler isp_sqlsecure_report_getuserdatabasepermissionsRowChanged;
            
            public event isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEventHandler isp_sqlsecure_report_getuserdatabasepermissionsRowDeleting;
            
            public event isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEventHandler isp_sqlsecure_report_getuserdatabasepermissionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getuserdatabasepermissionsRow(isp_sqlsecure_report_getuserdatabasepermissionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserdatabasepermissionsRow Addisp_sqlsecure_report_getuserdatabasepermissionsRow(
                        int snapshotid, 
                        string permissionlevel, 
                        string logintype, 
                        string loginname, 
                        string connectionname, 
                        string databasename, 
                        int principalid, 
                        string principalname, 
                        string principaltype, 
                        string databaseprincipal, 
                        string databaseprincipaltype, 
                        int grantor, 
                        string grantorname, 
                        int grantee, 
                        string granteename, 
                        int classid, 
                        string permissiontype, 
                        string coveringfrom, 
                        string permission, 
                        string isgrant, 
                        string isgrantwith, 
                        string isrevoke, 
                        string isdeny, 
                        int parentobjectid, 
                        int objectid, 
                        string objectname, 
                        string qualifiedname, 
                        string objecttype, 
                        int schemaid, 
                        string schemaname, 
                        int owner, 
                        string ownername, 
                        string isaliased, 
                        string inherited, 
                        string sourcename, 
                        string sourcetype, 
                        string sourcepermission) {
                isp_sqlsecure_report_getuserdatabasepermissionsRow rowisp_sqlsecure_report_getuserdatabasepermissionsRow = ((isp_sqlsecure_report_getuserdatabasepermissionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        snapshotid,
                        permissionlevel,
                        logintype,
                        loginname,
                        connectionname,
                        databasename,
                        principalid,
                        principalname,
                        principaltype,
                        databaseprincipal,
                        databaseprincipaltype,
                        grantor,
                        grantorname,
                        grantee,
                        granteename,
                        classid,
                        permissiontype,
                        coveringfrom,
                        permission,
                        isgrant,
                        isgrantwith,
                        isrevoke,
                        isdeny,
                        parentobjectid,
                        objectid,
                        objectname,
                        qualifiedname,
                        objecttype,
                        schemaid,
                        schemaname,
                        owner,
                        ownername,
                        isaliased,
                        inherited,
                        sourcename,
                        sourcetype,
                        sourcepermission};
                rowisp_sqlsecure_report_getuserdatabasepermissionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getuserdatabasepermissionsRow);
                return rowisp_sqlsecure_report_getuserdatabasepermissionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getuserdatabasepermissionsDataTable cln = ((isp_sqlsecure_report_getuserdatabasepermissionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getuserdatabasepermissionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsnapshotid = base.Columns["snapshotid"];
                this.columnpermissionlevel = base.Columns["permissionlevel"];
                this.columnlogintype = base.Columns["logintype"];
                this.columnloginname = base.Columns["loginname"];
                this.columnconnectionname = base.Columns["connectionname"];
                this.columndatabasename = base.Columns["databasename"];
                this.columnprincipalid = base.Columns["principalid"];
                this.columnprincipalname = base.Columns["principalname"];
                this.columnprincipaltype = base.Columns["principaltype"];
                this.columndatabaseprincipal = base.Columns["databaseprincipal"];
                this.columndatabaseprincipaltype = base.Columns["databaseprincipaltype"];
                this.columngrantor = base.Columns["grantor"];
                this.columngrantorname = base.Columns["grantorname"];
                this.columngrantee = base.Columns["grantee"];
                this.columngranteename = base.Columns["granteename"];
                this.columnclassid = base.Columns["classid"];
                this.columnpermissiontype = base.Columns["permissiontype"];
                this.columncoveringfrom = base.Columns["coveringfrom"];
                this.columnpermission = base.Columns["permission"];
                this.columnisgrant = base.Columns["isgrant"];
                this.columnisgrantwith = base.Columns["isgrantwith"];
                this.columnisrevoke = base.Columns["isrevoke"];
                this.columnisdeny = base.Columns["isdeny"];
                this.columnparentobjectid = base.Columns["parentobjectid"];
                this.columnobjectid = base.Columns["objectid"];
                this.columnobjectname = base.Columns["objectname"];
                this.columnqualifiedname = base.Columns["qualifiedname"];
                this.columnobjecttype = base.Columns["objecttype"];
                this.columnschemaid = base.Columns["schemaid"];
                this.columnschemaname = base.Columns["schemaname"];
                this.columnowner = base.Columns["owner"];
                this.columnownername = base.Columns["ownername"];
                this.columnisaliased = base.Columns["isaliased"];
                this.columninherited = base.Columns["inherited"];
                this.columnsourcename = base.Columns["sourcename"];
                this.columnsourcetype = base.Columns["sourcetype"];
                this.columnsourcepermission = base.Columns["sourcepermission"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsnapshotid = new global::System.Data.DataColumn("snapshotid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotid);
                this.columnpermissionlevel = new global::System.Data.DataColumn("permissionlevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpermissionlevel);
                this.columnlogintype = new global::System.Data.DataColumn("logintype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogintype);
                this.columnloginname = new global::System.Data.DataColumn("loginname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnloginname);
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columndatabasename = new global::System.Data.DataColumn("databasename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabasename);
                this.columnprincipalid = new global::System.Data.DataColumn("principalid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprincipalid);
                this.columnprincipalname = new global::System.Data.DataColumn("principalname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprincipalname);
                this.columnprincipaltype = new global::System.Data.DataColumn("principaltype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprincipaltype);
                this.columndatabaseprincipal = new global::System.Data.DataColumn("databaseprincipal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabaseprincipal);
                this.columndatabaseprincipaltype = new global::System.Data.DataColumn("databaseprincipaltype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabaseprincipaltype);
                this.columngrantor = new global::System.Data.DataColumn("grantor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrantor);
                this.columngrantorname = new global::System.Data.DataColumn("grantorname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrantorname);
                this.columngrantee = new global::System.Data.DataColumn("grantee", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrantee);
                this.columngranteename = new global::System.Data.DataColumn("granteename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngranteename);
                this.columnclassid = new global::System.Data.DataColumn("classid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclassid);
                this.columnpermissiontype = new global::System.Data.DataColumn("permissiontype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpermissiontype);
                this.columncoveringfrom = new global::System.Data.DataColumn("coveringfrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncoveringfrom);
                this.columnpermission = new global::System.Data.DataColumn("permission", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpermission);
                this.columnisgrant = new global::System.Data.DataColumn("isgrant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisgrant);
                this.columnisgrantwith = new global::System.Data.DataColumn("isgrantwith", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisgrantwith);
                this.columnisrevoke = new global::System.Data.DataColumn("isrevoke", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisrevoke);
                this.columnisdeny = new global::System.Data.DataColumn("isdeny", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisdeny);
                this.columnparentobjectid = new global::System.Data.DataColumn("parentobjectid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparentobjectid);
                this.columnobjectid = new global::System.Data.DataColumn("objectid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobjectid);
                this.columnobjectname = new global::System.Data.DataColumn("objectname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobjectname);
                this.columnqualifiedname = new global::System.Data.DataColumn("qualifiedname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqualifiedname);
                this.columnobjecttype = new global::System.Data.DataColumn("objecttype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobjecttype);
                this.columnschemaid = new global::System.Data.DataColumn("schemaid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnschemaid);
                this.columnschemaname = new global::System.Data.DataColumn("schemaname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnschemaname);
                this.columnowner = new global::System.Data.DataColumn("owner", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnowner);
                this.columnownername = new global::System.Data.DataColumn("ownername", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnownername);
                this.columnisaliased = new global::System.Data.DataColumn("isaliased", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisaliased);
                this.columninherited = new global::System.Data.DataColumn("inherited", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninherited);
                this.columnsourcename = new global::System.Data.DataColumn("sourcename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsourcename);
                this.columnsourcetype = new global::System.Data.DataColumn("sourcetype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsourcetype);
                this.columnsourcepermission = new global::System.Data.DataColumn("sourcepermission", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsourcepermission);
                this.columnsnapshotid.ReadOnly = true;
                this.columnpermissionlevel.ReadOnly = true;
                this.columnlogintype.ReadOnly = true;
                this.columnloginname.ReadOnly = true;
                this.columnconnectionname.ReadOnly = true;
                this.columndatabasename.ReadOnly = true;
                this.columnprincipalid.ReadOnly = true;
                this.columnprincipalname.ReadOnly = true;
                this.columnprincipaltype.ReadOnly = true;
                this.columndatabaseprincipal.ReadOnly = true;
                this.columndatabaseprincipaltype.ReadOnly = true;
                this.columngrantor.ReadOnly = true;
                this.columngrantorname.ReadOnly = true;
                this.columngrantee.ReadOnly = true;
                this.columngranteename.ReadOnly = true;
                this.columnclassid.ReadOnly = true;
                this.columnpermissiontype.ReadOnly = true;
                this.columncoveringfrom.ReadOnly = true;
                this.columnpermission.ReadOnly = true;
                this.columnisgrant.ReadOnly = true;
                this.columnisgrantwith.ReadOnly = true;
                this.columnisrevoke.ReadOnly = true;
                this.columnisdeny.ReadOnly = true;
                this.columnparentobjectid.ReadOnly = true;
                this.columnobjectid.ReadOnly = true;
                this.columnobjectname.ReadOnly = true;
                this.columnqualifiedname.ReadOnly = true;
                this.columnobjecttype.ReadOnly = true;
                this.columnschemaid.ReadOnly = true;
                this.columnschemaname.ReadOnly = true;
                this.columnowner.ReadOnly = true;
                this.columnownername.ReadOnly = true;
                this.columnisaliased.ReadOnly = true;
                this.columninherited.ReadOnly = true;
                this.columnsourcename.ReadOnly = true;
                this.columnsourcetype.ReadOnly = true;
                this.columnsourcepermission.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserdatabasepermissionsRow Newisp_sqlsecure_report_getuserdatabasepermissionsRow() {
                return ((isp_sqlsecure_report_getuserdatabasepermissionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getuserdatabasepermissionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getuserdatabasepermissionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getuserdatabasepermissionsRowChanged != null)) {
                    this.isp_sqlsecure_report_getuserdatabasepermissionsRowChanged(this, new isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEvent(((isp_sqlsecure_report_getuserdatabasepermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getuserdatabasepermissionsRowChanging != null)) {
                    this.isp_sqlsecure_report_getuserdatabasepermissionsRowChanging(this, new isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEvent(((isp_sqlsecure_report_getuserdatabasepermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getuserdatabasepermissionsRowDeleted != null)) {
                    this.isp_sqlsecure_report_getuserdatabasepermissionsRowDeleted(this, new isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEvent(((isp_sqlsecure_report_getuserdatabasepermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getuserdatabasepermissionsRowDeleting != null)) {
                    this.isp_sqlsecure_report_getuserdatabasepermissionsRowDeleting(this, new isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEvent(((isp_sqlsecure_report_getuserdatabasepermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getuserdatabasepermissionsRow(isp_sqlsecure_report_getuserdatabasepermissionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getuserdatabasepermissionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getauditedinstancesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnservername;
            
            private global::System.Data.DataColumn columninstancename;
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnedition;
            
            private global::System.Data.DataColumn columnauthenticationmode;
            
            private global::System.Data.DataColumn columnos;
            
            private global::System.Data.DataColumn columnloginauditmode;
            
            private global::System.Data.DataColumn columnenableproxyaccount;
            
            private global::System.Data.DataColumn columnenablec2audittrace;
            
            private global::System.Data.DataColumn columncrossdbownershipchaining;
            
            private global::System.Data.DataColumn columncasesensitivemode;
            
            private global::System.Data.DataColumn columnnumwindowsuser;
            
            private global::System.Data.DataColumn columnnumwindowsgroup;
            
            private global::System.Data.DataColumn columnnumsqllogin;
            
            private global::System.Data.DataColumn columnsnapshottime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditedinstancesDataTable() {
                this.TableName = "isp_sqlsecure_report_getauditedinstances";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getauditedinstancesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getauditedinstancesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn servernameColumn {
                get {
                    return this.columnservername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instancenameColumn {
                get {
                    return this.columninstancename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editionColumn {
                get {
                    return this.columnedition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn authenticationmodeColumn {
                get {
                    return this.columnauthenticationmode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osColumn {
                get {
                    return this.columnos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loginauditmodeColumn {
                get {
                    return this.columnloginauditmode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn enableproxyaccountColumn {
                get {
                    return this.columnenableproxyaccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn enablec2audittraceColumn {
                get {
                    return this.columnenablec2audittrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn crossdbownershipchainingColumn {
                get {
                    return this.columncrossdbownershipchaining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn casesensitivemodeColumn {
                get {
                    return this.columncasesensitivemode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numwindowsuserColumn {
                get {
                    return this.columnnumwindowsuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numwindowsgroupColumn {
                get {
                    return this.columnnumwindowsgroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numsqlloginColumn {
                get {
                    return this.columnnumsqllogin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshottimeColumn {
                get {
                    return this.columnsnapshottime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditedinstancesRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getauditedinstancesRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getauditedinstancesRowChangeEventHandler isp_sqlsecure_report_getauditedinstancesRowChanging;
            
            public event isp_sqlsecure_report_getauditedinstancesRowChangeEventHandler isp_sqlsecure_report_getauditedinstancesRowChanged;
            
            public event isp_sqlsecure_report_getauditedinstancesRowChangeEventHandler isp_sqlsecure_report_getauditedinstancesRowDeleting;
            
            public event isp_sqlsecure_report_getauditedinstancesRowChangeEventHandler isp_sqlsecure_report_getauditedinstancesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getauditedinstancesRow(isp_sqlsecure_report_getauditedinstancesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditedinstancesRow Addisp_sqlsecure_report_getauditedinstancesRow(
                        string connectionname, 
                        string servername, 
                        string instancename, 
                        string version, 
                        string edition, 
                        string authenticationmode, 
                        string os, 
                        string loginauditmode, 
                        string enableproxyaccount, 
                        string enablec2audittrace, 
                        string crossdbownershipchaining, 
                        string casesensitivemode, 
                        int numwindowsuser, 
                        int numwindowsgroup, 
                        int numsqllogin, 
                        System.DateTime snapshottime) {
                isp_sqlsecure_report_getauditedinstancesRow rowisp_sqlsecure_report_getauditedinstancesRow = ((isp_sqlsecure_report_getauditedinstancesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        servername,
                        instancename,
                        version,
                        edition,
                        authenticationmode,
                        os,
                        loginauditmode,
                        enableproxyaccount,
                        enablec2audittrace,
                        crossdbownershipchaining,
                        casesensitivemode,
                        numwindowsuser,
                        numwindowsgroup,
                        numsqllogin,
                        snapshottime};
                rowisp_sqlsecure_report_getauditedinstancesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getauditedinstancesRow);
                return rowisp_sqlsecure_report_getauditedinstancesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getauditedinstancesDataTable cln = ((isp_sqlsecure_report_getauditedinstancesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getauditedinstancesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnservername = base.Columns["servername"];
                this.columninstancename = base.Columns["instancename"];
                this.columnversion = base.Columns["version"];
                this.columnedition = base.Columns["edition"];
                this.columnauthenticationmode = base.Columns["authenticationmode"];
                this.columnos = base.Columns["os"];
                this.columnloginauditmode = base.Columns["loginauditmode"];
                this.columnenableproxyaccount = base.Columns["enableproxyaccount"];
                this.columnenablec2audittrace = base.Columns["enablec2audittrace"];
                this.columncrossdbownershipchaining = base.Columns["crossdbownershipchaining"];
                this.columncasesensitivemode = base.Columns["casesensitivemode"];
                this.columnnumwindowsuser = base.Columns["numwindowsuser"];
                this.columnnumwindowsgroup = base.Columns["numwindowsgroup"];
                this.columnnumsqllogin = base.Columns["numsqllogin"];
                this.columnsnapshottime = base.Columns["snapshottime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnservername = new global::System.Data.DataColumn("servername", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservername);
                this.columninstancename = new global::System.Data.DataColumn("instancename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninstancename);
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnversion);
                this.columnedition = new global::System.Data.DataColumn("edition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedition);
                this.columnauthenticationmode = new global::System.Data.DataColumn("authenticationmode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnauthenticationmode);
                this.columnos = new global::System.Data.DataColumn("os", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnos);
                this.columnloginauditmode = new global::System.Data.DataColumn("loginauditmode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnloginauditmode);
                this.columnenableproxyaccount = new global::System.Data.DataColumn("enableproxyaccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenableproxyaccount);
                this.columnenablec2audittrace = new global::System.Data.DataColumn("enablec2audittrace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenablec2audittrace);
                this.columncrossdbownershipchaining = new global::System.Data.DataColumn("crossdbownershipchaining", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncrossdbownershipchaining);
                this.columncasesensitivemode = new global::System.Data.DataColumn("casesensitivemode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncasesensitivemode);
                this.columnnumwindowsuser = new global::System.Data.DataColumn("numwindowsuser", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumwindowsuser);
                this.columnnumwindowsgroup = new global::System.Data.DataColumn("numwindowsgroup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumwindowsgroup);
                this.columnnumsqllogin = new global::System.Data.DataColumn("numsqllogin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumsqllogin);
                this.columnsnapshottime = new global::System.Data.DataColumn("snapshottime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshottime);
                this.columnconnectionname.AllowDBNull = false;
                this.columnconnectionname.MaxLength = 400;
                this.columnservername.MaxLength = 128;
                this.columninstancename.MaxLength = 128;
                this.columnversion.ReadOnly = true;
                this.columnversion.MaxLength = 273;
                this.columnedition.MaxLength = 256;
                this.columnauthenticationmode.AllowDBNull = false;
                this.columnauthenticationmode.MaxLength = 1;
                this.columnos.MaxLength = 512;
                this.columnloginauditmode.MaxLength = 20;
                this.columnenableproxyaccount.MaxLength = 1;
                this.columnenablec2audittrace.MaxLength = 1;
                this.columncrossdbownershipchaining.MaxLength = 1;
                this.columncasesensitivemode.MaxLength = 1;
                this.columnnumwindowsuser.ReadOnly = true;
                this.columnnumwindowsgroup.ReadOnly = true;
                this.columnnumsqllogin.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditedinstancesRow Newisp_sqlsecure_report_getauditedinstancesRow() {
                return ((isp_sqlsecure_report_getauditedinstancesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getauditedinstancesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getauditedinstancesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getauditedinstancesRowChanged != null)) {
                    this.isp_sqlsecure_report_getauditedinstancesRowChanged(this, new isp_sqlsecure_report_getauditedinstancesRowChangeEvent(((isp_sqlsecure_report_getauditedinstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getauditedinstancesRowChanging != null)) {
                    this.isp_sqlsecure_report_getauditedinstancesRowChanging(this, new isp_sqlsecure_report_getauditedinstancesRowChangeEvent(((isp_sqlsecure_report_getauditedinstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getauditedinstancesRowDeleted != null)) {
                    this.isp_sqlsecure_report_getauditedinstancesRowDeleted(this, new isp_sqlsecure_report_getauditedinstancesRowChangeEvent(((isp_sqlsecure_report_getauditedinstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getauditedinstancesRowDeleting != null)) {
                    this.isp_sqlsecure_report_getauditedinstancesRowDeleting(this, new isp_sqlsecure_report_getauditedinstancesRowChangeEvent(((isp_sqlsecure_report_getauditedinstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getauditedinstancesRow(isp_sqlsecure_report_getauditedinstancesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getauditedinstancesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getassessmentcomparisonDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpolicyid;
            
            private global::System.Data.DataColumn columnassessmentid1;
            
            private global::System.Data.DataColumn columnassessmentid2;
            
            private global::System.Data.DataColumn columnregisteredserverid;
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnmetricid;
            
            private global::System.Data.DataColumn columnmetricname;
            
            private global::System.Data.DataColumn columnmetrictype;
            
            private global::System.Data.DataColumn columndifferencesfound;
            
            private global::System.Data.DataColumn columndiffreportsettings;
            
            private global::System.Data.DataColumn columndiffreportsettingstext;
            
            private global::System.Data.DataColumn columndiffmetricsettings;
            
            private global::System.Data.DataColumn columndiffmetricsettingstext;
            
            private global::System.Data.DataColumn columndifffindings;
            
            private global::System.Data.DataColumn columndifffindingstext;
            
            private global::System.Data.DataColumn columndiffnotes;
            
            private global::System.Data.DataColumn columndiffnotestext;
            
            private global::System.Data.DataColumn columnsnapshotid1;
            
            private global::System.Data.DataColumn columncollectiontime1;
            
            private global::System.Data.DataColumn columnmetricseveritycode1;
            
            private global::System.Data.DataColumn columnmetricseverity1;
            
            private global::System.Data.DataColumn columnmetricseverityvalues1;
            
            private global::System.Data.DataColumn columnmetricdescription1;
            
            private global::System.Data.DataColumn columnmetricreportkey1;
            
            private global::System.Data.DataColumn columnmetricreporttext1;
            
            private global::System.Data.DataColumn columnseveritycode1;
            
            private global::System.Data.DataColumn columnseverity1;
            
            private global::System.Data.DataColumn columncurrentvalue1;
            
            private global::System.Data.DataColumn columnthresholdvalue1;
            
            private global::System.Data.DataColumn columnisexplained1;
            
            private global::System.Data.DataColumn columnseveritycodeexplained1;
            
            private global::System.Data.DataColumn columnnotes1;
            
            private global::System.Data.DataColumn columnsnapshotid2;
            
            private global::System.Data.DataColumn columncollectiontime2;
            
            private global::System.Data.DataColumn columnmetricseveritycode2;
            
            private global::System.Data.DataColumn columnmetricseverity2;
            
            private global::System.Data.DataColumn columnmetricseverityvalues2;
            
            private global::System.Data.DataColumn columnmetricdescription2;
            
            private global::System.Data.DataColumn columnmetricreportkey2;
            
            private global::System.Data.DataColumn columnmetricreporttext2;
            
            private global::System.Data.DataColumn columnseveritycode2;
            
            private global::System.Data.DataColumn columnseverity2;
            
            private global::System.Data.DataColumn columncurrentvalue2;
            
            private global::System.Data.DataColumn columnthresholdvalue2;
            
            private global::System.Data.DataColumn columnisexplained2;
            
            private global::System.Data.DataColumn columnseveritycodeexplained2;
            
            private global::System.Data.DataColumn columnnotes2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getassessmentcomparisonDataTable() {
                this.TableName = "isp_sqlsecure_report_getassessmentcomparison";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getassessmentcomparisonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getassessmentcomparisonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn policyidColumn {
                get {
                    return this.columnpolicyid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assessmentid1Column {
                get {
                    return this.columnassessmentid1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assessmentid2Column {
                get {
                    return this.columnassessmentid2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn registeredserveridColumn {
                get {
                    return this.columnregisteredserverid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricidColumn {
                get {
                    return this.columnmetricid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricnameColumn {
                get {
                    return this.columnmetricname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metrictypeColumn {
                get {
                    return this.columnmetrictype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn differencesfoundColumn {
                get {
                    return this.columndifferencesfound;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffreportsettingsColumn {
                get {
                    return this.columndiffreportsettings;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffreportsettingstextColumn {
                get {
                    return this.columndiffreportsettingstext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffmetricsettingsColumn {
                get {
                    return this.columndiffmetricsettings;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffmetricsettingstextColumn {
                get {
                    return this.columndiffmetricsettingstext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difffindingsColumn {
                get {
                    return this.columndifffindings;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difffindingstextColumn {
                get {
                    return this.columndifffindingstext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffnotesColumn {
                get {
                    return this.columndiffnotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffnotestextColumn {
                get {
                    return this.columndiffnotestext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotid1Column {
                get {
                    return this.columnsnapshotid1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn collectiontime1Column {
                get {
                    return this.columncollectiontime1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricseveritycode1Column {
                get {
                    return this.columnmetricseveritycode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricseverity1Column {
                get {
                    return this.columnmetricseverity1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricseverityvalues1Column {
                get {
                    return this.columnmetricseverityvalues1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricdescription1Column {
                get {
                    return this.columnmetricdescription1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricreportkey1Column {
                get {
                    return this.columnmetricreportkey1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricreporttext1Column {
                get {
                    return this.columnmetricreporttext1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn severitycode1Column {
                get {
                    return this.columnseveritycode1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn severity1Column {
                get {
                    return this.columnseverity1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currentvalue1Column {
                get {
                    return this.columncurrentvalue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn thresholdvalue1Column {
                get {
                    return this.columnthresholdvalue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isexplained1Column {
                get {
                    return this.columnisexplained1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn severitycodeexplained1Column {
                get {
                    return this.columnseveritycodeexplained1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notes1Column {
                get {
                    return this.columnnotes1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotid2Column {
                get {
                    return this.columnsnapshotid2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn collectiontime2Column {
                get {
                    return this.columncollectiontime2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricseveritycode2Column {
                get {
                    return this.columnmetricseveritycode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricseverity2Column {
                get {
                    return this.columnmetricseverity2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricseverityvalues2Column {
                get {
                    return this.columnmetricseverityvalues2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricdescription2Column {
                get {
                    return this.columnmetricdescription2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricreportkey2Column {
                get {
                    return this.columnmetricreportkey2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metricreporttext2Column {
                get {
                    return this.columnmetricreporttext2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn severitycode2Column {
                get {
                    return this.columnseveritycode2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn severity2Column {
                get {
                    return this.columnseverity2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currentvalue2Column {
                get {
                    return this.columncurrentvalue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn thresholdvalue2Column {
                get {
                    return this.columnthresholdvalue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isexplained2Column {
                get {
                    return this.columnisexplained2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn severitycodeexplained2Column {
                get {
                    return this.columnseveritycodeexplained2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notes2Column {
                get {
                    return this.columnnotes2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getassessmentcomparisonRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getassessmentcomparisonRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getassessmentcomparisonRowChangeEventHandler isp_sqlsecure_report_getassessmentcomparisonRowChanging;
            
            public event isp_sqlsecure_report_getassessmentcomparisonRowChangeEventHandler isp_sqlsecure_report_getassessmentcomparisonRowChanged;
            
            public event isp_sqlsecure_report_getassessmentcomparisonRowChangeEventHandler isp_sqlsecure_report_getassessmentcomparisonRowDeleting;
            
            public event isp_sqlsecure_report_getassessmentcomparisonRowChangeEventHandler isp_sqlsecure_report_getassessmentcomparisonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getassessmentcomparisonRow(isp_sqlsecure_report_getassessmentcomparisonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getassessmentcomparisonRow Addisp_sqlsecure_report_getassessmentcomparisonRow(
                        int policyid, 
                        int assessmentid1, 
                        int assessmentid2, 
                        int registeredserverid, 
                        string connectionname, 
                        int metricid, 
                        string metricname, 
                        string metrictype, 
                        bool differencesfound, 
                        bool diffreportsettings, 
                        string diffreportsettingstext, 
                        bool diffmetricsettings, 
                        string diffmetricsettingstext, 
                        bool difffindings, 
                        string difffindingstext, 
                        bool diffnotes, 
                        string diffnotestext, 
                        int snapshotid1, 
                        System.DateTime collectiontime1, 
                        int metricseveritycode1, 
                        string metricseverity1, 
                        string metricseverityvalues1, 
                        string metricdescription1, 
                        string metricreportkey1, 
                        string metricreporttext1, 
                        int severitycode1, 
                        string severity1, 
                        string currentvalue1, 
                        string thresholdvalue1, 
                        bool isexplained1, 
                        int severitycodeexplained1, 
                        string notes1, 
                        int snapshotid2, 
                        System.DateTime collectiontime2, 
                        int metricseveritycode2, 
                        string metricseverity2, 
                        string metricseverityvalues2, 
                        string metricdescription2, 
                        string metricreportkey2, 
                        string metricreporttext2, 
                        int severitycode2, 
                        string severity2, 
                        string currentvalue2, 
                        string thresholdvalue2, 
                        bool isexplained2, 
                        int severitycodeexplained2, 
                        string notes2) {
                isp_sqlsecure_report_getassessmentcomparisonRow rowisp_sqlsecure_report_getassessmentcomparisonRow = ((isp_sqlsecure_report_getassessmentcomparisonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        policyid,
                        assessmentid1,
                        assessmentid2,
                        registeredserverid,
                        connectionname,
                        metricid,
                        metricname,
                        metrictype,
                        differencesfound,
                        diffreportsettings,
                        diffreportsettingstext,
                        diffmetricsettings,
                        diffmetricsettingstext,
                        difffindings,
                        difffindingstext,
                        diffnotes,
                        diffnotestext,
                        snapshotid1,
                        collectiontime1,
                        metricseveritycode1,
                        metricseverity1,
                        metricseverityvalues1,
                        metricdescription1,
                        metricreportkey1,
                        metricreporttext1,
                        severitycode1,
                        severity1,
                        currentvalue1,
                        thresholdvalue1,
                        isexplained1,
                        severitycodeexplained1,
                        notes1,
                        snapshotid2,
                        collectiontime2,
                        metricseveritycode2,
                        metricseverity2,
                        metricseverityvalues2,
                        metricdescription2,
                        metricreportkey2,
                        metricreporttext2,
                        severitycode2,
                        severity2,
                        currentvalue2,
                        thresholdvalue2,
                        isexplained2,
                        severitycodeexplained2,
                        notes2};
                rowisp_sqlsecure_report_getassessmentcomparisonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getassessmentcomparisonRow);
                return rowisp_sqlsecure_report_getassessmentcomparisonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getassessmentcomparisonDataTable cln = ((isp_sqlsecure_report_getassessmentcomparisonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getassessmentcomparisonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpolicyid = base.Columns["policyid"];
                this.columnassessmentid1 = base.Columns["assessmentid1"];
                this.columnassessmentid2 = base.Columns["assessmentid2"];
                this.columnregisteredserverid = base.Columns["registeredserverid"];
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnmetricid = base.Columns["metricid"];
                this.columnmetricname = base.Columns["metricname"];
                this.columnmetrictype = base.Columns["metrictype"];
                this.columndifferencesfound = base.Columns["differencesfound"];
                this.columndiffreportsettings = base.Columns["diffreportsettings"];
                this.columndiffreportsettingstext = base.Columns["diffreportsettingstext"];
                this.columndiffmetricsettings = base.Columns["diffmetricsettings"];
                this.columndiffmetricsettingstext = base.Columns["diffmetricsettingstext"];
                this.columndifffindings = base.Columns["difffindings"];
                this.columndifffindingstext = base.Columns["difffindingstext"];
                this.columndiffnotes = base.Columns["diffnotes"];
                this.columndiffnotestext = base.Columns["diffnotestext"];
                this.columnsnapshotid1 = base.Columns["snapshotid1"];
                this.columncollectiontime1 = base.Columns["collectiontime1"];
                this.columnmetricseveritycode1 = base.Columns["metricseveritycode1"];
                this.columnmetricseverity1 = base.Columns["metricseverity1"];
                this.columnmetricseverityvalues1 = base.Columns["metricseverityvalues1"];
                this.columnmetricdescription1 = base.Columns["metricdescription1"];
                this.columnmetricreportkey1 = base.Columns["metricreportkey1"];
                this.columnmetricreporttext1 = base.Columns["metricreporttext1"];
                this.columnseveritycode1 = base.Columns["severitycode1"];
                this.columnseverity1 = base.Columns["severity1"];
                this.columncurrentvalue1 = base.Columns["currentvalue1"];
                this.columnthresholdvalue1 = base.Columns["thresholdvalue1"];
                this.columnisexplained1 = base.Columns["isexplained1"];
                this.columnseveritycodeexplained1 = base.Columns["severitycodeexplained1"];
                this.columnnotes1 = base.Columns["notes1"];
                this.columnsnapshotid2 = base.Columns["snapshotid2"];
                this.columncollectiontime2 = base.Columns["collectiontime2"];
                this.columnmetricseveritycode2 = base.Columns["metricseveritycode2"];
                this.columnmetricseverity2 = base.Columns["metricseverity2"];
                this.columnmetricseverityvalues2 = base.Columns["metricseverityvalues2"];
                this.columnmetricdescription2 = base.Columns["metricdescription2"];
                this.columnmetricreportkey2 = base.Columns["metricreportkey2"];
                this.columnmetricreporttext2 = base.Columns["metricreporttext2"];
                this.columnseveritycode2 = base.Columns["severitycode2"];
                this.columnseverity2 = base.Columns["severity2"];
                this.columncurrentvalue2 = base.Columns["currentvalue2"];
                this.columnthresholdvalue2 = base.Columns["thresholdvalue2"];
                this.columnisexplained2 = base.Columns["isexplained2"];
                this.columnseveritycodeexplained2 = base.Columns["severitycodeexplained2"];
                this.columnnotes2 = base.Columns["notes2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpolicyid = new global::System.Data.DataColumn("policyid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpolicyid);
                this.columnassessmentid1 = new global::System.Data.DataColumn("assessmentid1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassessmentid1);
                this.columnassessmentid2 = new global::System.Data.DataColumn("assessmentid2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassessmentid2);
                this.columnregisteredserverid = new global::System.Data.DataColumn("registeredserverid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnregisteredserverid);
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnmetricid = new global::System.Data.DataColumn("metricid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricid);
                this.columnmetricname = new global::System.Data.DataColumn("metricname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricname);
                this.columnmetrictype = new global::System.Data.DataColumn("metrictype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetrictype);
                this.columndifferencesfound = new global::System.Data.DataColumn("differencesfound", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifferencesfound);
                this.columndiffreportsettings = new global::System.Data.DataColumn("diffreportsettings", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffreportsettings);
                this.columndiffreportsettingstext = new global::System.Data.DataColumn("diffreportsettingstext", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffreportsettingstext);
                this.columndiffmetricsettings = new global::System.Data.DataColumn("diffmetricsettings", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffmetricsettings);
                this.columndiffmetricsettingstext = new global::System.Data.DataColumn("diffmetricsettingstext", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffmetricsettingstext);
                this.columndifffindings = new global::System.Data.DataColumn("difffindings", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifffindings);
                this.columndifffindingstext = new global::System.Data.DataColumn("difffindingstext", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifffindingstext);
                this.columndiffnotes = new global::System.Data.DataColumn("diffnotes", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffnotes);
                this.columndiffnotestext = new global::System.Data.DataColumn("diffnotestext", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffnotestext);
                this.columnsnapshotid1 = new global::System.Data.DataColumn("snapshotid1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotid1);
                this.columncollectiontime1 = new global::System.Data.DataColumn("collectiontime1", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollectiontime1);
                this.columnmetricseveritycode1 = new global::System.Data.DataColumn("metricseveritycode1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricseveritycode1);
                this.columnmetricseverity1 = new global::System.Data.DataColumn("metricseverity1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricseverity1);
                this.columnmetricseverityvalues1 = new global::System.Data.DataColumn("metricseverityvalues1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricseverityvalues1);
                this.columnmetricdescription1 = new global::System.Data.DataColumn("metricdescription1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricdescription1);
                this.columnmetricreportkey1 = new global::System.Data.DataColumn("metricreportkey1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricreportkey1);
                this.columnmetricreporttext1 = new global::System.Data.DataColumn("metricreporttext1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricreporttext1);
                this.columnseveritycode1 = new global::System.Data.DataColumn("severitycode1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseveritycode1);
                this.columnseverity1 = new global::System.Data.DataColumn("severity1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseverity1);
                this.columncurrentvalue1 = new global::System.Data.DataColumn("currentvalue1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrentvalue1);
                this.columnthresholdvalue1 = new global::System.Data.DataColumn("thresholdvalue1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnthresholdvalue1);
                this.columnisexplained1 = new global::System.Data.DataColumn("isexplained1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisexplained1);
                this.columnseveritycodeexplained1 = new global::System.Data.DataColumn("severitycodeexplained1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseveritycodeexplained1);
                this.columnnotes1 = new global::System.Data.DataColumn("notes1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotes1);
                this.columnsnapshotid2 = new global::System.Data.DataColumn("snapshotid2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotid2);
                this.columncollectiontime2 = new global::System.Data.DataColumn("collectiontime2", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollectiontime2);
                this.columnmetricseveritycode2 = new global::System.Data.DataColumn("metricseveritycode2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricseveritycode2);
                this.columnmetricseverity2 = new global::System.Data.DataColumn("metricseverity2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricseverity2);
                this.columnmetricseverityvalues2 = new global::System.Data.DataColumn("metricseverityvalues2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricseverityvalues2);
                this.columnmetricdescription2 = new global::System.Data.DataColumn("metricdescription2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricdescription2);
                this.columnmetricreportkey2 = new global::System.Data.DataColumn("metricreportkey2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricreportkey2);
                this.columnmetricreporttext2 = new global::System.Data.DataColumn("metricreporttext2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetricreporttext2);
                this.columnseveritycode2 = new global::System.Data.DataColumn("severitycode2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseveritycode2);
                this.columnseverity2 = new global::System.Data.DataColumn("severity2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseverity2);
                this.columncurrentvalue2 = new global::System.Data.DataColumn("currentvalue2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrentvalue2);
                this.columnthresholdvalue2 = new global::System.Data.DataColumn("thresholdvalue2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnthresholdvalue2);
                this.columnisexplained2 = new global::System.Data.DataColumn("isexplained2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisexplained2);
                this.columnseveritycodeexplained2 = new global::System.Data.DataColumn("severitycodeexplained2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseveritycodeexplained2);
                this.columnnotes2 = new global::System.Data.DataColumn("notes2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotes2);
                this.columnconnectionname.MaxLength = 400;
                this.columnmetricname.MaxLength = 256;
                this.columnmetrictype.MaxLength = 32;
                this.columndiffreportsettingstext.MaxLength = 1024;
                this.columndiffmetricsettingstext.MaxLength = 1024;
                this.columndifffindingstext.MaxLength = 1024;
                this.columndiffnotestext.MaxLength = 1024;
                this.columnmetricseverity1.MaxLength = 16;
                this.columnmetricseverityvalues1.MaxLength = 4000;
                this.columnmetricdescription1.MaxLength = 4000;
                this.columnmetricreportkey1.MaxLength = 32;
                this.columnmetricreporttext1.MaxLength = 4000;
                this.columnseverity1.MaxLength = 16;
                this.columncurrentvalue1.MaxLength = 1500;
                this.columnthresholdvalue1.MaxLength = 1500;
                this.columnnotes1.MaxLength = 4000;
                this.columnmetricseverity2.MaxLength = 16;
                this.columnmetricseverityvalues2.MaxLength = 4000;
                this.columnmetricdescription2.MaxLength = 4000;
                this.columnmetricreportkey2.MaxLength = 32;
                this.columnmetricreporttext2.MaxLength = 4000;
                this.columnseverity2.MaxLength = 16;
                this.columncurrentvalue2.MaxLength = 1500;
                this.columnthresholdvalue2.MaxLength = 1500;
                this.columnnotes2.MaxLength = 4000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getassessmentcomparisonRow Newisp_sqlsecure_report_getassessmentcomparisonRow() {
                return ((isp_sqlsecure_report_getassessmentcomparisonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getassessmentcomparisonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getassessmentcomparisonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getassessmentcomparisonRowChanged != null)) {
                    this.isp_sqlsecure_report_getassessmentcomparisonRowChanged(this, new isp_sqlsecure_report_getassessmentcomparisonRowChangeEvent(((isp_sqlsecure_report_getassessmentcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getassessmentcomparisonRowChanging != null)) {
                    this.isp_sqlsecure_report_getassessmentcomparisonRowChanging(this, new isp_sqlsecure_report_getassessmentcomparisonRowChangeEvent(((isp_sqlsecure_report_getassessmentcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getassessmentcomparisonRowDeleted != null)) {
                    this.isp_sqlsecure_report_getassessmentcomparisonRowDeleted(this, new isp_sqlsecure_report_getassessmentcomparisonRowChangeEvent(((isp_sqlsecure_report_getassessmentcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getassessmentcomparisonRowDeleting != null)) {
                    this.isp_sqlsecure_report_getassessmentcomparisonRowDeleting(this, new isp_sqlsecure_report_getassessmentcomparisonRowChangeEvent(((isp_sqlsecure_report_getassessmentcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getassessmentcomparisonRow(isp_sqlsecure_report_getassessmentcomparisonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getassessmentcomparisonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_getsnapshotcomparisonDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnsnapshotid;
            
            private global::System.Data.DataColumn columnsnapshotidold;
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columndifftype;
            
            private global::System.Data.DataColumn columndifflevel;
            
            private global::System.Data.DataColumn columndiffobjecttable;
            
            private global::System.Data.DataColumn columndiffobjecttype;
            
            private global::System.Data.DataColumn columndiffobjectname;
            
            private global::System.Data.DataColumn columndiffusername;
            
            private global::System.Data.DataColumn columndiffvaluename;
            
            private global::System.Data.DataColumn columndiffdbname;
            
            private global::System.Data.DataColumn columnoldid;
            
            private global::System.Data.DataColumn columnnewid;
            
            private global::System.Data.DataColumn columnoldvalue;
            
            private global::System.Data.DataColumn columnnewvalue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_getsnapshotcomparisonDataTable() {
                this.TableName = "isp_sqlsecure_getsnapshotcomparison";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_getsnapshotcomparisonDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_getsnapshotcomparisonDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotidColumn {
                get {
                    return this.columnsnapshotid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotidoldColumn {
                get {
                    return this.columnsnapshotidold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difftypeColumn {
                get {
                    return this.columndifftype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn difflevelColumn {
                get {
                    return this.columndifflevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffobjecttableColumn {
                get {
                    return this.columndiffobjecttable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffobjecttypeColumn {
                get {
                    return this.columndiffobjecttype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffobjectnameColumn {
                get {
                    return this.columndiffobjectname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffusernameColumn {
                get {
                    return this.columndiffusername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffvaluenameColumn {
                get {
                    return this.columndiffvaluename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diffdbnameColumn {
                get {
                    return this.columndiffdbname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn oldidColumn {
                get {
                    return this.columnoldid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newidColumn {
                get {
                    return this.columnnewid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn oldvalueColumn {
                get {
                    return this.columnoldvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn newvalueColumn {
                get {
                    return this.columnnewvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_getsnapshotcomparisonRow this[int index] {
                get {
                    return ((isp_sqlsecure_getsnapshotcomparisonRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_getsnapshotcomparisonRowChangeEventHandler isp_sqlsecure_getsnapshotcomparisonRowChanging;
            
            public event isp_sqlsecure_getsnapshotcomparisonRowChangeEventHandler isp_sqlsecure_getsnapshotcomparisonRowChanged;
            
            public event isp_sqlsecure_getsnapshotcomparisonRowChangeEventHandler isp_sqlsecure_getsnapshotcomparisonRowDeleting;
            
            public event isp_sqlsecure_getsnapshotcomparisonRowChangeEventHandler isp_sqlsecure_getsnapshotcomparisonRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_getsnapshotcomparisonRow(isp_sqlsecure_getsnapshotcomparisonRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_getsnapshotcomparisonRow Addisp_sqlsecure_getsnapshotcomparisonRow(int snapshotid, int snapshotidold, string connectionname, string difftype, string difflevel, string diffobjecttable, string diffobjecttype, string diffobjectname, string diffusername, string diffvaluename, string diffdbname, string oldid, string newid, string oldvalue, string newvalue) {
                isp_sqlsecure_getsnapshotcomparisonRow rowisp_sqlsecure_getsnapshotcomparisonRow = ((isp_sqlsecure_getsnapshotcomparisonRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        snapshotid,
                        snapshotidold,
                        connectionname,
                        difftype,
                        difflevel,
                        diffobjecttable,
                        diffobjecttype,
                        diffobjectname,
                        diffusername,
                        diffvaluename,
                        diffdbname,
                        oldid,
                        newid,
                        oldvalue,
                        newvalue};
                rowisp_sqlsecure_getsnapshotcomparisonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_getsnapshotcomparisonRow);
                return rowisp_sqlsecure_getsnapshotcomparisonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_getsnapshotcomparisonDataTable cln = ((isp_sqlsecure_getsnapshotcomparisonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_getsnapshotcomparisonDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsnapshotid = base.Columns["snapshotid"];
                this.columnsnapshotidold = base.Columns["snapshotidold"];
                this.columnconnectionname = base.Columns["connectionname"];
                this.columndifftype = base.Columns["difftype"];
                this.columndifflevel = base.Columns["difflevel"];
                this.columndiffobjecttable = base.Columns["diffobjecttable"];
                this.columndiffobjecttype = base.Columns["diffobjecttype"];
                this.columndiffobjectname = base.Columns["diffobjectname"];
                this.columndiffusername = base.Columns["diffusername"];
                this.columndiffvaluename = base.Columns["diffvaluename"];
                this.columndiffdbname = base.Columns["diffdbname"];
                this.columnoldid = base.Columns["oldid"];
                this.columnnewid = base.Columns["newid"];
                this.columnoldvalue = base.Columns["oldvalue"];
                this.columnnewvalue = base.Columns["newvalue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsnapshotid = new global::System.Data.DataColumn("snapshotid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotid);
                this.columnsnapshotidold = new global::System.Data.DataColumn("snapshotidold", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotidold);
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columndifftype = new global::System.Data.DataColumn("difftype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifftype);
                this.columndifflevel = new global::System.Data.DataColumn("difflevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndifflevel);
                this.columndiffobjecttable = new global::System.Data.DataColumn("diffobjecttable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffobjecttable);
                this.columndiffobjecttype = new global::System.Data.DataColumn("diffobjecttype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffobjecttype);
                this.columndiffobjectname = new global::System.Data.DataColumn("diffobjectname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffobjectname);
                this.columndiffusername = new global::System.Data.DataColumn("diffusername", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffusername);
                this.columndiffvaluename = new global::System.Data.DataColumn("diffvaluename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffvaluename);
                this.columndiffdbname = new global::System.Data.DataColumn("diffdbname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiffdbname);
                this.columnoldid = new global::System.Data.DataColumn("oldid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldid);
                this.columnnewid = new global::System.Data.DataColumn("newid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewid);
                this.columnoldvalue = new global::System.Data.DataColumn("oldvalue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoldvalue);
                this.columnnewvalue = new global::System.Data.DataColumn("newvalue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnewvalue);
                this.columnconnectionname.MaxLength = 400;
                this.columndifftype.MaxLength = 400;
                this.columndifflevel.MaxLength = 15;
                this.columndiffobjecttable.MaxLength = 400;
                this.columndiffobjecttype.MaxLength = 256;
                this.columndiffobjectname.MaxLength = 400;
                this.columndiffusername.MaxLength = 400;
                this.columndiffvaluename.MaxLength = 400;
                this.columndiffdbname.MaxLength = 256;
                this.columnoldid.MaxLength = 400;
                this.columnnewid.MaxLength = 400;
                this.columnoldvalue.MaxLength = 4000;
                this.columnnewvalue.MaxLength = 4000;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_getsnapshotcomparisonRow Newisp_sqlsecure_getsnapshotcomparisonRow() {
                return ((isp_sqlsecure_getsnapshotcomparisonRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_getsnapshotcomparisonRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_getsnapshotcomparisonRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_getsnapshotcomparisonRowChanged != null)) {
                    this.isp_sqlsecure_getsnapshotcomparisonRowChanged(this, new isp_sqlsecure_getsnapshotcomparisonRowChangeEvent(((isp_sqlsecure_getsnapshotcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_getsnapshotcomparisonRowChanging != null)) {
                    this.isp_sqlsecure_getsnapshotcomparisonRowChanging(this, new isp_sqlsecure_getsnapshotcomparisonRowChangeEvent(((isp_sqlsecure_getsnapshotcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_getsnapshotcomparisonRowDeleted != null)) {
                    this.isp_sqlsecure_getsnapshotcomparisonRowDeleted(this, new isp_sqlsecure_getsnapshotcomparisonRowChangeEvent(((isp_sqlsecure_getsnapshotcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_getsnapshotcomparisonRowDeleting != null)) {
                    this.isp_sqlsecure_getsnapshotcomparisonRowDeleting(this, new isp_sqlsecure_getsnapshotcomparisonRowChangeEvent(((isp_sqlsecure_getsnapshotcomparisonRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_getsnapshotcomparisonRow(isp_sqlsecure_getsnapshotcomparisonRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_getsnapshotcomparisonDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_getcomparesnapshotinfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnservername;
            
            private global::System.Data.DataColumn columninstancename;
            
            private global::System.Data.DataColumn columnauthenticationmode;
            
            private global::System.Data.DataColumn columnos;
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columnedition;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnstarttime;
            
            private global::System.Data.DataColumn columnendtime;
            
            private global::System.Data.DataColumn columnautomated;
            
            private global::System.Data.DataColumn columnnumobject;
            
            private global::System.Data.DataColumn columnnumpermission;
            
            private global::System.Data.DataColumn columnnumlogin;
            
            private global::System.Data.DataColumn columnnumwindowsgroupmember;
            
            private global::System.Data.DataColumn columnbaseline;
            
            private global::System.Data.DataColumn columnbaselinecomment;
            
            private global::System.Data.DataColumn columnsnapshotcomment;
            
            private global::System.Data.DataColumn columnloginauditmode;
            
            private global::System.Data.DataColumn columnenableproxyaccount;
            
            private global::System.Data.DataColumn columnenablec2audittrace;
            
            private global::System.Data.DataColumn columncrossdbownershipchaining;
            
            private global::System.Data.DataColumn columncasesensitivemode;
            
            private global::System.Data.DataColumn columnhashkey;
            
            private global::System.Data.DataColumn columnsnapshotid;
            
            private global::System.Data.DataColumn columnregisteredserverid;
            
            private global::System.Data.DataColumn columncollectorversion;
            
            private global::System.Data.DataColumn columnallowsystemtableupdates;
            
            private global::System.Data.DataColumn columnremoteadminconnectionsenabled;
            
            private global::System.Data.DataColumn columnremoteaccessenabled;
            
            private global::System.Data.DataColumn columnscanforstartupprocsenabled;
            
            private global::System.Data.DataColumn columnsqlmailxpsenabled;
            
            private global::System.Data.DataColumn columndatabasemailxpsenabled;
            
            private global::System.Data.DataColumn columnoleautomationproceduresenabled;
            
            private global::System.Data.DataColumn columnwebassistantproceduresenabled;
            
            private global::System.Data.DataColumn columnxp_cmdshellenabled;
            
            private global::System.Data.DataColumn columnagentmailprofile;
            
            private global::System.Data.DataColumn columnhideinstance;
            
            private global::System.Data.DataColumn columnagentsysadminonly;
            
            private global::System.Data.DataColumn columnserverisdomaincontroller;
            
            private global::System.Data.DataColumn columnreplicationenabled;
            
            private global::System.Data.DataColumn columnsapasswordempty;
            
            private global::System.Data.DataColumn columnsnapshotname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getcomparesnapshotinfoDataTable() {
                this.TableName = "isp_sqlsecure_report_getcomparesnapshotinfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getcomparesnapshotinfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_getcomparesnapshotinfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn servernameColumn {
                get {
                    return this.columnservername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn instancenameColumn {
                get {
                    return this.columninstancename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn authenticationmodeColumn {
                get {
                    return this.columnauthenticationmode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osColumn {
                get {
                    return this.columnos;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn editionColumn {
                get {
                    return this.columnedition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn starttimeColumn {
                get {
                    return this.columnstarttime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endtimeColumn {
                get {
                    return this.columnendtime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn automatedColumn {
                get {
                    return this.columnautomated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numobjectColumn {
                get {
                    return this.columnnumobject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numpermissionColumn {
                get {
                    return this.columnnumpermission;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numloginColumn {
                get {
                    return this.columnnumlogin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numwindowsgroupmemberColumn {
                get {
                    return this.columnnumwindowsgroupmember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn baselineColumn {
                get {
                    return this.columnbaseline;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn baselinecommentColumn {
                get {
                    return this.columnbaselinecomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotcommentColumn {
                get {
                    return this.columnsnapshotcomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loginauditmodeColumn {
                get {
                    return this.columnloginauditmode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn enableproxyaccountColumn {
                get {
                    return this.columnenableproxyaccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn enablec2audittraceColumn {
                get {
                    return this.columnenablec2audittrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn crossdbownershipchainingColumn {
                get {
                    return this.columncrossdbownershipchaining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn casesensitivemodeColumn {
                get {
                    return this.columncasesensitivemode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hashkeyColumn {
                get {
                    return this.columnhashkey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotidColumn {
                get {
                    return this.columnsnapshotid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn registeredserveridColumn {
                get {
                    return this.columnregisteredserverid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn collectorversionColumn {
                get {
                    return this.columncollectorversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn allowsystemtableupdatesColumn {
                get {
                    return this.columnallowsystemtableupdates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn remoteadminconnectionsenabledColumn {
                get {
                    return this.columnremoteadminconnectionsenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn remoteaccessenabledColumn {
                get {
                    return this.columnremoteaccessenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scanforstartupprocsenabledColumn {
                get {
                    return this.columnscanforstartupprocsenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sqlmailxpsenabledColumn {
                get {
                    return this.columnsqlmailxpsenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn databasemailxpsenabledColumn {
                get {
                    return this.columndatabasemailxpsenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn oleautomationproceduresenabledColumn {
                get {
                    return this.columnoleautomationproceduresenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn webassistantproceduresenabledColumn {
                get {
                    return this.columnwebassistantproceduresenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xp_cmdshellenabledColumn {
                get {
                    return this.columnxp_cmdshellenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn agentmailprofileColumn {
                get {
                    return this.columnagentmailprofile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hideinstanceColumn {
                get {
                    return this.columnhideinstance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn agentsysadminonlyColumn {
                get {
                    return this.columnagentsysadminonly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn serverisdomaincontrollerColumn {
                get {
                    return this.columnserverisdomaincontroller;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn replicationenabledColumn {
                get {
                    return this.columnreplicationenabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sapasswordemptyColumn {
                get {
                    return this.columnsapasswordempty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn snapshotnameColumn {
                get {
                    return this.columnsnapshotname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getcomparesnapshotinfoRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_getcomparesnapshotinfoRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEventHandler isp_sqlsecure_report_getcomparesnapshotinfoRowChanging;
            
            public event isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEventHandler isp_sqlsecure_report_getcomparesnapshotinfoRowChanged;
            
            public event isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEventHandler isp_sqlsecure_report_getcomparesnapshotinfoRowDeleting;
            
            public event isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEventHandler isp_sqlsecure_report_getcomparesnapshotinfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_getcomparesnapshotinfoRow(isp_sqlsecure_report_getcomparesnapshotinfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getcomparesnapshotinfoRow Addisp_sqlsecure_report_getcomparesnapshotinfoRow(
                        string connectionname, 
                        string servername, 
                        string instancename, 
                        string authenticationmode, 
                        string os, 
                        string version, 
                        string edition, 
                        string status, 
                        System.DateTime starttime, 
                        System.DateTime endtime, 
                        string automated, 
                        int numobject, 
                        int numpermission, 
                        int numlogin, 
                        int numwindowsgroupmember, 
                        string baseline, 
                        string baselinecomment, 
                        string snapshotcomment, 
                        string loginauditmode, 
                        string enableproxyaccount, 
                        string enablec2audittrace, 
                        string crossdbownershipchaining, 
                        string casesensitivemode, 
                        string hashkey, 
                        int snapshotid, 
                        int registeredserverid, 
                        string collectorversion, 
                        string allowsystemtableupdates, 
                        string remoteadminconnectionsenabled, 
                        string remoteaccessenabled, 
                        string scanforstartupprocsenabled, 
                        string sqlmailxpsenabled, 
                        string databasemailxpsenabled, 
                        string oleautomationproceduresenabled, 
                        string webassistantproceduresenabled, 
                        string xp_cmdshellenabled, 
                        string agentmailprofile, 
                        string hideinstance, 
                        string agentsysadminonly, 
                        string serverisdomaincontroller, 
                        string replicationenabled, 
                        string sapasswordempty, 
                        string snapshotname) {
                isp_sqlsecure_report_getcomparesnapshotinfoRow rowisp_sqlsecure_report_getcomparesnapshotinfoRow = ((isp_sqlsecure_report_getcomparesnapshotinfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        servername,
                        instancename,
                        authenticationmode,
                        os,
                        version,
                        edition,
                        status,
                        starttime,
                        endtime,
                        automated,
                        numobject,
                        numpermission,
                        numlogin,
                        numwindowsgroupmember,
                        baseline,
                        baselinecomment,
                        snapshotcomment,
                        loginauditmode,
                        enableproxyaccount,
                        enablec2audittrace,
                        crossdbownershipchaining,
                        casesensitivemode,
                        hashkey,
                        snapshotid,
                        registeredserverid,
                        collectorversion,
                        allowsystemtableupdates,
                        remoteadminconnectionsenabled,
                        remoteaccessenabled,
                        scanforstartupprocsenabled,
                        sqlmailxpsenabled,
                        databasemailxpsenabled,
                        oleautomationproceduresenabled,
                        webassistantproceduresenabled,
                        xp_cmdshellenabled,
                        agentmailprofile,
                        hideinstance,
                        agentsysadminonly,
                        serverisdomaincontroller,
                        replicationenabled,
                        sapasswordempty,
                        snapshotname};
                rowisp_sqlsecure_report_getcomparesnapshotinfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_getcomparesnapshotinfoRow);
                return rowisp_sqlsecure_report_getcomparesnapshotinfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getcomparesnapshotinfoRow FindBysnapshotid(int snapshotid) {
                return ((isp_sqlsecure_report_getcomparesnapshotinfoRow)(this.Rows.Find(new object[] {
                            snapshotid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_getcomparesnapshotinfoDataTable cln = ((isp_sqlsecure_report_getcomparesnapshotinfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_getcomparesnapshotinfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnservername = base.Columns["servername"];
                this.columninstancename = base.Columns["instancename"];
                this.columnauthenticationmode = base.Columns["authenticationmode"];
                this.columnos = base.Columns["os"];
                this.columnversion = base.Columns["version"];
                this.columnedition = base.Columns["edition"];
                this.columnstatus = base.Columns["status"];
                this.columnstarttime = base.Columns["starttime"];
                this.columnendtime = base.Columns["endtime"];
                this.columnautomated = base.Columns["automated"];
                this.columnnumobject = base.Columns["numobject"];
                this.columnnumpermission = base.Columns["numpermission"];
                this.columnnumlogin = base.Columns["numlogin"];
                this.columnnumwindowsgroupmember = base.Columns["numwindowsgroupmember"];
                this.columnbaseline = base.Columns["baseline"];
                this.columnbaselinecomment = base.Columns["baselinecomment"];
                this.columnsnapshotcomment = base.Columns["snapshotcomment"];
                this.columnloginauditmode = base.Columns["loginauditmode"];
                this.columnenableproxyaccount = base.Columns["enableproxyaccount"];
                this.columnenablec2audittrace = base.Columns["enablec2audittrace"];
                this.columncrossdbownershipchaining = base.Columns["crossdbownershipchaining"];
                this.columncasesensitivemode = base.Columns["casesensitivemode"];
                this.columnhashkey = base.Columns["hashkey"];
                this.columnsnapshotid = base.Columns["snapshotid"];
                this.columnregisteredserverid = base.Columns["registeredserverid"];
                this.columncollectorversion = base.Columns["collectorversion"];
                this.columnallowsystemtableupdates = base.Columns["allowsystemtableupdates"];
                this.columnremoteadminconnectionsenabled = base.Columns["remoteadminconnectionsenabled"];
                this.columnremoteaccessenabled = base.Columns["remoteaccessenabled"];
                this.columnscanforstartupprocsenabled = base.Columns["scanforstartupprocsenabled"];
                this.columnsqlmailxpsenabled = base.Columns["sqlmailxpsenabled"];
                this.columndatabasemailxpsenabled = base.Columns["databasemailxpsenabled"];
                this.columnoleautomationproceduresenabled = base.Columns["oleautomationproceduresenabled"];
                this.columnwebassistantproceduresenabled = base.Columns["webassistantproceduresenabled"];
                this.columnxp_cmdshellenabled = base.Columns["xp_cmdshellenabled"];
                this.columnagentmailprofile = base.Columns["agentmailprofile"];
                this.columnhideinstance = base.Columns["hideinstance"];
                this.columnagentsysadminonly = base.Columns["agentsysadminonly"];
                this.columnserverisdomaincontroller = base.Columns["serverisdomaincontroller"];
                this.columnreplicationenabled = base.Columns["replicationenabled"];
                this.columnsapasswordempty = base.Columns["sapasswordempty"];
                this.columnsnapshotname = base.Columns["snapshotname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnservername = new global::System.Data.DataColumn("servername", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservername);
                this.columninstancename = new global::System.Data.DataColumn("instancename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninstancename);
                this.columnauthenticationmode = new global::System.Data.DataColumn("authenticationmode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnauthenticationmode);
                this.columnos = new global::System.Data.DataColumn("os", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnos);
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnversion);
                this.columnedition = new global::System.Data.DataColumn("edition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedition);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnstarttime = new global::System.Data.DataColumn("starttime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstarttime);
                this.columnendtime = new global::System.Data.DataColumn("endtime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendtime);
                this.columnautomated = new global::System.Data.DataColumn("automated", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnautomated);
                this.columnnumobject = new global::System.Data.DataColumn("numobject", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumobject);
                this.columnnumpermission = new global::System.Data.DataColumn("numpermission", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumpermission);
                this.columnnumlogin = new global::System.Data.DataColumn("numlogin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumlogin);
                this.columnnumwindowsgroupmember = new global::System.Data.DataColumn("numwindowsgroupmember", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumwindowsgroupmember);
                this.columnbaseline = new global::System.Data.DataColumn("baseline", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbaseline);
                this.columnbaselinecomment = new global::System.Data.DataColumn("baselinecomment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbaselinecomment);
                this.columnsnapshotcomment = new global::System.Data.DataColumn("snapshotcomment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotcomment);
                this.columnloginauditmode = new global::System.Data.DataColumn("loginauditmode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnloginauditmode);
                this.columnenableproxyaccount = new global::System.Data.DataColumn("enableproxyaccount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenableproxyaccount);
                this.columnenablec2audittrace = new global::System.Data.DataColumn("enablec2audittrace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenablec2audittrace);
                this.columncrossdbownershipchaining = new global::System.Data.DataColumn("crossdbownershipchaining", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncrossdbownershipchaining);
                this.columncasesensitivemode = new global::System.Data.DataColumn("casesensitivemode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncasesensitivemode);
                this.columnhashkey = new global::System.Data.DataColumn("hashkey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhashkey);
                this.columnsnapshotid = new global::System.Data.DataColumn("snapshotid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotid);
                this.columnregisteredserverid = new global::System.Data.DataColumn("registeredserverid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnregisteredserverid);
                this.columncollectorversion = new global::System.Data.DataColumn("collectorversion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncollectorversion);
                this.columnallowsystemtableupdates = new global::System.Data.DataColumn("allowsystemtableupdates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnallowsystemtableupdates);
                this.columnremoteadminconnectionsenabled = new global::System.Data.DataColumn("remoteadminconnectionsenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremoteadminconnectionsenabled);
                this.columnremoteaccessenabled = new global::System.Data.DataColumn("remoteaccessenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremoteaccessenabled);
                this.columnscanforstartupprocsenabled = new global::System.Data.DataColumn("scanforstartupprocsenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscanforstartupprocsenabled);
                this.columnsqlmailxpsenabled = new global::System.Data.DataColumn("sqlmailxpsenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsqlmailxpsenabled);
                this.columndatabasemailxpsenabled = new global::System.Data.DataColumn("databasemailxpsenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatabasemailxpsenabled);
                this.columnoleautomationproceduresenabled = new global::System.Data.DataColumn("oleautomationproceduresenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoleautomationproceduresenabled);
                this.columnwebassistantproceduresenabled = new global::System.Data.DataColumn("webassistantproceduresenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwebassistantproceduresenabled);
                this.columnxp_cmdshellenabled = new global::System.Data.DataColumn("xp_cmdshellenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxp_cmdshellenabled);
                this.columnagentmailprofile = new global::System.Data.DataColumn("agentmailprofile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnagentmailprofile);
                this.columnhideinstance = new global::System.Data.DataColumn("hideinstance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhideinstance);
                this.columnagentsysadminonly = new global::System.Data.DataColumn("agentsysadminonly", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnagentsysadminonly);
                this.columnserverisdomaincontroller = new global::System.Data.DataColumn("serverisdomaincontroller", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnserverisdomaincontroller);
                this.columnreplicationenabled = new global::System.Data.DataColumn("replicationenabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreplicationenabled);
                this.columnsapasswordempty = new global::System.Data.DataColumn("sapasswordempty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsapasswordempty);
                this.columnsnapshotname = new global::System.Data.DataColumn("snapshotname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsnapshotname);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsnapshotid}, true));
                this.columnconnectionname.AllowDBNull = false;
                this.columnconnectionname.MaxLength = 400;
                this.columnservername.MaxLength = 128;
                this.columninstancename.MaxLength = 128;
                this.columnauthenticationmode.AllowDBNull = false;
                this.columnauthenticationmode.MaxLength = 1;
                this.columnos.MaxLength = 512;
                this.columnversion.MaxLength = 256;
                this.columnedition.MaxLength = 256;
                this.columnstatus.MaxLength = 1;
                this.columnautomated.MaxLength = 1;
                this.columnbaseline.MaxLength = 1;
                this.columnbaselinecomment.MaxLength = 400;
                this.columnsnapshotcomment.MaxLength = 1024;
                this.columnloginauditmode.MaxLength = 20;
                this.columnenableproxyaccount.MaxLength = 1;
                this.columnenablec2audittrace.MaxLength = 1;
                this.columncrossdbownershipchaining.MaxLength = 1;
                this.columncasesensitivemode.MaxLength = 1;
                this.columnhashkey.MaxLength = 256;
                this.columnsnapshotid.AllowDBNull = false;
                this.columnsnapshotid.Unique = true;
                this.columnregisteredserverid.AllowDBNull = false;
                this.columncollectorversion.ReadOnly = true;
                this.columncollectorversion.MaxLength = 32;
                this.columnallowsystemtableupdates.MaxLength = 1;
                this.columnremoteadminconnectionsenabled.MaxLength = 1;
                this.columnremoteaccessenabled.MaxLength = 1;
                this.columnscanforstartupprocsenabled.MaxLength = 1;
                this.columnsqlmailxpsenabled.MaxLength = 1;
                this.columndatabasemailxpsenabled.MaxLength = 1;
                this.columnoleautomationproceduresenabled.MaxLength = 1;
                this.columnwebassistantproceduresenabled.MaxLength = 1;
                this.columnxp_cmdshellenabled.MaxLength = 1;
                this.columnagentmailprofile.MaxLength = 128;
                this.columnhideinstance.MaxLength = 1;
                this.columnagentsysadminonly.MaxLength = 1;
                this.columnserverisdomaincontroller.MaxLength = 1;
                this.columnreplicationenabled.MaxLength = 1;
                this.columnsapasswordempty.MaxLength = 1;
                this.columnsnapshotname.ReadOnly = true;
                this.columnsnapshotname.MaxLength = 61;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getcomparesnapshotinfoRow Newisp_sqlsecure_report_getcomparesnapshotinfoRow() {
                return ((isp_sqlsecure_report_getcomparesnapshotinfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_getcomparesnapshotinfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_getcomparesnapshotinfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_getcomparesnapshotinfoRowChanged != null)) {
                    this.isp_sqlsecure_report_getcomparesnapshotinfoRowChanged(this, new isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEvent(((isp_sqlsecure_report_getcomparesnapshotinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_getcomparesnapshotinfoRowChanging != null)) {
                    this.isp_sqlsecure_report_getcomparesnapshotinfoRowChanging(this, new isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEvent(((isp_sqlsecure_report_getcomparesnapshotinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_getcomparesnapshotinfoRowDeleted != null)) {
                    this.isp_sqlsecure_report_getcomparesnapshotinfoRowDeleted(this, new isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEvent(((isp_sqlsecure_report_getcomparesnapshotinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_getcomparesnapshotinfoRowDeleting != null)) {
                    this.isp_sqlsecure_report_getcomparesnapshotinfoRowDeleting(this, new isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEvent(((isp_sqlsecure_report_getcomparesnapshotinfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_getcomparesnapshotinfoRow(isp_sqlsecure_report_getcomparesnapshotinfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_getcomparesnapshotinfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class isp_sqlsecure_report_checkweakpasswordDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconnectionname;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnpasswordstatus;
            
            private global::System.Data.DataColumn columndisabled;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkweakpasswordDataTable() {
                this.TableName = "isp_sqlsecure_report_checkweakpassword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkweakpasswordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected isp_sqlsecure_report_checkweakpasswordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connectionnameColumn {
                get {
                    return this.columnconnectionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn passwordstatusColumn {
                get {
                    return this.columnpasswordstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn disabledColumn {
                get {
                    return this.columndisabled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkweakpasswordRow this[int index] {
                get {
                    return ((isp_sqlsecure_report_checkweakpasswordRow)(this.Rows[index]));
                }
            }
            
            public event isp_sqlsecure_report_checkweakpasswordRowChangeEventHandler isp_sqlsecure_report_checkweakpasswordRowChanging;
            
            public event isp_sqlsecure_report_checkweakpasswordRowChangeEventHandler isp_sqlsecure_report_checkweakpasswordRowChanged;
            
            public event isp_sqlsecure_report_checkweakpasswordRowChangeEventHandler isp_sqlsecure_report_checkweakpasswordRowDeleting;
            
            public event isp_sqlsecure_report_checkweakpasswordRowChangeEventHandler isp_sqlsecure_report_checkweakpasswordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addisp_sqlsecure_report_checkweakpasswordRow(isp_sqlsecure_report_checkweakpasswordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkweakpasswordRow Addisp_sqlsecure_report_checkweakpasswordRow(string connectionname, string name, string passwordstatus, string disabled) {
                isp_sqlsecure_report_checkweakpasswordRow rowisp_sqlsecure_report_checkweakpasswordRow = ((isp_sqlsecure_report_checkweakpasswordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        connectionname,
                        name,
                        passwordstatus,
                        disabled};
                rowisp_sqlsecure_report_checkweakpasswordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowisp_sqlsecure_report_checkweakpasswordRow);
                return rowisp_sqlsecure_report_checkweakpasswordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                isp_sqlsecure_report_checkweakpasswordDataTable cln = ((isp_sqlsecure_report_checkweakpasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new isp_sqlsecure_report_checkweakpasswordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconnectionname = base.Columns["connectionname"];
                this.columnname = base.Columns["name"];
                this.columnpasswordstatus = base.Columns["passwordstatus"];
                this.columndisabled = base.Columns["disabled"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconnectionname = new global::System.Data.DataColumn("connectionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnectionname);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnpasswordstatus = new global::System.Data.DataColumn("passwordstatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpasswordstatus);
                this.columndisabled = new global::System.Data.DataColumn("disabled", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndisabled);
                this.columnconnectionname.AllowDBNull = false;
                this.columnconnectionname.MaxLength = 400;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 128;
                this.columnpasswordstatus.ReadOnly = true;
                this.columnpasswordstatus.MaxLength = 256;
                this.columndisabled.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkweakpasswordRow Newisp_sqlsecure_report_checkweakpasswordRow() {
                return ((isp_sqlsecure_report_checkweakpasswordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new isp_sqlsecure_report_checkweakpasswordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(isp_sqlsecure_report_checkweakpasswordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.isp_sqlsecure_report_checkweakpasswordRowChanged != null)) {
                    this.isp_sqlsecure_report_checkweakpasswordRowChanged(this, new isp_sqlsecure_report_checkweakpasswordRowChangeEvent(((isp_sqlsecure_report_checkweakpasswordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.isp_sqlsecure_report_checkweakpasswordRowChanging != null)) {
                    this.isp_sqlsecure_report_checkweakpasswordRowChanging(this, new isp_sqlsecure_report_checkweakpasswordRowChangeEvent(((isp_sqlsecure_report_checkweakpasswordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.isp_sqlsecure_report_checkweakpasswordRowDeleted != null)) {
                    this.isp_sqlsecure_report_checkweakpasswordRowDeleted(this, new isp_sqlsecure_report_checkweakpasswordRowChangeEvent(((isp_sqlsecure_report_checkweakpasswordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.isp_sqlsecure_report_checkweakpasswordRowDeleting != null)) {
                    this.isp_sqlsecure_report_checkweakpasswordRowDeleting(this, new isp_sqlsecure_report_checkweakpasswordRowChangeEvent(((isp_sqlsecure_report_checkweakpasswordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeisp_sqlsecure_report_checkweakpasswordRow(isp_sqlsecure_report_checkweakpasswordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ReportsDataset ds = new ReportsDataset();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "isp_sqlsecure_report_checkweakpasswordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getguestenabledserversRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getguestenabledserversDataTable tableisp_sqlsecure_report_getguestenabledservers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getguestenabledserversRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getguestenabledservers = ((isp_sqlsecure_report_getguestenabledserversDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getguestenabledservers.connectionnameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getguestenabledservers.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databasename {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getguestenabledservers.databasenameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getguestenabledservers.databasenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string owner {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getguestenabledservers.ownerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'owner\' in table \'isp_sqlsecure_report_getguestenabledserver" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getguestenabledservers.ownerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsownerNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getguestenabledservers.ownerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetownerNull() {
                this[this.tableisp_sqlsecure_report_getguestenabledservers.ownerColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getserveraccessRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getserveraccessDataTable tableisp_sqlsecure_report_getserveraccess;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getserveraccessRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getserveraccess = ((isp_sqlsecure_report_getserveraccessDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int snapshotid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getserveraccess.snapshotidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotid\' in table \'isp_sqlsecure_report_getserveraccess\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getserveraccess.snapshotidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getserveraccess.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_getserveracc" +
                                "ess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getserveraccess.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string logintype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getserveraccess.logintypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'logintype\' in table \'isp_sqlsecure_report_getserveraccess\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getserveraccess.logintypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loginname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getserveraccess.loginnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'loginname\' in table \'isp_sqlsecure_report_getserveraccess\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getserveraccess.loginnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnapshotidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getserveraccess.snapshotidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnapshotidNull() {
                this[this.tableisp_sqlsecure_report_getserveraccess.snapshotidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getserveraccess.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_getserveraccess.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogintypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getserveraccess.logintypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogintypeNull() {
                this[this.tableisp_sqlsecure_report_getserveraccess.logintypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getserveraccess.loginnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginnameNull() {
                this[this.tableisp_sqlsecure_report_getserveraccess.loginnameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_authenticationRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_authenticationDataTable tableisp_sqlsecure_report_authentication;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_authenticationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_authentication = ((isp_sqlsecure_report_authenticationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_authentication.connectionnameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_authentication.connectionnameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_checkwellknowngroupRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_checkwellknowngroupDataTable tableisp_sqlsecure_report_checkwellknowngroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkwellknowngroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_checkwellknowngroup = ((isp_sqlsecure_report_checkwellknowngroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkwellknowngroup.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_checkwellkno" +
                                "wngroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkwellknowngroup.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkwellknowngroup.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'isp_sqlsecure_report_checkwellknowngroup\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkwellknowngroup.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string groupname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkwellknowngroup.groupnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'groupname\' in table \'isp_sqlsecure_report_checkwellknowngro" +
                                "up\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkwellknowngroup.groupnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string access {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkwellknowngroup.accessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'access\' in table \'isp_sqlsecure_report_checkwellknowngroup\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkwellknowngroup.accessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkwellknowngroup.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_checkwellknowngroup.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkwellknowngroup.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableisp_sqlsecure_report_checkwellknowngroup.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgroupnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkwellknowngroup.groupnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgroupnameNull() {
                this[this.tableisp_sqlsecure_report_checkwellknowngroup.groupnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccessNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkwellknowngroup.accessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccessNull() {
                this[this.tableisp_sqlsecure_report_checkwellknowngroup.accessColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_sysadmin_administratorRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_sysadmin_administratorDataTable tableisp_sqlsecure_report_sysadmin_administrator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_sysadmin_administratorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_sysadmin_administrator = ((isp_sqlsecure_report_sysadmin_administratorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_sysadmin_administrator.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_sysadmin_adm" +
                                "inistrator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_sysadmin_administrator.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string login {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_sysadmin_administrator.loginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'login\' in table \'isp_sqlsecure_report_sysadmin_administrato" +
                                "r\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_sysadmin_administrator.loginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fixedrole {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_sysadmin_administrator.fixedroleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fixedrole\' in table \'isp_sqlsecure_report_sysadmin_administ" +
                                "rator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_sysadmin_administrator.fixedroleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_sysadmin_administrator.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_sysadmin_administrator.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_sysadmin_administrator.loginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginNull() {
                this[this.tableisp_sqlsecure_report_sysadmin_administrator.loginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfixedroleNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_sysadmin_administrator.fixedroleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfixedroleNull() {
                this[this.tableisp_sqlsecure_report_sysadmin_administrator.fixedroleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_orphanedloginsRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_orphanedloginsDataTable tableisp_sqlsecure_report_orphanedlogins;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_orphanedloginsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_orphanedlogins = ((isp_sqlsecure_report_orphanedloginsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_orphanedlogins.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_orphanedlogi" +
                                "ns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_orphanedlogins.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_orphanedlogins.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'isp_sqlsecure_report_orphanedlogins\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_orphanedlogins.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_orphanedlogins.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'isp_sqlsecure_report_orphanedlogins\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_orphanedlogins.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string state {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_orphanedlogins.stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'state\' in table \'isp_sqlsecure_report_orphanedlogins\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_orphanedlogins.stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_orphanedlogins.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_orphanedlogins.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_orphanedlogins.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableisp_sqlsecure_report_orphanedlogins.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_orphanedlogins.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableisp_sqlsecure_report_orphanedlogins.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstateNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_orphanedlogins.stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstateNull() {
                this[this.tableisp_sqlsecure_report_orphanedlogins.stateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_dbuserfixedroleRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_dbuserfixedroleDataTable tableisp_sqlsecure_report_dbuserfixedrole;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_dbuserfixedroleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_dbuserfixedrole = ((isp_sqlsecure_report_dbuserfixedroleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_dbuserfixedrole.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_dbuserfixedr" +
                                "ole\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_dbuserfixedrole.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databasename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_dbuserfixedrole.databasenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databasename\' in table \'isp_sqlsecure_report_dbuserfixedrol" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_dbuserfixedrole.databasenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string username {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_dbuserfixedrole.usernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'username\' in table \'isp_sqlsecure_report_dbuserfixedrole\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_dbuserfixedrole.usernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string role {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_dbuserfixedrole.roleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'role\' in table \'isp_sqlsecure_report_dbuserfixedrole\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_dbuserfixedrole.roleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_dbuserfixedrole.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_dbuserfixedrole.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabasenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_dbuserfixedrole.databasenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabasenameNull() {
                this[this.tableisp_sqlsecure_report_dbuserfixedrole.databasenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsusernameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_dbuserfixedrole.usernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetusernameNull() {
                this[this.tableisp_sqlsecure_report_dbuserfixedrole.usernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsroleNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_dbuserfixedrole.roleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetroleNull() {
                this[this.tableisp_sqlsecure_report_dbuserfixedrole.roleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_checkcmdshellRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_checkcmdshellDataTable tableisp_sqlsecure_report_checkcmdshell;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkcmdshellRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_checkcmdshell = ((isp_sqlsecure_report_checkcmdshellDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkcmdshell.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_checkcmdshel" +
                                "l\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkcmdshell.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkcmdshell.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'isp_sqlsecure_report_checkcmdshell\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkcmdshell.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databasename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkcmdshell.databasenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databasename\' in table \'isp_sqlsecure_report_checkcmdshell\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkcmdshell.databasenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkcmdshell.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_checkcmdshell.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkcmdshell.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableisp_sqlsecure_report_checkcmdshell.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabasenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkcmdshell.databasenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabasenameNull() {
                this[this.tableisp_sqlsecure_report_checkcmdshell.databasenameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getuserinfoRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getuserinfoDataTable tableisp_sqlsecure_report_getuserinfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getuserinfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getuserinfo = ((isp_sqlsecure_report_getuserinfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_getuserinfo\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loginname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.loginnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'loginname\' in table \'isp_sqlsecure_report_getuserinfo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.loginnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string logintype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.logintypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'logintype\' in table \'isp_sqlsecure_report_getuserinfo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.logintypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databasename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.databasenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databasename\' in table \'isp_sqlsecure_report_getuserinfo\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.databasenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string username {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.usernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'username\' in table \'isp_sqlsecure_report_getuserinfo\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.usernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isalias {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.isaliasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isalias\' in table \'isp_sqlsecure_report_getuserinfo\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.isaliasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hasaccess {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.hasaccessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hasaccess\' in table \'isp_sqlsecure_report_getuserinfo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.hasaccessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defaultschema {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserinfo.defaultschemaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'defaultschema\' in table \'isp_sqlsecure_report_getuserinfo\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserinfo.defaultschemaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.loginnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginnameNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.loginnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogintypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.logintypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogintypeNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.logintypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabasenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.databasenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabasenameNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.databasenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsusernameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.usernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetusernameNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.usernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisaliasNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.isaliasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisaliasNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.isaliasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshasaccessNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.hasaccessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethasaccessNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.hasaccessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdefaultschemaNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserinfo.defaultschemaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdefaultschemaNull() {
                this[this.tableisp_sqlsecure_report_getuserinfo.defaultschemaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_checkdbchainingRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_checkdbchainingDataTable tableisp_sqlsecure_report_checkdbchaining;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkdbchainingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_checkdbchaining = ((isp_sqlsecure_report_checkdbchainingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_checkdbchaining.connectionnameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkdbchaining.connectionnameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_checksystemstoredproceduresRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_checksystemstoredproceduresDataTable tableisp_sqlsecure_report_checksystemstoredprocedures;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checksystemstoredproceduresRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_checksystemstoredprocedures = ((isp_sqlsecure_report_checksystemstoredproceduresDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_checksystems" +
                                "toredprocedures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databasename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.databasenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databasename\' in table \'isp_sqlsecure_report_checksystemsto" +
                                "redprocedures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.databasenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string username {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.usernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'username\' in table \'isp_sqlsecure_report_checksystemstoredp" +
                                "rocedures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.usernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string objectname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.objectnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'objectname\' in table \'isp_sqlsecure_report_checksystemstore" +
                                "dprocedures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.objectnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string permission {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.permissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'permission\' in table \'isp_sqlsecure_report_checksystemstore" +
                                "dprocedures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.permissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isgrant {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isgrant\' in table \'isp_sqlsecure_report_checksystemstoredpr" +
                                "ocedures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isgrantwith {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantwithColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isgrantwith\' in table \'isp_sqlsecure_report_checksystemstor" +
                                "edprocedures\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantwithColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checksystemstoredprocedures.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabasenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checksystemstoredprocedures.databasenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabasenameNull() {
                this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.databasenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsusernameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checksystemstoredprocedures.usernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetusernameNull() {
                this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.usernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsobjectnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checksystemstoredprocedures.objectnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetobjectnameNull() {
                this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.objectnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspermissionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checksystemstoredprocedures.permissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpermissionNull() {
                this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.permissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisgrantNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisgrantNull() {
                this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisgrantwithNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantwithColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisgrantwithNull() {
                this[this.tableisp_sqlsecure_report_checksystemstoredprocedures.isgrantwithColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_checkxpmailRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_checkxpmailDataTable tableisp_sqlsecure_report_checkxpmail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkxpmailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_checkxpmail = ((isp_sqlsecure_report_checkxpmailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkxpmail.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_checkxpmail\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkxpmail.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkxpmail.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'isp_sqlsecure_report_checkxpmail\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkxpmail.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkxpmail.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_checkxpmail.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkxpmail.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableisp_sqlsecure_report_checkxpmail.nameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getauditfiltersRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getauditfiltersDataTable tableisp_sqlsecure_report_getauditfilters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getauditfiltersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getauditfilters = ((isp_sqlsecure_report_getauditfiltersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string servername {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getauditfilters.servernameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.servernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rulename {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getauditfilters.rulenameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.rulenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ruledescription {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditfilters.ruledescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ruledescription\' in table \'isp_sqlsecure_report_getauditfil" +
                                "ters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.ruledescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string modifiedby {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditfilters.modifiedbyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'modifiedby\' in table \'isp_sqlsecure_report_getauditfilters\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.modifiedbyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime modifiedon {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableisp_sqlsecure_report_getauditfilters.modifiedonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'modifiedon\' in table \'isp_sqlsecure_report_getauditfilters\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.modifiedonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getauditfilters.typeColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scope {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditfilters.scopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scope\' in table \'isp_sqlsecure_report_getauditfilters\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.scopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string namematchstring {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditfilters.namematchstringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'namematchstring\' in table \'isp_sqlsecure_report_getauditfil" +
                                "ters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditfilters.namematchstringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsruledescriptionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditfilters.ruledescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetruledescriptionNull() {
                this[this.tableisp_sqlsecure_report_getauditfilters.ruledescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodifiedbyNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditfilters.modifiedbyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodifiedbyNull() {
                this[this.tableisp_sqlsecure_report_getauditfilters.modifiedbyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodifiedonNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditfilters.modifiedonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodifiedonNull() {
                this[this.tableisp_sqlsecure_report_getauditfilters.modifiedonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscopeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditfilters.scopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscopeNull() {
                this[this.tableisp_sqlsecure_report_getauditfilters.scopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnamematchstringNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditfilters.namematchstringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnamematchstringNull() {
                this[this.tableisp_sqlsecure_report_getauditfilters.namematchstringColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getuserpermissionsRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getuserpermissionsDataTable tableisp_sqlsecure_report_getuserpermissions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getuserpermissionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getuserpermissions = ((isp_sqlsecure_report_getuserpermissionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserpermissions.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_getuserpermi" +
                                "ssions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserpermissions.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loginname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserpermissions.loginnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'loginname\' in table \'isp_sqlsecure_report_getuserpermission" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserpermissions.loginnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string logintype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserpermissions.logintypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'logintype\' in table \'isp_sqlsecure_report_getuserpermission" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserpermissions.logintypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string serveraccess {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserpermissions.serveraccessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'serveraccess\' in table \'isp_sqlsecure_report_getuserpermiss" +
                                "ions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserpermissions.serveraccessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string disabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserpermissions.disabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'disabled\' in table \'isp_sqlsecure_report_getuserpermissions" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserpermissions.disabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string role {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserpermissions.roleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'role\' in table \'isp_sqlsecure_report_getuserpermissions\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserpermissions.roleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserpermissions.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_getuserpermissions.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserpermissions.loginnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginnameNull() {
                this[this.tableisp_sqlsecure_report_getuserpermissions.loginnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogintypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserpermissions.logintypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogintypeNull() {
                this[this.tableisp_sqlsecure_report_getuserpermissions.logintypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsserveraccessNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserpermissions.serveraccessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetserveraccessNull() {
                this[this.tableisp_sqlsecure_report_getuserpermissions.serveraccessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdisabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserpermissions.disabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdisabledNull() {
                this[this.tableisp_sqlsecure_report_getuserpermissions.disabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsroleNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserpermissions.roleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetroleNull() {
                this[this.tableisp_sqlsecure_report_getuserpermissions.roleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getuserdatabasepermissionsRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getuserdatabasepermissionsDataTable tableisp_sqlsecure_report_getuserdatabasepermissions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getuserdatabasepermissionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getuserdatabasepermissions = ((isp_sqlsecure_report_getuserdatabasepermissionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int snapshotid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.snapshotidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotid\' in table \'isp_sqlsecure_report_getuserdatabasep" +
                                "ermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.snapshotidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string permissionlevel {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionlevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'permissionlevel\' in table \'isp_sqlsecure_report_getuserdata" +
                                "basepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionlevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string logintype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.logintypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'logintype\' in table \'isp_sqlsecure_report_getuserdatabasepe" +
                                "rmissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.logintypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loginname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.loginnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'loginname\' in table \'isp_sqlsecure_report_getuserdatabasepe" +
                                "rmissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.loginnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_getuserdatab" +
                                "asepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databasename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databasenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databasename\' in table \'isp_sqlsecure_report_getuserdatabas" +
                                "epermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databasenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int principalid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'principalid\' in table \'isp_sqlsecure_report_getuserdatabase" +
                                "permissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string principalname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'principalname\' in table \'isp_sqlsecure_report_getuserdataba" +
                                "sepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string principaltype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principaltypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'principaltype\' in table \'isp_sqlsecure_report_getuserdataba" +
                                "sepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principaltypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databaseprincipal {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databaseprincipal\' in table \'isp_sqlsecure_report_getuserda" +
                                "tabasepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databaseprincipaltype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipaltypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databaseprincipaltype\' in table \'isp_sqlsecure_report_getus" +
                                "erdatabasepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipaltypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int grantor {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grantor\' in table \'isp_sqlsecure_report_getuserdatabaseperm" +
                                "issions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grantorname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantornameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grantorname\' in table \'isp_sqlsecure_report_getuserdatabase" +
                                "permissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantornameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int grantee {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grantee\' in table \'isp_sqlsecure_report_getuserdatabaseperm" +
                                "issions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string granteename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'granteename\' in table \'isp_sqlsecure_report_getuserdatabase" +
                                "permissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int classid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.classidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'classid\' in table \'isp_sqlsecure_report_getuserdatabaseperm" +
                                "issions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.classidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string permissiontype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissiontypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'permissiontype\' in table \'isp_sqlsecure_report_getuserdatab" +
                                "asepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissiontypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string coveringfrom {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.coveringfromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'coveringfrom\' in table \'isp_sqlsecure_report_getuserdatabas" +
                                "epermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.coveringfromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string permission {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'permission\' in table \'isp_sqlsecure_report_getuserdatabasep" +
                                "ermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isgrant {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isgrant\' in table \'isp_sqlsecure_report_getuserdatabaseperm" +
                                "issions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isgrantwith {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantwithColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isgrantwith\' in table \'isp_sqlsecure_report_getuserdatabase" +
                                "permissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantwithColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isrevoke {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isrevokeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isrevoke\' in table \'isp_sqlsecure_report_getuserdatabaseper" +
                                "missions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isrevokeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isdeny {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isdenyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isdeny\' in table \'isp_sqlsecure_report_getuserdatabasepermi" +
                                "ssions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isdenyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parentobjectid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.parentobjectidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parentobjectid\' in table \'isp_sqlsecure_report_getuserdatab" +
                                "asepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.parentobjectidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int objectid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'objectid\' in table \'isp_sqlsecure_report_getuserdatabaseper" +
                                "missions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string objectname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'objectname\' in table \'isp_sqlsecure_report_getuserdatabasep" +
                                "ermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string qualifiedname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.qualifiednameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qualifiedname\' in table \'isp_sqlsecure_report_getuserdataba" +
                                "sepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.qualifiednameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string objecttype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objecttypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'objecttype\' in table \'isp_sqlsecure_report_getuserdatabasep" +
                                "ermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objecttypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int schemaid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'schemaid\' in table \'isp_sqlsecure_report_getuserdatabaseper" +
                                "missions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string schemaname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemanameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'schemaname\' in table \'isp_sqlsecure_report_getuserdatabasep" +
                                "ermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemanameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int owner {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'owner\' in table \'isp_sqlsecure_report_getuserdatabasepermis" +
                                "sions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ownername {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ownername\' in table \'isp_sqlsecure_report_getuserdatabasepe" +
                                "rmissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isaliased {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isaliasedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isaliased\' in table \'isp_sqlsecure_report_getuserdatabasepe" +
                                "rmissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isaliasedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inherited {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.inheritedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inherited\' in table \'isp_sqlsecure_report_getuserdatabasepe" +
                                "rmissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.inheritedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sourcename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourcename\' in table \'isp_sqlsecure_report_getuserdatabasep" +
                                "ermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sourcetype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcetypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourcetype\' in table \'isp_sqlsecure_report_getuserdatabasep" +
                                "ermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcetypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sourcepermission {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcepermissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sourcepermission\' in table \'isp_sqlsecure_report_getuserdat" +
                                "abasepermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcepermissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnapshotidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.snapshotidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnapshotidNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.snapshotidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspermissionlevelNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionlevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpermissionlevelNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionlevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogintypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.logintypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogintypeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.logintypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.loginnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginnameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.loginnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabasenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.databasenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabasenameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databasenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprincipalidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprincipalidNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprincipalnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprincipalnameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principalnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprincipaltypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.principaltypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprincipaltypeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.principaltypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabaseprincipalNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabaseprincipalNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabaseprincipaltypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipaltypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabaseprincipaltypeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.databaseprincipaltypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrantorNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrantorNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgrantornameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantornameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgrantornameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.grantornameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgranteeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgranteeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgranteenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgranteenameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.granteenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclassidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.classidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclassidNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.classidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspermissiontypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissiontypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpermissiontypeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissiontypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscoveringfromNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.coveringfromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcoveringfromNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.coveringfromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspermissionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpermissionNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.permissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisgrantNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisgrantNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisgrantwithNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantwithColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisgrantwithNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isgrantwithColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisrevokeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.isrevokeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisrevokeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isrevokeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisdenyNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.isdenyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisdenyNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isdenyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparentobjectidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.parentobjectidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparentobjectidNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.parentobjectidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsobjectidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetobjectidNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsobjectnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetobjectnameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objectnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqualifiednameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.qualifiednameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqualifiednameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.qualifiednameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsobjecttypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.objecttypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetobjecttypeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.objecttypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsschemaidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetschemaidNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsschemanameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemanameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetschemanameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.schemanameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsownerNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetownerNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsownernameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetownernameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.ownernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisaliasedNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.isaliasedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisaliasedNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.isaliasedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinheritedNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.inheritedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinheritedNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.inheritedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourcenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourcenameNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourcetypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcetypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourcetypeNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcetypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourcepermissionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcepermissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourcepermissionNull() {
                this[this.tableisp_sqlsecure_report_getuserdatabasepermissions.sourcepermissionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getauditedinstancesRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getauditedinstancesDataTable tableisp_sqlsecure_report_getauditedinstances;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getauditedinstancesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getauditedinstances = ((isp_sqlsecure_report_getauditedinstancesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.connectionnameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string servername {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.servernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'servername\' in table \'isp_sqlsecure_report_getauditedinstan" +
                                "ces\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.servernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string instancename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.instancenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instancename\' in table \'isp_sqlsecure_report_getauditedinst" +
                                "ances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.instancenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.versionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'version\' in table \'isp_sqlsecure_report_getauditedinstances" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edition {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.editionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'edition\' in table \'isp_sqlsecure_report_getauditedinstances" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.editionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string authenticationmode {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.authenticationmodeColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.authenticationmodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string os {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.osColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'os\' in table \'isp_sqlsecure_report_getauditedinstances\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.osColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loginauditmode {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.loginauditmodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'loginauditmode\' in table \'isp_sqlsecure_report_getauditedin" +
                                "stances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.loginauditmodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string enableproxyaccount {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.enableproxyaccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'enableproxyaccount\' in table \'isp_sqlsecure_report_getaudit" +
                                "edinstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.enableproxyaccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string enablec2audittrace {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.enablec2audittraceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'enablec2audittrace\' in table \'isp_sqlsecure_report_getaudit" +
                                "edinstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.enablec2audittraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string crossdbownershipchaining {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.crossdbownershipchainingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'crossdbownershipchaining\' in table \'isp_sqlsecure_report_ge" +
                                "tauditedinstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.crossdbownershipchainingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string casesensitivemode {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getauditedinstances.casesensitivemodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'casesensitivemode\' in table \'isp_sqlsecure_report_getaudite" +
                                "dinstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.casesensitivemodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numwindowsuser {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getauditedinstances.numwindowsuserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numwindowsuser\' in table \'isp_sqlsecure_report_getauditedin" +
                                "stances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.numwindowsuserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numwindowsgroup {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getauditedinstances.numwindowsgroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numwindowsgroup\' in table \'isp_sqlsecure_report_getauditedi" +
                                "nstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.numwindowsgroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numsqllogin {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getauditedinstances.numsqlloginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numsqllogin\' in table \'isp_sqlsecure_report_getauditedinsta" +
                                "nces\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.numsqlloginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime snapshottime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableisp_sqlsecure_report_getauditedinstances.snapshottimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshottime\' in table \'isp_sqlsecure_report_getauditedinst" +
                                "ances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getauditedinstances.snapshottimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsservernameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.servernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetservernameNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.servernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstancenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.instancenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstancenameNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.instancenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.versionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.versionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.editionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditionNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.editionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsosNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.osColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetosNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.osColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginauditmodeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.loginauditmodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginauditmodeNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.loginauditmodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsenableproxyaccountNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.enableproxyaccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetenableproxyaccountNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.enableproxyaccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isenablec2audittraceNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.enablec2audittraceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setenablec2audittraceNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.enablec2audittraceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscrossdbownershipchainingNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.crossdbownershipchainingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcrossdbownershipchainingNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.crossdbownershipchainingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscasesensitivemodeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.casesensitivemodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcasesensitivemodeNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.casesensitivemodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumwindowsuserNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.numwindowsuserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumwindowsuserNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.numwindowsuserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumwindowsgroupNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.numwindowsgroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumwindowsgroupNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.numwindowsgroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumsqlloginNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.numsqlloginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumsqlloginNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.numsqlloginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnapshottimeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getauditedinstances.snapshottimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnapshottimeNull() {
                this[this.tableisp_sqlsecure_report_getauditedinstances.snapshottimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getassessmentcomparisonRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getassessmentcomparisonDataTable tableisp_sqlsecure_report_getassessmentcomparison;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getassessmentcomparisonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getassessmentcomparison = ((isp_sqlsecure_report_getassessmentcomparisonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int policyid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.policyidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'policyid\' in table \'isp_sqlsecure_report_getassessmentcompa" +
                                "rison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.policyidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int assessmentid1 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assessmentid1\' in table \'isp_sqlsecure_report_getassessment" +
                                "comparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int assessmentid2 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assessmentid2\' in table \'isp_sqlsecure_report_getassessment" +
                                "comparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int registeredserverid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.registeredserveridColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'registeredserverid\' in table \'isp_sqlsecure_report_getasses" +
                                "smentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.registeredserveridColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_report_getassessmen" +
                                "tcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metricid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricid\' in table \'isp_sqlsecure_report_getassessmentcompa" +
                                "rison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricname\' in table \'isp_sqlsecure_report_getassessmentcom" +
                                "parison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metrictype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metrictypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metrictype\' in table \'isp_sqlsecure_report_getassessmentcom" +
                                "parison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metrictypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool differencesfound {
                get {
                    try {
                        return ((bool)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.differencesfoundColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'differencesfound\' in table \'isp_sqlsecure_report_getassessm" +
                                "entcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.differencesfoundColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool diffreportsettings {
                get {
                    try {
                        return ((bool)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffreportsettings\' in table \'isp_sqlsecure_report_getasses" +
                                "smentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffreportsettingstext {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingstextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffreportsettingstext\' in table \'isp_sqlsecure_report_geta" +
                                "ssessmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingstextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool diffmetricsettings {
                get {
                    try {
                        return ((bool)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffmetricsettings\' in table \'isp_sqlsecure_report_getasses" +
                                "smentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffmetricsettingstext {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingstextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffmetricsettingstext\' in table \'isp_sqlsecure_report_geta" +
                                "ssessmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingstextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool difffindings {
                get {
                    try {
                        return ((bool)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difffindings\' in table \'isp_sqlsecure_report_getassessmentc" +
                                "omparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string difffindingstext {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingstextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difffindingstext\' in table \'isp_sqlsecure_report_getassessm" +
                                "entcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingstextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool diffnotes {
                get {
                    try {
                        return ((bool)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffnotes\' in table \'isp_sqlsecure_report_getassessmentcomp" +
                                "arison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffnotestext {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotestextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffnotestext\' in table \'isp_sqlsecure_report_getassessment" +
                                "comparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotestextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int snapshotid1 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotid1\' in table \'isp_sqlsecure_report_getassessmentco" +
                                "mparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime collectiontime1 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'collectiontime1\' in table \'isp_sqlsecure_report_getassessme" +
                                "ntcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metricseveritycode1 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricseveritycode1\' in table \'isp_sqlsecure_report_getasse" +
                                "ssmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricseverity1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricseverity1\' in table \'isp_sqlsecure_report_getassessme" +
                                "ntcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricseverityvalues1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricseverityvalues1\' in table \'isp_sqlsecure_report_getas" +
                                "sessmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricdescription1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricdescription1\' in table \'isp_sqlsecure_report_getasses" +
                                "smentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricreportkey1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricreportkey1\' in table \'isp_sqlsecure_report_getassessm" +
                                "entcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricreporttext1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricreporttext1\' in table \'isp_sqlsecure_report_getassess" +
                                "mentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int severitycode1 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'severitycode1\' in table \'isp_sqlsecure_report_getassessment" +
                                "comparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string severity1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.severity1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'severity1\' in table \'isp_sqlsecure_report_getassessmentcomp" +
                                "arison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.severity1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string currentvalue1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'currentvalue1\' in table \'isp_sqlsecure_report_getassessment" +
                                "comparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string thresholdvalue1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'thresholdvalue1\' in table \'isp_sqlsecure_report_getassessme" +
                                "ntcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isexplained1 {
                get {
                    try {
                        return ((bool)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isexplained1\' in table \'isp_sqlsecure_report_getassessmentc" +
                                "omparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int severitycodeexplained1 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'severitycodeexplained1\' in table \'isp_sqlsecure_report_geta" +
                                "ssessmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notes1 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.notes1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notes1\' in table \'isp_sqlsecure_report_getassessmentcompari" +
                                "son\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.notes1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int snapshotid2 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotid2\' in table \'isp_sqlsecure_report_getassessmentco" +
                                "mparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime collectiontime2 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'collectiontime2\' in table \'isp_sqlsecure_report_getassessme" +
                                "ntcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int metricseveritycode2 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricseveritycode2\' in table \'isp_sqlsecure_report_getasse" +
                                "ssmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricseverity2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricseverity2\' in table \'isp_sqlsecure_report_getassessme" +
                                "ntcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricseverityvalues2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricseverityvalues2\' in table \'isp_sqlsecure_report_getas" +
                                "sessmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricdescription2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricdescription2\' in table \'isp_sqlsecure_report_getasses" +
                                "smentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricreportkey2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricreportkey2\' in table \'isp_sqlsecure_report_getassessm" +
                                "entcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metricreporttext2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'metricreporttext2\' in table \'isp_sqlsecure_report_getassess" +
                                "mentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int severitycode2 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'severitycode2\' in table \'isp_sqlsecure_report_getassessment" +
                                "comparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string severity2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.severity2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'severity2\' in table \'isp_sqlsecure_report_getassessmentcomp" +
                                "arison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.severity2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string currentvalue2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'currentvalue2\' in table \'isp_sqlsecure_report_getassessment" +
                                "comparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string thresholdvalue2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'thresholdvalue2\' in table \'isp_sqlsecure_report_getassessme" +
                                "ntcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isexplained2 {
                get {
                    try {
                        return ((bool)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isexplained2\' in table \'isp_sqlsecure_report_getassessmentc" +
                                "omparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int severitycodeexplained2 {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'severitycodeexplained2\' in table \'isp_sqlsecure_report_geta" +
                                "ssessmentcomparison\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notes2 {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getassessmentcomparison.notes2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notes2\' in table \'isp_sqlsecure_report_getassessmentcompari" +
                                "son\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getassessmentcomparison.notes2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspolicyidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.policyidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpolicyidNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.policyidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isassessmentid1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setassessmentid1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isassessmentid2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setassessmentid2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.assessmentid2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsregisteredserveridNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.registeredserveridColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetregisteredserveridNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.registeredserveridColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmetricidNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmetricidNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmetricnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmetricnameNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmetrictypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metrictypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmetrictypeNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metrictypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifferencesfoundNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.differencesfoundColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifferencesfoundNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.differencesfoundColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffreportsettingsNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffreportsettingsNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffreportsettingstextNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingstextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffreportsettingstextNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffreportsettingstextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffmetricsettingsNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffmetricsettingsNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffmetricsettingstextNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingstextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffmetricsettingstextNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffmetricsettingstextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifffindingsNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifffindingsNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifffindingstextNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingstextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifffindingstextNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.difffindingstextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffnotesNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffnotesNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffnotestextNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotestextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffnotestextNull() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.diffnotestextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issnapshotid1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsnapshotid1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscollectiontime1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcollectiontime1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricseveritycode1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricseveritycode1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricseverity1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricseverity1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricseverityvalues1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricseverityvalues1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricdescription1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricdescription1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricreportkey1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricreportkey1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricreporttext1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricreporttext1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseveritycode1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseveritycode1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseverity1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.severity1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseverity1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.severity1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrentvalue1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrentvalue1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isthresholdvalue1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setthresholdvalue1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isisexplained1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setisexplained1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseveritycodeexplained1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseveritycodeexplained1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnotes1Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.notes1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnotes1Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.notes1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issnapshotid2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsnapshotid2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.snapshotid2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscollectiontime2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcollectiontime2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.collectiontime2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricseveritycode2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricseveritycode2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseveritycode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricseverity2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricseverity2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverity2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricseverityvalues2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricseverityvalues2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricseverityvalues2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricdescription2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricdescription2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricdescription2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricreportkey2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricreportkey2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreportkey2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetricreporttext2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetricreporttext2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.metricreporttext2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseveritycode2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseveritycode2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycode2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseverity2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.severity2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseverity2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.severity2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrentvalue2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrentvalue2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.currentvalue2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isthresholdvalue2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setthresholdvalue2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.thresholdvalue2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isisexplained2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setisexplained2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.isexplained2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseveritycodeexplained2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseveritycodeexplained2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.severitycodeexplained2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnotes2Null() {
                return this.IsNull(this.tableisp_sqlsecure_report_getassessmentcomparison.notes2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnotes2Null() {
                this[this.tableisp_sqlsecure_report_getassessmentcomparison.notes2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_getsnapshotcomparisonRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_getsnapshotcomparisonDataTable tableisp_sqlsecure_getsnapshotcomparison;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_getsnapshotcomparisonRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_getsnapshotcomparison = ((isp_sqlsecure_getsnapshotcomparisonDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int snapshotid {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotid\' in table \'isp_sqlsecure_getsnapshotcomparison\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int snapshotidold {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidoldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotidold\' in table \'isp_sqlsecure_getsnapshotcompariso" +
                                "n\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidoldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.connectionnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'connectionname\' in table \'isp_sqlsecure_getsnapshotcomparis" +
                                "on\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string difftype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.difftypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difftype\' in table \'isp_sqlsecure_getsnapshotcomparison\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.difftypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string difflevel {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.difflevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'difflevel\' in table \'isp_sqlsecure_getsnapshotcomparison\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.difflevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffobjecttable {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffobjecttable\' in table \'isp_sqlsecure_getsnapshotcompari" +
                                "son\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffobjecttype {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffobjecttype\' in table \'isp_sqlsecure_getsnapshotcomparis" +
                                "on\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffobjectname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjectnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffobjectname\' in table \'isp_sqlsecure_getsnapshotcomparis" +
                                "on\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjectnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffusername {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.diffusernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffusername\' in table \'isp_sqlsecure_getsnapshotcomparison" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.diffusernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffvaluename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.diffvaluenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffvaluename\' in table \'isp_sqlsecure_getsnapshotcompariso" +
                                "n\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.diffvaluenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string diffdbname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.diffdbnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'diffdbname\' in table \'isp_sqlsecure_getsnapshotcomparison\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.diffdbnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string oldid {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.oldidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'oldid\' in table \'isp_sqlsecure_getsnapshotcomparison\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.oldidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string newid {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.newidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newid\' in table \'isp_sqlsecure_getsnapshotcomparison\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.newidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string oldvalue {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.oldvalueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'oldvalue\' in table \'isp_sqlsecure_getsnapshotcomparison\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.oldvalueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string newvalue {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_getsnapshotcomparison.newvalueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'newvalue\' in table \'isp_sqlsecure_getsnapshotcomparison\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_getsnapshotcomparison.newvalueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnapshotidNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnapshotidNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnapshotidoldNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidoldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnapshotidoldNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.snapshotidoldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.connectionnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionnameNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.connectionnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifftypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.difftypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifftypeNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.difftypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdifflevelNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.difflevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdifflevelNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.difflevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffobjecttableNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffobjecttableNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffobjecttypeNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffobjecttypeNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjecttypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffobjectnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.diffobjectnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffobjectnameNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.diffobjectnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffusernameNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.diffusernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffusernameNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.diffusernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffvaluenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.diffvaluenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffvaluenameNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.diffvaluenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiffdbnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.diffdbnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiffdbnameNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.diffdbnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldidNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.oldidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldidNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.oldidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewidNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.newidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewidNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.newidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoldvalueNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.oldvalueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoldvalueNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.oldvalueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnewvalueNull() {
                return this.IsNull(this.tableisp_sqlsecure_getsnapshotcomparison.newvalueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnewvalueNull() {
                this[this.tableisp_sqlsecure_getsnapshotcomparison.newvalueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_getcomparesnapshotinfoRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_getcomparesnapshotinfoDataTable tableisp_sqlsecure_report_getcomparesnapshotinfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_getcomparesnapshotinfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_getcomparesnapshotinfo = ((isp_sqlsecure_report_getcomparesnapshotinfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.connectionnameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string servername {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.servernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'servername\' in table \'isp_sqlsecure_report_getcomparesnapsh" +
                                "otinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.servernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string instancename {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.instancenameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'instancename\' in table \'isp_sqlsecure_report_getcomparesnap" +
                                "shotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.instancenameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string authenticationmode {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.authenticationmodeColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.authenticationmodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string os {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.osColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'os\' in table \'isp_sqlsecure_report_getcomparesnapshotinfo\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.osColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.versionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'version\' in table \'isp_sqlsecure_report_getcomparesnapshoti" +
                                "nfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edition {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.editionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'edition\' in table \'isp_sqlsecure_report_getcomparesnapshoti" +
                                "nfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.editionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.statusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'status\' in table \'isp_sqlsecure_report_getcomparesnapshotin" +
                                "fo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime starttime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.starttimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'starttime\' in table \'isp_sqlsecure_report_getcomparesnapsho" +
                                "tinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.starttimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endtime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.endtimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'endtime\' in table \'isp_sqlsecure_report_getcomparesnapshoti" +
                                "nfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.endtimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string automated {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.automatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'automated\' in table \'isp_sqlsecure_report_getcomparesnapsho" +
                                "tinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.automatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numobject {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numobjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numobject\' in table \'isp_sqlsecure_report_getcomparesnapsho" +
                                "tinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numobjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numpermission {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numpermissionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numpermission\' in table \'isp_sqlsecure_report_getcomparesna" +
                                "pshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numpermissionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numlogin {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numloginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numlogin\' in table \'isp_sqlsecure_report_getcomparesnapshot" +
                                "info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numloginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int numwindowsgroupmember {
                get {
                    try {
                        return ((int)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numwindowsgroupmemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numwindowsgroupmember\' in table \'isp_sqlsecure_report_getco" +
                                "mparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numwindowsgroupmemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string baseline {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'baseline\' in table \'isp_sqlsecure_report_getcomparesnapshot" +
                                "info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string baselinecomment {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselinecommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'baselinecomment\' in table \'isp_sqlsecure_report_getcompares" +
                                "napshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselinecommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string snapshotcomment {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotcommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotcomment\' in table \'isp_sqlsecure_report_getcompares" +
                                "napshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotcommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string loginauditmode {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.loginauditmodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'loginauditmode\' in table \'isp_sqlsecure_report_getcomparesn" +
                                "apshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.loginauditmodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string enableproxyaccount {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enableproxyaccountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'enableproxyaccount\' in table \'isp_sqlsecure_report_getcompa" +
                                "resnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enableproxyaccountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string enablec2audittrace {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enablec2audittraceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'enablec2audittrace\' in table \'isp_sqlsecure_report_getcompa" +
                                "resnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enablec2audittraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string crossdbownershipchaining {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.crossdbownershipchainingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'crossdbownershipchaining\' in table \'isp_sqlsecure_report_ge" +
                                "tcomparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.crossdbownershipchainingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string casesensitivemode {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.casesensitivemodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'casesensitivemode\' in table \'isp_sqlsecure_report_getcompar" +
                                "esnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.casesensitivemodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hashkey {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hashkeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hashkey\' in table \'isp_sqlsecure_report_getcomparesnapshoti" +
                                "nfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hashkeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int snapshotid {
                get {
                    return ((int)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotidColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int registeredserverid {
                get {
                    return ((int)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.registeredserveridColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.registeredserveridColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string collectorversion {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.collectorversionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'collectorversion\' in table \'isp_sqlsecure_report_getcompare" +
                                "snapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.collectorversionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string allowsystemtableupdates {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.allowsystemtableupdatesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'allowsystemtableupdates\' in table \'isp_sqlsecure_report_get" +
                                "comparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.allowsystemtableupdatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remoteadminconnectionsenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteadminconnectionsenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'remoteadminconnectionsenabled\' in table \'isp_sqlsecure_repo" +
                                "rt_getcomparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteadminconnectionsenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remoteaccessenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteaccessenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'remoteaccessenabled\' in table \'isp_sqlsecure_report_getcomp" +
                                "aresnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteaccessenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scanforstartupprocsenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.scanforstartupprocsenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scanforstartupprocsenabled\' in table \'isp_sqlsecure_report_" +
                                "getcomparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.scanforstartupprocsenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sqlmailxpsenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sqlmailxpsenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sqlmailxpsenabled\' in table \'isp_sqlsecure_report_getcompar" +
                                "esnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sqlmailxpsenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string databasemailxpsenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.databasemailxpsenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'databasemailxpsenabled\' in table \'isp_sqlsecure_report_getc" +
                                "omparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.databasemailxpsenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string oleautomationproceduresenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.oleautomationproceduresenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'oleautomationproceduresenabled\' in table \'isp_sqlsecure_rep" +
                                "ort_getcomparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.oleautomationproceduresenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string webassistantproceduresenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.webassistantproceduresenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'webassistantproceduresenabled\' in table \'isp_sqlsecure_repo" +
                                "rt_getcomparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.webassistantproceduresenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xp_cmdshellenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.xp_cmdshellenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xp_cmdshellenabled\' in table \'isp_sqlsecure_report_getcompa" +
                                "resnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.xp_cmdshellenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string agentmailprofile {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentmailprofileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'agentmailprofile\' in table \'isp_sqlsecure_report_getcompare" +
                                "snapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentmailprofileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hideinstance {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hideinstanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hideinstance\' in table \'isp_sqlsecure_report_getcomparesnap" +
                                "shotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hideinstanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string agentsysadminonly {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentsysadminonlyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'agentsysadminonly\' in table \'isp_sqlsecure_report_getcompar" +
                                "esnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentsysadminonlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string serverisdomaincontroller {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.serverisdomaincontrollerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'serverisdomaincontroller\' in table \'isp_sqlsecure_report_ge" +
                                "tcomparesnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.serverisdomaincontrollerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string replicationenabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.replicationenabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'replicationenabled\' in table \'isp_sqlsecure_report_getcompa" +
                                "resnapshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.replicationenabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sapasswordempty {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sapasswordemptyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sapasswordempty\' in table \'isp_sqlsecure_report_getcompares" +
                                "napshotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sapasswordemptyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string snapshotname {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'snapshotname\' in table \'isp_sqlsecure_report_getcomparesnap" +
                                "shotinfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsservernameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.servernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetservernameNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.servernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinstancenameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.instancenameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinstancenameNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.instancenameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsosNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.osColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetosNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.osColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.versionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.versionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseditionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.editionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteditionNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.editionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.statusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstarttimeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.starttimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstarttimeNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.starttimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsendtimeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.endtimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetendtimeNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.endtimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsautomatedNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.automatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetautomatedNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.automatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumobjectNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numobjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumobjectNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numobjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumpermissionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numpermissionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumpermissionNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numpermissionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumloginNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numloginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumloginNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numloginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumwindowsgroupmemberNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numwindowsgroupmemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumwindowsgroupmemberNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.numwindowsgroupmemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbaselineNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbaselineNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbaselinecommentNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselinecommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbaselinecommentNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.baselinecommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnapshotcommentNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotcommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnapshotcommentNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotcommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsloginauditmodeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.loginauditmodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetloginauditmodeNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.loginauditmodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsenableproxyaccountNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enableproxyaccountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetenableproxyaccountNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enableproxyaccountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isenablec2audittraceNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enablec2audittraceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setenablec2audittraceNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.enablec2audittraceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscrossdbownershipchainingNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.crossdbownershipchainingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcrossdbownershipchainingNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.crossdbownershipchainingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscasesensitivemodeNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.casesensitivemodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcasesensitivemodeNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.casesensitivemodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshashkeyNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hashkeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethashkeyNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hashkeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscollectorversionNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.collectorversionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcollectorversionNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.collectorversionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsallowsystemtableupdatesNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.allowsystemtableupdatesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetallowsystemtableupdatesNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.allowsystemtableupdatesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremoteadminconnectionsenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteadminconnectionsenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremoteadminconnectionsenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteadminconnectionsenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremoteaccessenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteaccessenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremoteaccessenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.remoteaccessenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsscanforstartupprocsenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.scanforstartupprocsenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetscanforstartupprocsenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.scanforstartupprocsenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssqlmailxpsenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sqlmailxpsenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsqlmailxpsenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sqlmailxpsenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatabasemailxpsenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.databasemailxpsenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatabasemailxpsenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.databasemailxpsenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoleautomationproceduresenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.oleautomationproceduresenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoleautomationproceduresenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.oleautomationproceduresenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswebassistantproceduresenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.webassistantproceduresenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwebassistantproceduresenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.webassistantproceduresenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isxp_cmdshellenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.xp_cmdshellenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setxp_cmdshellenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.xp_cmdshellenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsagentmailprofileNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentmailprofileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetagentmailprofileNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentmailprofileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshideinstanceNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hideinstanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethideinstanceNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.hideinstanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsagentsysadminonlyNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentsysadminonlyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetagentsysadminonlyNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.agentsysadminonlyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsserverisdomaincontrollerNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.serverisdomaincontrollerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetserverisdomaincontrollerNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.serverisdomaincontrollerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreplicationenabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.replicationenabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreplicationenabledNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.replicationenabledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssapasswordemptyNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sapasswordemptyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsapasswordemptyNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.sapasswordemptyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssnapshotnameNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsnapshotnameNull() {
                this[this.tableisp_sqlsecure_report_getcomparesnapshotinfo.snapshotnameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class isp_sqlsecure_report_checkweakpasswordRow : global::System.Data.DataRow {
            
            private isp_sqlsecure_report_checkweakpasswordDataTable tableisp_sqlsecure_report_checkweakpassword;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal isp_sqlsecure_report_checkweakpasswordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableisp_sqlsecure_report_checkweakpassword = ((isp_sqlsecure_report_checkweakpasswordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionname {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_checkweakpassword.connectionnameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkweakpassword.connectionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableisp_sqlsecure_report_checkweakpassword.nameColumn]));
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkweakpassword.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string passwordstatus {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkweakpassword.passwordstatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'passwordstatus\' in table \'isp_sqlsecure_report_checkweakpas" +
                                "sword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkweakpassword.passwordstatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string disabled {
                get {
                    try {
                        return ((string)(this[this.tableisp_sqlsecure_report_checkweakpassword.disabledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'disabled\' in table \'isp_sqlsecure_report_checkweakpassword\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableisp_sqlsecure_report_checkweakpassword.disabledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspasswordstatusNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkweakpassword.passwordstatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpasswordstatusNull() {
                this[this.tableisp_sqlsecure_report_checkweakpassword.passwordstatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdisabledNull() {
                return this.IsNull(this.tableisp_sqlsecure_report_checkweakpassword.disabledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdisabledNull() {
                this[this.tableisp_sqlsecure_report_checkweakpassword.disabledColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getguestenabledserversRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getguestenabledserversRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getguestenabledserversRowChangeEvent(isp_sqlsecure_report_getguestenabledserversRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getguestenabledserversRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getserveraccessRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getserveraccessRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getserveraccessRowChangeEvent(isp_sqlsecure_report_getserveraccessRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getserveraccessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_authenticationRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_authenticationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_authenticationRowChangeEvent(isp_sqlsecure_report_authenticationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_authenticationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_checkwellknowngroupRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_checkwellknowngroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkwellknowngroupRowChangeEvent(isp_sqlsecure_report_checkwellknowngroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkwellknowngroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_sysadmin_administratorRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_sysadmin_administratorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_sysadmin_administratorRowChangeEvent(isp_sqlsecure_report_sysadmin_administratorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_sysadmin_administratorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_orphanedloginsRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_orphanedloginsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_orphanedloginsRowChangeEvent(isp_sqlsecure_report_orphanedloginsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_orphanedloginsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_dbuserfixedroleRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_dbuserfixedroleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_dbuserfixedroleRowChangeEvent(isp_sqlsecure_report_dbuserfixedroleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_dbuserfixedroleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_checkcmdshellRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_checkcmdshellRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkcmdshellRowChangeEvent(isp_sqlsecure_report_checkcmdshellRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkcmdshellRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getuserinfoRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getuserinfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserinfoRowChangeEvent(isp_sqlsecure_report_getuserinfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_checkdbchainingRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_checkdbchainingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkdbchainingRowChangeEvent(isp_sqlsecure_report_checkdbchainingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkdbchainingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_checksystemstoredproceduresRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_checksystemstoredproceduresRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checksystemstoredproceduresRowChangeEvent(isp_sqlsecure_report_checksystemstoredproceduresRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checksystemstoredproceduresRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_checkxpmailRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_checkxpmailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkxpmailRowChangeEvent(isp_sqlsecure_report_checkxpmailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkxpmailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getauditfiltersRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getauditfiltersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditfiltersRowChangeEvent(isp_sqlsecure_report_getauditfiltersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditfiltersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getuserpermissionsRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getuserpermissionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserpermissionsRowChangeEvent(isp_sqlsecure_report_getuserpermissionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserpermissionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getuserdatabasepermissionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserdatabasepermissionsRowChangeEvent(isp_sqlsecure_report_getuserdatabasepermissionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getuserdatabasepermissionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getauditedinstancesRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getauditedinstancesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditedinstancesRowChangeEvent(isp_sqlsecure_report_getauditedinstancesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getauditedinstancesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getassessmentcomparisonRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getassessmentcomparisonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getassessmentcomparisonRowChangeEvent(isp_sqlsecure_report_getassessmentcomparisonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getassessmentcomparisonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_getsnapshotcomparisonRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_getsnapshotcomparisonRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_getsnapshotcomparisonRowChangeEvent(isp_sqlsecure_getsnapshotcomparisonRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_getsnapshotcomparisonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_getcomparesnapshotinfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getcomparesnapshotinfoRowChangeEvent(isp_sqlsecure_report_getcomparesnapshotinfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_getcomparesnapshotinfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class isp_sqlsecure_report_checkweakpasswordRowChangeEvent : global::System.EventArgs {
            
            private isp_sqlsecure_report_checkweakpasswordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkweakpasswordRowChangeEvent(isp_sqlsecure_report_checkweakpasswordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public isp_sqlsecure_report_checkweakpasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Idera.SQLsecure.UI.Console.Reports.ReportsDatasetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getguestenabledserversTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getguestenabledserversTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getguestenabledservers";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("databasename", "databasename");
            tableMapping.ColumnMappings.Add("owner", "owner");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getguestenabledservers";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@connectionname", global::System.Data.SqlDbType.NVarChar, 400, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getguestenabledserversDataTable dataTable, string connectionname) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((connectionname == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(connectionname));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getguestenabledserversDataTable GetData(string connectionname) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((connectionname == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(connectionname));
            }
            ReportsDataset.isp_sqlsecure_report_getguestenabledserversDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getguestenabledserversDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getserveraccessTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getserveraccessTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getserveraccess";
            tableMapping.ColumnMappings.Add("snapshotid", "snapshotid");
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("logintype", "logintype");
            tableMapping.ColumnMappings.Add("loginname", "loginname");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getserveraccess";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@logintype", global::System.Data.SqlDbType.NChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inputsid", global::System.Data.SqlDbType.VarBinary, 85, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sqllogin", global::System.Data.SqlDbType.NVarChar, 128, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getserveraccessDataTable dataTable, string logintype, byte[] inputsid, string sqllogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((logintype == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(logintype));
            }
            if ((inputsid == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((byte[])(inputsid));
            }
            if ((sqllogin == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(sqllogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getserveraccessDataTable GetData(string logintype, byte[] inputsid, string sqllogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((logintype == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(logintype));
            }
            if ((inputsid == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((byte[])(inputsid));
            }
            if ((sqllogin == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(sqllogin));
            }
            ReportsDataset.isp_sqlsecure_report_getserveraccessDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getserveraccessDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_authenticationTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_authenticationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_authentication";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_authentication";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_authenticationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_authenticationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_authenticationDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_authenticationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_checkwellknowngroupTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_checkwellknowngroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_checkwellknowngroup";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("groupname", "groupname");
            tableMapping.ColumnMappings.Add("access", "access");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_checkwellknowngroup";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rundate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_checkwellknowngroupDataTable dataTable, global::System.Nullable<global::System.DateTime> rundate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_checkwellknowngroupDataTable GetData(global::System.Nullable<global::System.DateTime> rundate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ReportsDataset.isp_sqlsecure_report_checkwellknowngroupDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_checkwellknowngroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_sysadmin_administratorTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_sysadmin_administratorTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_sysadmin_administrator";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("login", "login");
            tableMapping.ColumnMappings.Add("fixedrole", "fixedrole");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_sysadmin_administrator";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_sysadmin_administratorDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_sysadmin_administratorDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_sysadmin_administratorDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_sysadmin_administratorDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_orphanedloginsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_orphanedloginsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_orphanedlogins";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("state", "state");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_orphanedlogins";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_orphanedloginsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_orphanedloginsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_orphanedloginsDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_orphanedloginsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_dbuserfixedroleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_dbuserfixedroleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_dbuserfixedrole";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("databasename", "databasename");
            tableMapping.ColumnMappings.Add("username", "username");
            tableMapping.ColumnMappings.Add("role", "role");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_dbuserfixedrole";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_dbuserfixedroleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_dbuserfixedroleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_dbuserfixedroleDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_dbuserfixedroleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_checkcmdshellTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_checkcmdshellTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_checkcmdshell";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("databasename", "databasename");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_checkcmdshell";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_checkcmdshellDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_checkcmdshellDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_checkcmdshellDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_checkcmdshellDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getuserinfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getuserinfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getuserinfo";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("loginname", "loginname");
            tableMapping.ColumnMappings.Add("logintype", "logintype");
            tableMapping.ColumnMappings.Add("databasename", "databasename");
            tableMapping.ColumnMappings.Add("username", "username");
            tableMapping.ColumnMappings.Add("isalias", "isalias");
            tableMapping.ColumnMappings.Add("hasaccess", "hasaccess");
            tableMapping.ColumnMappings.Add("defaultschema", "defaultschema");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getuserinfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getuserinfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getuserinfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_getuserinfoDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getuserinfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_checkdbchainingTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_checkdbchainingTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_checkdbchaining";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_checkdbchaining";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rundate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_checkdbchainingDataTable dataTable, global::System.Nullable<global::System.DateTime> rundate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_checkdbchainingDataTable GetData(global::System.Nullable<global::System.DateTime> rundate) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            ReportsDataset.isp_sqlsecure_report_checkdbchainingDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_checkdbchainingDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_checksystemstoredproceduresTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_checksystemstoredproceduresTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_checksystemstoredprocedures";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("databasename", "databasename");
            tableMapping.ColumnMappings.Add("username", "username");
            tableMapping.ColumnMappings.Add("objectname", "objectname");
            tableMapping.ColumnMappings.Add("permission", "permission");
            tableMapping.ColumnMappings.Add("isgrant", "isgrant");
            tableMapping.ColumnMappings.Add("isgrantwith", "isgrantwith");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_checksystemstoredprocedures";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_checksystemstoredproceduresDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_checksystemstoredproceduresDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_checksystemstoredproceduresDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_checksystemstoredproceduresDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_checkxpmailTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_checkxpmailTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_checkxpmail";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("name", "name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_checkxpmail";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_checkxpmailDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_checkxpmailDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_checkxpmailDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_checkxpmailDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getauditfiltersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getauditfiltersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getauditfilters";
            tableMapping.ColumnMappings.Add("servername", "servername");
            tableMapping.ColumnMappings.Add("rulename", "rulename");
            tableMapping.ColumnMappings.Add("ruledescription", "ruledescription");
            tableMapping.ColumnMappings.Add("modifiedby", "modifiedby");
            tableMapping.ColumnMappings.Add("modifiedon", "modifiedon");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("scope", "scope");
            tableMapping.ColumnMappings.Add("namematchstring", "namematchstring");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getauditfilters";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getauditfiltersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getauditfiltersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ReportsDataset.isp_sqlsecure_report_getauditfiltersDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getauditfiltersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getuserpermissionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getuserpermissionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getuserpermissions";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("loginname", "loginname");
            tableMapping.ColumnMappings.Add("logintype", "logintype");
            tableMapping.ColumnMappings.Add("serveraccess", "serveraccess");
            tableMapping.ColumnMappings.Add("disabled", "disabled");
            tableMapping.ColumnMappings.Add("role", "role");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getuserpermissions";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rundate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user", global::System.Data.SqlDbType.NVarChar, 400, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@server", global::System.Data.SqlDbType.NVarChar, 400, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@usertype", global::System.Data.SqlDbType.NVarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getuserpermissionsDataTable dataTable, global::System.Nullable<global::System.DateTime> rundate, string user, string server, string usertype) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(user));
            }
            if ((server == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(server));
            }
            if ((usertype == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(usertype));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getuserpermissionsDataTable GetData(global::System.Nullable<global::System.DateTime> rundate, string user, string server, string usertype) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(user));
            }
            if ((server == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(server));
            }
            if ((usertype == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(usertype));
            }
            ReportsDataset.isp_sqlsecure_report_getuserpermissionsDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getuserpermissionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getuserdatabasepermissionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getuserdatabasepermissionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getuserdatabasepermissions";
            tableMapping.ColumnMappings.Add("snapshotid", "snapshotid");
            tableMapping.ColumnMappings.Add("permissionlevel", "permissionlevel");
            tableMapping.ColumnMappings.Add("logintype", "logintype");
            tableMapping.ColumnMappings.Add("loginname", "loginname");
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("databasename", "databasename");
            tableMapping.ColumnMappings.Add("principalid", "principalid");
            tableMapping.ColumnMappings.Add("principalname", "principalname");
            tableMapping.ColumnMappings.Add("principaltype", "principaltype");
            tableMapping.ColumnMappings.Add("databaseprincipal", "databaseprincipal");
            tableMapping.ColumnMappings.Add("databaseprincipaltype", "databaseprincipaltype");
            tableMapping.ColumnMappings.Add("grantor", "grantor");
            tableMapping.ColumnMappings.Add("grantorname", "grantorname");
            tableMapping.ColumnMappings.Add("grantee", "grantee");
            tableMapping.ColumnMappings.Add("granteename", "granteename");
            tableMapping.ColumnMappings.Add("classid", "classid");
            tableMapping.ColumnMappings.Add("permissiontype", "permissiontype");
            tableMapping.ColumnMappings.Add("coveringfrom", "coveringfrom");
            tableMapping.ColumnMappings.Add("permission", "permission");
            tableMapping.ColumnMappings.Add("isgrant", "isgrant");
            tableMapping.ColumnMappings.Add("isgrantwith", "isgrantwith");
            tableMapping.ColumnMappings.Add("isrevoke", "isrevoke");
            tableMapping.ColumnMappings.Add("isdeny", "isdeny");
            tableMapping.ColumnMappings.Add("parentobjectid", "parentobjectid");
            tableMapping.ColumnMappings.Add("objectid", "objectid");
            tableMapping.ColumnMappings.Add("objectname", "objectname");
            tableMapping.ColumnMappings.Add("qualifiedname", "qualifiedname");
            tableMapping.ColumnMappings.Add("objecttype", "objecttype");
            tableMapping.ColumnMappings.Add("schemaid", "schemaid");
            tableMapping.ColumnMappings.Add("schemaname", "schemaname");
            tableMapping.ColumnMappings.Add("owner", "owner");
            tableMapping.ColumnMappings.Add("ownername", "ownername");
            tableMapping.ColumnMappings.Add("isaliased", "isaliased");
            tableMapping.ColumnMappings.Add("inherited", "inherited");
            tableMapping.ColumnMappings.Add("sourcename", "sourcename");
            tableMapping.ColumnMappings.Add("sourcetype", "sourcetype");
            tableMapping.ColumnMappings.Add("sourcepermission", "sourcepermission");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getuserdatabasepermissions";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rundate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user", global::System.Data.SqlDbType.NVarChar, 400, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@server", global::System.Data.SqlDbType.NVarChar, 400, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@permission", global::System.Data.SqlDbType.NVarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@usertype", global::System.Data.SqlDbType.NVarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getuserdatabasepermissionsDataTable dataTable, global::System.Nullable<global::System.DateTime> rundate, string user, string server, string permission, string usertype) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(user));
            }
            if ((server == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(server));
            }
            if ((permission == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(permission));
            }
            if ((usertype == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(usertype));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getuserdatabasepermissionsDataTable GetData(global::System.Nullable<global::System.DateTime> rundate, string user, string server, string permission, string usertype) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((user == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(user));
            }
            if ((server == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(server));
            }
            if ((permission == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(permission));
            }
            if ((usertype == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(usertype));
            }
            ReportsDataset.isp_sqlsecure_report_getuserdatabasepermissionsDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getuserdatabasepermissionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getauditedinstancesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getauditedinstancesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getauditedinstances";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("servername", "servername");
            tableMapping.ColumnMappings.Add("instancename", "instancename");
            tableMapping.ColumnMappings.Add("version", "version");
            tableMapping.ColumnMappings.Add("edition", "edition");
            tableMapping.ColumnMappings.Add("authenticationmode", "authenticationmode");
            tableMapping.ColumnMappings.Add("os", "os");
            tableMapping.ColumnMappings.Add("loginauditmode", "loginauditmode");
            tableMapping.ColumnMappings.Add("enableproxyaccount", "enableproxyaccount");
            tableMapping.ColumnMappings.Add("enablec2audittrace", "enablec2audittrace");
            tableMapping.ColumnMappings.Add("crossdbownershipchaining", "crossdbownershipchaining");
            tableMapping.ColumnMappings.Add("casesensitivemode", "casesensitivemode");
            tableMapping.ColumnMappings.Add("numwindowsuser", "numwindowsuser");
            tableMapping.ColumnMappings.Add("numwindowsgroup", "numwindowsgroup");
            tableMapping.ColumnMappings.Add("numsqllogin", "numsqllogin");
            tableMapping.ColumnMappings.Add("snapshottime", "snapshottime");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=secureui\\casesensitive;Initial Catalog=SQLsecure;Integrated Security=" +
                "True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getauditedinstances";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rundate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@connectionname", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getauditedinstancesDataTable dataTable, global::System.Nullable<global::System.DateTime> rundate, string connectionname) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((connectionname == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(connectionname));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getauditedinstancesDataTable GetData(global::System.Nullable<global::System.DateTime> rundate, string connectionname) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((connectionname == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(connectionname));
            }
            ReportsDataset.isp_sqlsecure_report_getauditedinstancesDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getauditedinstancesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getassessmentcomparisonTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getassessmentcomparisonTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getassessmentcomparison";
            tableMapping.ColumnMappings.Add("policyid", "policyid");
            tableMapping.ColumnMappings.Add("assessmentid1", "assessmentid1");
            tableMapping.ColumnMappings.Add("assessmentid2", "assessmentid2");
            tableMapping.ColumnMappings.Add("registeredserverid", "registeredserverid");
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("metricid", "metricid");
            tableMapping.ColumnMappings.Add("metricname", "metricname");
            tableMapping.ColumnMappings.Add("metrictype", "metrictype");
            tableMapping.ColumnMappings.Add("differencesfound", "differencesfound");
            tableMapping.ColumnMappings.Add("diffreportsettings", "diffreportsettings");
            tableMapping.ColumnMappings.Add("diffreportsettingstext", "diffreportsettingstext");
            tableMapping.ColumnMappings.Add("diffmetricsettings", "diffmetricsettings");
            tableMapping.ColumnMappings.Add("diffmetricsettingstext", "diffmetricsettingstext");
            tableMapping.ColumnMappings.Add("difffindings", "difffindings");
            tableMapping.ColumnMappings.Add("difffindingstext", "difffindingstext");
            tableMapping.ColumnMappings.Add("diffnotes", "diffnotes");
            tableMapping.ColumnMappings.Add("diffnotestext", "diffnotestext");
            tableMapping.ColumnMappings.Add("snapshotid1", "snapshotid1");
            tableMapping.ColumnMappings.Add("collectiontime1", "collectiontime1");
            tableMapping.ColumnMappings.Add("metricseveritycode1", "metricseveritycode1");
            tableMapping.ColumnMappings.Add("metricseverity1", "metricseverity1");
            tableMapping.ColumnMappings.Add("metricseverityvalues1", "metricseverityvalues1");
            tableMapping.ColumnMappings.Add("metricdescription1", "metricdescription1");
            tableMapping.ColumnMappings.Add("metricreportkey1", "metricreportkey1");
            tableMapping.ColumnMappings.Add("metricreporttext1", "metricreporttext1");
            tableMapping.ColumnMappings.Add("severitycode1", "severitycode1");
            tableMapping.ColumnMappings.Add("severity1", "severity1");
            tableMapping.ColumnMappings.Add("currentvalue1", "currentvalue1");
            tableMapping.ColumnMappings.Add("thresholdvalue1", "thresholdvalue1");
            tableMapping.ColumnMappings.Add("isexplained1", "isexplained1");
            tableMapping.ColumnMappings.Add("severitycodeexplained1", "severitycodeexplained1");
            tableMapping.ColumnMappings.Add("notes1", "notes1");
            tableMapping.ColumnMappings.Add("snapshotid2", "snapshotid2");
            tableMapping.ColumnMappings.Add("collectiontime2", "collectiontime2");
            tableMapping.ColumnMappings.Add("metricseveritycode2", "metricseveritycode2");
            tableMapping.ColumnMappings.Add("metricseverity2", "metricseverity2");
            tableMapping.ColumnMappings.Add("metricseverityvalues2", "metricseverityvalues2");
            tableMapping.ColumnMappings.Add("metricdescription2", "metricdescription2");
            tableMapping.ColumnMappings.Add("metricreportkey2", "metricreportkey2");
            tableMapping.ColumnMappings.Add("metricreporttext2", "metricreporttext2");
            tableMapping.ColumnMappings.Add("severitycode2", "severitycode2");
            tableMapping.ColumnMappings.Add("severity2", "severity2");
            tableMapping.ColumnMappings.Add("currentvalue2", "currentvalue2");
            tableMapping.ColumnMappings.Add("thresholdvalue2", "thresholdvalue2");
            tableMapping.ColumnMappings.Add("isexplained2", "isexplained2");
            tableMapping.ColumnMappings.Add("severitycodeexplained2", "severitycodeexplained2");
            tableMapping.ColumnMappings.Add("notes2", "notes2");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLsecure.UI.Console.Properties.Settings.Default.SQLsecureConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_getassessmentcomparison";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@policyid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assessmentid1", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assessmentid2", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@registeredserverid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@diffsonly", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getassessmentcomparisonDataTable dataTable, global::System.Nullable<int> policyid, global::System.Nullable<int> assessmentid1, global::System.Nullable<int> assessmentid2, global::System.Nullable<int> registeredserverid, global::System.Nullable<bool> diffsonly) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((policyid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(policyid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((assessmentid1.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(assessmentid1.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((assessmentid2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(assessmentid2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((registeredserverid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(registeredserverid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((diffsonly.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((bool)(diffsonly.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getassessmentcomparisonDataTable GetData(global::System.Nullable<int> policyid, global::System.Nullable<int> assessmentid1, global::System.Nullable<int> assessmentid2, global::System.Nullable<int> registeredserverid, global::System.Nullable<bool> diffsonly) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((policyid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(policyid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((assessmentid1.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(assessmentid1.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((assessmentid2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(assessmentid2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((registeredserverid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[4].Value = ((int)(registeredserverid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((diffsonly.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[5].Value = ((bool)(diffsonly.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            ReportsDataset.isp_sqlsecure_report_getassessmentcomparisonDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getassessmentcomparisonDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_getsnapshotcomparisonTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_getsnapshotcomparisonTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_getsnapshotcomparison";
            tableMapping.ColumnMappings.Add("snapshotid", "snapshotid");
            tableMapping.ColumnMappings.Add("snapshotidold", "snapshotidold");
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("difftype", "difftype");
            tableMapping.ColumnMappings.Add("difflevel", "difflevel");
            tableMapping.ColumnMappings.Add("diffobjecttable", "diffobjecttable");
            tableMapping.ColumnMappings.Add("diffobjecttype", "diffobjecttype");
            tableMapping.ColumnMappings.Add("diffobjectname", "diffobjectname");
            tableMapping.ColumnMappings.Add("diffusername", "diffusername");
            tableMapping.ColumnMappings.Add("diffvaluename", "diffvaluename");
            tableMapping.ColumnMappings.Add("diffdbname", "diffdbname");
            tableMapping.ColumnMappings.Add("oldid", "oldid");
            tableMapping.ColumnMappings.Add("newid", "newid");
            tableMapping.ColumnMappings.Add("oldvalue", "oldvalue");
            tableMapping.ColumnMappings.Add("newvalue", "newvalue");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=msodevsecure20;Initial Catalog=SQLsecure;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_getsnapshotcomparison";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@snapshotid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@snapshotid2", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_getsnapshotcomparisonDataTable dataTable, global::System.Nullable<int> snapshotid, global::System.Nullable<int> snapshotid2) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((snapshotid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(snapshotid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((snapshotid2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(snapshotid2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_getsnapshotcomparisonDataTable GetData(global::System.Nullable<int> snapshotid, global::System.Nullable<int> snapshotid2) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((snapshotid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(snapshotid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((snapshotid2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(snapshotid2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            ReportsDataset.isp_sqlsecure_getsnapshotcomparisonDataTable dataTable = new ReportsDataset.isp_sqlsecure_getsnapshotcomparisonDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_getcomparesnapshotinfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_getcomparesnapshotinfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_getcomparesnapshotinfo";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("servername", "servername");
            tableMapping.ColumnMappings.Add("instancename", "instancename");
            tableMapping.ColumnMappings.Add("authenticationmode", "authenticationmode");
            tableMapping.ColumnMappings.Add("os", "os");
            tableMapping.ColumnMappings.Add("version", "version");
            tableMapping.ColumnMappings.Add("edition", "edition");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("starttime", "starttime");
            tableMapping.ColumnMappings.Add("endtime", "endtime");
            tableMapping.ColumnMappings.Add("automated", "automated");
            tableMapping.ColumnMappings.Add("numobject", "numobject");
            tableMapping.ColumnMappings.Add("numpermission", "numpermission");
            tableMapping.ColumnMappings.Add("numlogin", "numlogin");
            tableMapping.ColumnMappings.Add("numwindowsgroupmember", "numwindowsgroupmember");
            tableMapping.ColumnMappings.Add("baseline", "baseline");
            tableMapping.ColumnMappings.Add("baselinecomment", "baselinecomment");
            tableMapping.ColumnMappings.Add("snapshotcomment", "snapshotcomment");
            tableMapping.ColumnMappings.Add("loginauditmode", "loginauditmode");
            tableMapping.ColumnMappings.Add("enableproxyaccount", "enableproxyaccount");
            tableMapping.ColumnMappings.Add("enablec2audittrace", "enablec2audittrace");
            tableMapping.ColumnMappings.Add("crossdbownershipchaining", "crossdbownershipchaining");
            tableMapping.ColumnMappings.Add("casesensitivemode", "casesensitivemode");
            tableMapping.ColumnMappings.Add("hashkey", "hashkey");
            tableMapping.ColumnMappings.Add("snapshotid", "snapshotid");
            tableMapping.ColumnMappings.Add("registeredserverid", "registeredserverid");
            tableMapping.ColumnMappings.Add("collectorversion", "collectorversion");
            tableMapping.ColumnMappings.Add("allowsystemtableupdates", "allowsystemtableupdates");
            tableMapping.ColumnMappings.Add("remoteadminconnectionsenabled", "remoteadminconnectionsenabled");
            tableMapping.ColumnMappings.Add("remoteaccessenabled", "remoteaccessenabled");
            tableMapping.ColumnMappings.Add("scanforstartupprocsenabled", "scanforstartupprocsenabled");
            tableMapping.ColumnMappings.Add("sqlmailxpsenabled", "sqlmailxpsenabled");
            tableMapping.ColumnMappings.Add("databasemailxpsenabled", "databasemailxpsenabled");
            tableMapping.ColumnMappings.Add("oleautomationproceduresenabled", "oleautomationproceduresenabled");
            tableMapping.ColumnMappings.Add("webassistantproceduresenabled", "webassistantproceduresenabled");
            tableMapping.ColumnMappings.Add("xp_cmdshellenabled", "xp_cmdshellenabled");
            tableMapping.ColumnMappings.Add("agentmailprofile", "agentmailprofile");
            tableMapping.ColumnMappings.Add("hideinstance", "hideinstance");
            tableMapping.ColumnMappings.Add("agentsysadminonly", "agentsysadminonly");
            tableMapping.ColumnMappings.Add("serverisdomaincontroller", "serverisdomaincontroller");
            tableMapping.ColumnMappings.Add("replicationenabled", "replicationenabled");
            tableMapping.ColumnMappings.Add("sapasswordempty", "sapasswordempty");
            tableMapping.ColumnMappings.Add("snapshotname", "snapshotname");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=msodevsecure20;Initial Catalog=SQLsecure;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_getcomparesnapshotinfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@snapshotid1", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@snapshotid2", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_getcomparesnapshotinfoDataTable dataTable, global::System.Nullable<int> snapshotid1, global::System.Nullable<int> snapshotid2) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((snapshotid1.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(snapshotid1.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((snapshotid2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(snapshotid2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_getcomparesnapshotinfoDataTable GetData(global::System.Nullable<int> snapshotid1, global::System.Nullable<int> snapshotid2) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((snapshotid1.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(snapshotid1.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((snapshotid2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(snapshotid2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            ReportsDataset.isp_sqlsecure_report_getcomparesnapshotinfoDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_getcomparesnapshotinfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class isp_sqlsecure_report_checkweakpasswordTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public isp_sqlsecure_report_checkweakpasswordTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "isp_sqlsecure_report_checkweakpassword";
            tableMapping.ColumnMappings.Add("connectionname", "connectionname");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("passwordstatus", "passwordstatus");
            tableMapping.ColumnMappings.Add("disabled", "disabled");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Idera.SQLsecure.UI.Console.Properties.Settings.Default.SQLsecureConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.isp_sqlsecure_report_checkweakpassword";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rundate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@policyid", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@usebaseline", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serverName", global::System.Data.SqlDbType.NVarChar, 400, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ReportsDataset.isp_sqlsecure_report_checkweakpasswordDataTable dataTable, global::System.Nullable<global::System.DateTime> rundate, global::System.Nullable<int> policyid, global::System.Nullable<bool> usebaseline, string serverName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((policyid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(policyid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((usebaseline.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((bool)(usebaseline.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((serverName == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(serverName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ReportsDataset.isp_sqlsecure_report_checkweakpasswordDataTable GetData(global::System.Nullable<global::System.DateTime> rundate, global::System.Nullable<int> policyid, global::System.Nullable<bool> usebaseline, string serverName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((rundate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(rundate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((policyid.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(policyid.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((usebaseline.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((bool)(usebaseline.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((serverName == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(serverName));
            }
            ReportsDataset.isp_sqlsecure_report_checkweakpasswordDataTable dataTable = new ReportsDataset.isp_sqlsecure_report_checkweakpasswordDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591