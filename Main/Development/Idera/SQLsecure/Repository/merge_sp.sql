use [SQLsecure]



/****** Object:  StoredProcedure [dbo].[isp_AssignTagsToServer]    Script Date: 7/21/2016 5:48:13 AM ******/
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[isp_AssignTagsToServer]
    @tag_ids NVARCHAR(MAX) = NULL ,
    @server_id INT
AS
    BEGIN
        DECLARE @delimiter AS NVARCHAR(1);
        SET @delimiter = ',';
        IF ISNULL(@tag_ids, '') = ''
            BEGIN 
    
                INSERT  INTO dbo.server_tags
                        SELECT  @server_id ,
                                tag_id
                        FROM    tags t
                        WHERE   is_default = 1
                                AND NOT EXISTS ( SELECT 1
                                                 FROM   server_tags st
                                                 WHERE  st.tag_id = t.tag_id
                                                        AND st.server_id = @server_id );
            END;
        ELSE
            BEGIN 
                INSERT  INTO dbo.server_tags
                        SELECT  @server_id ,
                                Value
                        FROM    dbo.splitbydelimiter(@tag_ids, @delimiter)
                        WHERE   NOT EXISTS ( SELECT 1
                                             FROM   server_tags st
                                             WHERE  st.tag_id = Value
                                                    AND st.server_id = @server_id );
	

            END;
    END;

	

SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[isp_AssignTagToServers]
    @tag_id INT ,
    @servers NVARCHAR(MAX)
AS
    BEGIN
        DECLARE @delimiter AS NVARCHAR(1);
        SET @delimiter = ',';
        INSERT  INTO dbo.server_tags
                SELECT  registeredserverid ,
                        @tag_id
                FROM    dbo.registeredserver r
                WHERE   r.connectionname COLLATE SQL_Latin1_General_CP1_CI_AS IN (
                        SELECT  Value
                        FROM    dbo.splitbydelimiter(@servers, @delimiter) )
                        AND r.registeredserverid NOT IN ( SELECT
                                                              server_id
                                                          FROM
                                                              server_tags
                                                          WHERE
                                                              tag_id = @tag_id );

      
    END;


SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[isp_DeleteTag] @tag_id INT
AS
    BEGIN
        DELETE  FROM tags
        WHERE   tag_id = @tag_id
                AND ISNULL(is_default, 0) = 0;

      
    END;
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[isp_GetServersByTag]
    @tag_name NVARCHAR(250) = NULL ,
    @tag_id INT = NULL
AS
    BEGIN
        SELECT  rs.connectionname  ,
                rs.registeredserverid ,
                st.tag_id
        FROM    dbo.registeredserver rs
                JOIN dbo.server_tags st ON st.server_id = rs.registeredserverid
                JOIN dbo.tags t ON t.tag_id = st.tag_id
        WHERE   ( @tag_name IS NULL
                  AND @tag_id = t.tag_id
                )
                OR ( @tag_id IS NULL
                     AND t.name = @tag_name
                   );
    END;


SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[isp_GetTags]
    @tag_name NVARCHAR(250) = NULL ,
    @tag_id INT = NULL
AS
    BEGIN
        SELECT  t.tag_id ,
                t.name ,
                t.description ,
                ISNULL(t.is_default, 0) AS is_default
        FROM    dbo.tags t
        WHERE   ( @tag_name IS NULL
                  AND @tag_id = t.tag_id
                )
                OR ( @tag_id IS NULL
                     AND t.name COLLATE SQL_Latin1_General_CP1_CI_AS = @tag_name COLLATE SQL_Latin1_General_CP1_CI_AS
                   )
                OR ( @tag_name IS NULL
                     AND @tag_id IS NULL
                   );

        SELECT  st.tag_id ,
                rs.connectionname ,
                rs.registeredserverid
        FROM    dbo.registeredserver rs
                JOIN dbo.server_tags st ON st.server_id = rs.registeredserverid
                JOIN dbo.tags t ON t.tag_id = st.tag_id
        WHERE   ( @tag_name IS NULL
                  AND @tag_id = t.tag_id
                )
                OR ( @tag_id IS NULL
                     AND t.name COLLATE SQL_Latin1_General_CP1_CI_AS = @tag_name COLLATE SQL_Latin1_General_CP1_CI_AS
                   );

    END;


SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[isp_InsertUpdateTag]
    @tag_id INT = NULL ,
    @tag_name NVARCHAR(250) ,
    @description NVARCHAR(500)
AS
    BEGIN
        IF @tag_id IS NOT NULL
            BEGIN
                UPDATE  dbo.tags
                SET     name = @tag_name ,
                        description = @description
                WHERE   tag_id = @tag_id;
            END;
        ELSE
            BEGIN
                INSERT  INTO dbo.tags
                        ( name, description )
                VALUES  ( @tag_name, -- name - nvarchar(250)
                          @description-- description - nvarchar(500)
                          );
            END;
    
    END;

SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[isp_RemoveServerFromTag]
    @tag_id INT ,
    @server_id INT
AS
    BEGIN
        DELETE  FROM dbo.server_tags
        WHERE   server_id = @server_id
                AND tag_id = @tag_id;

    END;

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addactivitylog]'))
drop procedure [dbo].[isp_sqlsecure_addactivitylog]
GO

CREATE procedure [dbo].[isp_sqlsecure_addactivitylog] (@activitytype nvarchar(256), @source nvarchar(64), @eventcode nvarchar(64), @category nvarchar(64), @description nvarchar(1000), @connectionname NVARCHAR(400))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Add an entry to the application activity log table
   --

	declare @err int
	declare @errmsg nvarchar(500)

	BEGIN TRAN
	
		insert into applicationactivity (eventtimestamp, activitytype, applicationsource, connectionname, serverlogin, eventcode, category, description) values (GETUTCDATE(), @activitytype, @source, @connectionname, SYSTEM_USER, @eventcode, @category, @description)

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to insert into application activity log table'
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

	COMMIT TRAN

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_addactivitylog] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addallregisteredserverinfo]'))
drop procedure [dbo].[isp_sqlsecure_addallregisteredserverinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_addallregisteredserverinfo] (@connectionname nvarchar(500), @servername nvarchar(128), @instancename nvarchar(128), @loginname nvarchar(128), @loginpassword nvarchar(300), @authmode nvarchar(1), @loginauthmode nvarchar(1), @os nvarchar(512), @version nvarchar(256), @edition nvarchar(256), @enableproxyaccount nchar(1), @enablec2 nchar(10), @ownerchaining nchar(1), @serverlogin nvarchar(256), @serverpassword nvarchar(256), @retentionperiod int=50)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              
   -- 	           

	declare @err int
	declare @errmsg nvarchar(500)

	declare @ans int

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Access denial. Insufficient privilege.'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end


	BEGIN TRAN

		if exists (select * from registeredserver where UPPER(connectionname) = UPPER(@connectionname))
		begin
			set @errmsg = 'Error: Connection name ' + @connectionname + ' already exists' 
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		insert into registeredserver (connectionname, servername, instancename, sqlserverlogin, sqlserverpassword, sqlserverauthtype, authenticationmode, os, version, edition, enableproxyaccount, enablec2audittrace, crossdbownershipchaining, serverlogin, serverpassword, snapshotretentionperiod) values (@connectionname, @servername, @instancename, @loginname, @loginpassword, @loginauthmode, @authmode, @os, @version, @edition, @enableproxyaccount, @enablec2, @ownerchaining, @serverlogin, @serverpassword, @retentionperiod)

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to insert into registeredserver table with connection name ' + @connectionname
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		if exists (Select snapshotid from serversnapshot where UPPER(connectionname) = UPPER(@connectionname))
		begin
			update registeredserver set currentcollectionstatus = (select top 1 status from serversnapshot where UPPER(connectionname) = UPPER(@connectionname)),
										currentcollectiontm = (select max(starttime) from serversnapshot where UPPER(connectionname) = UPPER(@connectionname)),
										lastcollectionsnapshotid = (select max(a.snapshotid) from serversnapshot a inner join dbo.getsnapshotlist(null, 0) b on UPPER(a.connectionname) = UPPER(b.connectionname) where UPPER(a.connectionname) = UPPER(@connectionname)),
										lastcollectiontm = (select max(a.starttime) from serversnapshot a inner join dbo.getsnapshotlist(null, 0) b on UPPER(a.connectionname) = UPPER(b.connectionname) where UPPER(a.connectionname) = UPPER(@connectionname))
			where UPPER(connectionname) = UPPER(@connectionname)
		end


		declare @str nvarchar(500)
		set @str = N'Added ' + @connectionname + N' SQL Server'

		declare @programname nvarchar(128)
		select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'ADD', @category=N'SERVER', @description=@str, @connectionname = @connectionname

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addcollectorinfo]'))
drop procedure [dbo].[isp_sqlsecure_addcollectorinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_addcollectorinfo] (@infoname nvarchar(64), @infovalue nvarchar(1000))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Adds new collector information to database table for job scheduler processing

	declare @errmsg nvarchar(500)

	if (@infoname IS NULL) 
	begin
		set @errmsg = 'Error: Info name cannot be null'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if (@infovalue IS NULL) 
	begin
		set @errmsg = 'Error: Info value cannot be null'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end	

	if exists (select * from collectorinfo where UPPER(name) = UPPER(@infoname))
	begin
		update collectorinfo set value = @infovalue,  lastmodifiedby = SYSTEM_USER, lastmodifiedtm=GETUTCDATE() where UPPER(name) = UPPER(@infoname)
	end
	else
	begin
		insert into collectorinfo (name, value, lastmodifiedby, lastmodifiedtm) values (@infoname, @infovalue, SYSTEM_USER, GETUTCDATE())
	end

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_addcollectorinfo] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addlicense]'))
drop procedure [dbo].[isp_sqlsecure_addlicense]
GO

CREATE procedure [dbo].[isp_sqlsecure_addlicense] (@licensekey nvarchar(256))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Insert a single license
   -- 	           
	
	declare @result int
	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	-- Get application program name
	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	declare @connectionname nvarchar(128)
	set @connectionname = NULL
		
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to add license'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Add', @category=N'License Key', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if (@licensekey IS NULL)
	begin
		set @errmsg = N'License key cannot be null.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Add', @category=N'License Key', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end 
	
	declare @mxlen int
	--set @mxlen = LEN(@licensekey)

	if (LEN(@licensekey) > 256)
	begin
		set @errmsg = N'License key cannot be longer than 256 characters.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Add', @category=N'License Key', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end
	
	BEGIN TRAN
	
		insert into applicationlicense (licensekey, createdby, createdtm) values (@licensekey, SYSTEM_USER, GETUTCDATE())

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to insert a new license key to applicationlicense table with licence ' + @licensekey
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end


		declare @str nvarchar(500)
		set @str = N'Added new license key ' + @licensekey + N'.'

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Add', @category=N'License Key', @description=@str, @connectionname = @connectionname


	COMMIT TRAN

	exec('select max(licenseid) from applicationlicense')
	
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addnewgroomingjob]'))
drop procedure [dbo].[isp_sqlsecure_addnewgroomingjob]
GO

CREATE procedure [dbo].[isp_sqlsecure_addnewgroomingjob] (@groomjobname nvarchar(128), @jobdescription nvarchar(512)=null, @freqtype int=8, @freqinterval int=2, @freqsubdaytype int=0, @freqsubdayinterval int=0, @freqrelativeinterval int=0, @freqrecurencefactor int=1, @activestartdate int=NULL, @activeenddate int=99991231, @activestarttime int=000000, @activeendtime int=235959 ,@isenabled tinyint=1,  @notifylevelemail int=0, @notifyemailoperatorname nvarchar(500)=null)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Create new job to groom all out-dated snapshot data or snapshot data belonging to registered server that got deleted.
   -- 	           

	declare @err int
	declare @errmsg nvarchar(500)
	declare @command nvarchar(1000)
	declare @snapshotjobid uniqueidentifier
	declare @jobstepname nvarchar(128)
	declare @errorflag int
	declare @programname nvarchar(128)
	declare @adminname nvarchar(128)

	set @jobstepname = 'SQLsecure Grooming Job'

	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @adminname = SUSER_SNAME(0x01)

	-- VALIDATION HERE
	-- CHECK IF JOB NAME ALREADY EXISTS
	if exists (select 1 from msdb.dbo.sysjobs where UPPER(name) = @groomjobname)
	begin
		set @errmsg = 'Error: Job name ' + @groomjobname + ' already exists.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if (@groomjobname IS NULL or @groomjobname = '')
	begin
		set @errmsg = 'Error: Job name cannot be empty.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end


	-- CREATE JOB

	--print 'job name ' + @groomjobname

	EXEC msdb.dbo.sp_add_job 
		@job_name = @groomjobname, 
		@enabled = @isenabled, 
		@description = @jobdescription, 
		@start_step_id=1, 
		@category_name='SQLsecureGroomingJobs', 
		@category_id=NULL, 
		@owner_login_name=@adminname, 
		@notify_level_eventlog=2, 
		@notify_level_email = @notifylevelemail, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@notify_email_operator_name = @notifyemailoperatorname, 
		@notify_netsend_operator_name=NULL, 
		@notify_page_operator_name =NULL, 
		@delete_level =0,
		@job_id=@snapshotjobid OUTPUT

	-- TODO: VALIDATE JOB ID HERE
	if (@snapshotjobid IS NULL or CONVERT(nvarchar(128),@snapshotjobid) = '')
	begin
		set @errmsg = 'Error: Job id cannot be empty.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- ADD JOB SERVER
	EXEC msdb.dbo.sp_add_jobserver 
		@job_id = @snapshotjobid

	select @err = @@error

	if @err <> 0
	begin
		exec isp_sqlsecure_removejob @snapshotjobid

		set @errmsg = 'Error: Failed to create grooming job.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- groom snapshot data
	set @command = 'exec SQLsecure.dbo.isp_sqlsecure_groomsnapshots'

	-- CREATE STEP
	EXEC msdb.dbo.sp_add_jobstep 
		@job_id = @snapshotjobid, 
		@step_name = @jobstepname, 
		@subsystem = 'TSQL', 
		@command = @command

	select @err = @@error

	if @err <> 0
	begin
		exec isp_sqlsecure_removejob @snapshotjobid

		set @errmsg = 'Error: Failed to create grooming job step.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- CREATE SCHEDULE
	EXEC msdb.dbo.sp_add_jobschedule @job_id = @snapshotjobid,
	    @name = 'default',
	    @enabled = @isenabled,
	    @freq_type = @freqtype,
	    @freq_interval = @freqinterval,
	    @freq_subday_type = @freqsubdaytype,
	    @freq_subday_interval = @freqsubdayinterval,
	    @freq_relative_interval = @freqrelativeinterval,
	    @freq_recurrence_factor = @freqrecurencefactor,
	    @active_start_date = @activestartdate,
	    @active_end_date = @activeenddate,
	    @active_start_time = @activestarttime,
	    @active_end_time = @activeendtime

	if @err <> 0
	begin

		exec isp_sqlsecure_removejob @snapshotjobid

		set @errmsg = 'Error: Failed to create grooming job schedule.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end	
	
	declare @str nvarchar(256)
	set @str = 'Grooming job ' + @groomjobname

	-- add an entry to grooming activity table
	insert into groomingactivityhistory (activitystarttime, activityendtime, status, comment) values (GETUTCDATE(), GETUTCDATE(), 'S', @str + ' created.')

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@str, @connectionname = null

	create table #tmpdata (data uniqueidentifier)

	-- RETURN THE JOB ID
	insert into #tmpdata (data) values (@snapshotjobid)
	select * from #tmpdata

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addnewsnapshotjob]'))
drop procedure [dbo].[isp_sqlsecure_addnewsnapshotjob]
GO

CREATE procedure [dbo].[isp_sqlsecure_addnewsnapshotjob] (@connectionname nvarchar(400), @snapshotjobname nvarchar(128), @jobdescription nvarchar(512)=null, @targetserver nvarchar(500), @repositoryname nvarchar(500), @freqtype int=4, @freqinterval int=1, @freqsubdaytype int=0, @freqsubdayinterval int=0, @freqrelativeinterval int=0, @freqrecurencefactor int=0, @activestartdate int=NULL, @activeenddate int=99991231, @activestarttime int=000000, @activeendtime int=235959 ,@isenabled tinyint=1,  @notifylevelemail int=0, @notifyemailoperatorname nvarchar(500)=null)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Create new job to capture server snapshot.
   -- 	           

	declare @err int
	declare @errmsg nvarchar(500)
	declare @snapshotjobid uniqueidentifier
	declare @jobstepname nvarchar(128)
	declare @collectorpath nvarchar(1000)
	declare @command nvarchar(1000)
	declare @errorflag int
	declare @programname nvarchar(128)
	declare @adminname nvarchar(128)

	set @jobstepname = 'SQLsecure Collector Job'

	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @adminname = SUSER_SNAME(0x01)

	-- GET COLLECTOR EXECUTABLE FILE PATH
	select @collectorpath =  value from collectorinfo where UPPER(name) = 'FILEPATH'

	if (@collectorpath IS NULL)
	begin
		set @errmsg = 'Error: SQLsecure Collector file path is not valid.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- VALIDATION HERE
	-- CHECK IF JOB ALREADY EXISTS AND DELETE IT
	if exists (select 1 from msdb.dbo.sysjobs where UPPER(name) = UPPER(@snapshotjobname))
	begin
		exec isp_sqlsecure_removejob @jobid=null, @jobname=@snapshotjobname
	end
	-- CHECK AND MAKE SURE IT WAS DELETED
	if exists (select 1 from msdb.dbo.sysjobs where UPPER(name) = UPPER(@snapshotjobname))
	begin
		set @errmsg = 'Error: Job name ' + @snapshotjobname + ' already exists.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if (@snapshotjobname IS NULL or @snapshotjobname = '')
	begin
		set @errmsg = 'Error: Job name cannot be empty.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end
	
	-- TODO: check servername, repository name...etc

	set @command = '"' + @collectorpath + '" -TargetInstance "' + @targetserver + '" -Repository "' + @repositoryname + '"'

	--print 'command ' + @command

	-- CREATE JOB

	--print 'job name ' + @snapshotjobname

	EXEC msdb.dbo.sp_add_job 
		@job_name = @snapshotjobname, 
		@enabled = @isenabled, 
		@description = @jobdescription, 
		@start_step_id=1, 
		@category_name='SQLsecureJobs', 
		@category_id=NULL, 
		@owner_login_name=@adminname, 
		@notify_level_eventlog=2, 
		@notify_level_email = @notifylevelemail, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@notify_email_operator_name = @notifyemailoperatorname, 
		@notify_netsend_operator_name=NULL, 
		@notify_page_operator_name =NULL, 
		@delete_level =0,
		@job_id=@snapshotjobid OUTPUT

	--print 'after add job'

	--select @snapshotjobid = data from #tmpdata

	--print 'snapshot job id ' + CONVERT(nvarchar(128), @snapshotjobid)

	-- TODO: VALIDATE JOB ID HERE
	if (@snapshotjobid IS NULL or CONVERT(nvarchar(128),@snapshotjobid) = '')
	begin
		set @errmsg = 'Error: Job id cannot be empty.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- ADD JOB SERVER
	EXEC msdb.dbo.sp_add_jobserver 
		@job_id = @snapshotjobid

	--print 'before creating step'

	-- CREATE STEP
	EXEC msdb.dbo.sp_add_jobstep 
		@job_id = @snapshotjobid, 
		@step_name = @jobstepname, 
		@subsystem = 'CMDEXEC', 
		@command = @command

	select @err = @@error

	if @err <> 0
	begin
		set @errmsg = 'Error: Failed to create job step.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- CREATE SCHEDULE
	EXEC msdb.dbo.sp_add_jobschedule @job_id = @snapshotjobid,
	    @name = 'default',
	    @enabled = @isenabled,
	    @freq_type = @freqtype,
	    @freq_interval = @freqinterval,
	    @freq_subday_type = @freqsubdaytype,
	    @freq_subday_interval = @freqsubdayinterval,
	    @freq_relative_interval = @freqrelativeinterval,
	    @freq_recurrence_factor = @freqrecurencefactor,
	    @active_start_date = @activestartdate,
	    @active_end_date = @activeenddate,
	    @active_start_time = @activestarttime,
	    @active_end_time = @activeendtime

	if @err <> 0
	begin
		set @errmsg = 'Error: Failed to create job schedule.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- INSERT NEW JOB TO REGISTERED SERVER TABLE
	if exists (select 1 from registeredserver where UPPER(connectionname) = UPPER(@connectionname))
	begin
		update registeredserver set jobid = @snapshotjobid where UPPER(connectionname) = UPPER(@connectionname)

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to update registeredserver table with job id ' + CONVERT(nvarchar(128), @snapshotjobid)
			exec isp_sqlsecure_addactivitylog @activitytype=N'Error', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = @connectionname
			RAISERROR (@errmsg, 16, 1)
			return -1
		end
	end
	
	declare @str nvarchar(256)
	set @str = 'Snapshot job ' + @snapshotjobname

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@str, @connectionname = @connectionname

	if (@isenabled = 0)
	begin
		set @str = 'The Agent Job for server ' + @connectionname + ' has been disabled and automatic auditing is not active for this server.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Warning', @source=@programname, @eventcode=N'Warning', @category=N'Registered Server', @description=@str, @connectionname = @connectionname
	end

	create table #tmpdata (data uniqueidentifier)

	-- RETURN THE JOB ID
	insert into #tmpdata (data) values (@snapshotjobid)
	select * from #tmpdata

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addnotificationprovider]'))
drop procedure [dbo].[isp_sqlsecure_addnotificationprovider]
GO


CREATE procedure [dbo].[isp_sqlsecure_addnotificationprovider]
(
	@providername nvarchar(64), 
	@providertype nvarchar(32), 
	@servername nvarchar(256), 
	@port int, 
	@timeout int, 
	@requiresauthentication bit, 
	@username nvarchar(128), 
	@password nvarchar(128), 
	@sendername nvarchar(128), 
	@senderemail nvarchar(128), 
	@notificationproviderid int output
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Insert a new notification provider into the notificationprovider table
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Add', @category=N'Notification Provider', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if exists (select * from [notificationprovider] where UPPER(providername) = UPPER(@providername))
	begin
		set @msg = 'Error: ' + @category + ' "' + @providername + '" already exists' 
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

	insert into [notificationprovider] ( 
			providername, 
			providertype, 
			servername, 
			port, 
			[timeout], 
			requiresauthentication, 
			username, 
			[password], 
			sendername, 
			senderemail
			)
		values ( 
			@providername, 
			@providertype, 
			@servername, 
			@port, 
			@timeout, 
			@requiresauthentication, 
			@username, 
			@password, 
			@sendername, 
			@senderemail
			)

	select @err = @@error

	if @err <> 0
	begin
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @providername + '"'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

    set @notificationproviderid = @@IDENTITY


	set @msg = @category + N' "' + @providername + '" with id ' + CONVERT(NVARCHAR, @notificationproviderid)
	exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addnotificationtoregisteredserver]'))
drop procedure [dbo].[isp_sqlsecure_addnotificationtoregisteredserver]
GO


CREATE procedure [dbo].[isp_sqlsecure_addnotificationtoregisteredserver] 
(
	@registeredserverid int, 
	@notificationproviderid int, 
	@snapshotstatus nchar(1), 
	@policymetricseverity int, 
	@recipients nvarchar(1024)
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Add notification settings to a registered server
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Add', @category=N'Server Notification', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @providername nvarchar(128)
	select @providername=providername from [notificationprovider] where notificationproviderid = @notificationproviderid

	if (@providername is null)
	begin
		set @msg = N'Error: Notification Provider ' + CONVERT(NVARCHAR, @notificationproviderid) + ' cannot be added to a registered server because the notification provider does not exist'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @connection nvarchar(400)
	select @connection=connectionname from [registeredserver] where registeredserverid = @registeredserverid

	if (@connection is null)
	begin
		set @msg = N'Error: Notification Provider "' + @providername + '" cannot be added to Registered Server ' + CONVERT(NVARCHAR, @registeredserverid) + ' because the server does not exist'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if exists (select * from [registeredservernotification] where notificationproviderid = @notificationproviderid and registeredserverid = @registeredserverid)
	begin
		set @msg = 'Error: ' + @category + ' "' + @providername + '" already exists for Server "'  + @connection + '"'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

	insert into [registeredservernotification] (
			registeredserverid,
			notificationproviderid,
			snapshotstatus,
			policymetricseverity,
			recipients
			)
		values (
			@registeredserverid,
			@notificationproviderid,
			@snapshotstatus,
			@policymetricseverity,
			@recipients
			)

	select @err = @@error

	if @err <> 0
	begin
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @providername + '" to Server "'  + @connection + '"'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

	set @msg = @category + N' "' + @providername + '" to Server '  + @connection
	exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addpolicy]'))
drop procedure [dbo].[isp_sqlsecure_addpolicy]
GO


CREATE procedure [dbo].[isp_sqlsecure_addpolicy] 
(
	@policyname nvarchar(128), 
	@policydescription nvarchar(2048), 
	@issystempolicy bit, 
	@isdynamic bit, 
	@dynamicselection nvarchar(4000), 
	@interviewname nvarchar(256) = null,
	@interviewtext nvarchar(max) = null,
	@policyid int output
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Insert a new policy into the policy table
   -- 	           

	declare @err int, @msg nvarchar(500)
	declare @assessmentid int

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Add', @category=N'Policy', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if exists (select * from [policy] where UPPER(policyname) = UPPER(@policyname))
	begin
		set @msg = 'Error: ' + @category + ' "' + @policyname + '" already exists' 
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

	insert into [policy] (
			policyname, 
			policydescription, 
			issystempolicy)
		 values (
			@policyname, 
			@policydescription, 
			@issystempolicy)

	select @err = @@error

	if @err <> 0
	begin
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '"'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

    set @policyid = @@IDENTITY

	-- create the default assessment
	insert into [assessment] (
			[policyid], 
			[assessmentstate], 
			[assessmentname], 
			[assessmentdescription], 
			[assessmentnotes], 
			[assessmentdate], 
			[usebaseline], 
			[isdynamic], 
			[dynamicselection])
		 values (
			@policyid, 
			N'S', 
			N'', 
			@policydescription, 
			N'', 
			null, 
			0,
			@isdynamic, 
			@dynamicselection)

	select @err = @@error

	if @err <> 0
	begin
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '" Assessment'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

    set @assessmentid = @@IDENTITY

	-- save the interview if there is one
	if (LEN(RTRIM(ISNULL(@interviewname, '') + ISNULL(CONVERT(NVARCHAR(100), @interviewtext), ''))) > 0)
	begin
		insert into policyinterview (
				policyid,
				assessmentid,
				istemplate,
				interviewname,
				interviewtext
				)
			values (
				@policyid,
				@assessmentid,
				0,
				@interviewname,
				@interviewtext
				)

		select @err = @@error

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '" Interview'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end
	end

	-- now copy all of the default metrics to the new policy
	insert into policymetric (policyid,
								assessmentid,
								metricid,
								isenabled,
								reportkey,
								reporttext,
								severity,
								severityvalues)
		select @policyid,
				@assessmentid,
				metricid,
				isenabled,
				reportkey,
				reporttext,
				severity,
				severityvalues
			from policymetric
			where policyid = 0

	select @err = @@error

	if @err <> 0
	begin
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '". The default metric settings could not be saved. '
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		ROLLBACK TRAN
		return -1
	end


	set @msg = @category + N' "' + @policyname + '" with policy id ' + CONVERT(NVARCHAR, @policyid)
	exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addpolicychangelog]'))
drop procedure [dbo].[isp_sqlsecure_addpolicychangelog]
GO

CREATE procedure [dbo].[isp_sqlsecure_addpolicychangelog] (@policyid int, @assessmentid int, @state nchar(1), @description nvarchar(4000))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Add an entry to the policy change log table
   --

	declare @err int, @msg nvarchar(500)
	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Add', @category=N'Policy Change Log', @success=N'Success Audit', @failure=N'Failure Audit'

	-- only log values for published and approved assessments
	if (@state in (N'P', N'A'))
	begin
		BEGIN TRAN
			insert into policychangelog (
					policyid, 
					assessmentid, 
					assessmentstate, 
					changedate, 
					changedby, 
					changedescription
				) 
				values (
					@policyid, 
					@assessmentid, 
					@state, 
					GETUTCDATE(), 
					SYSTEM_USER, 
					@description
				)

			-- if there is an error writing to the change log, log the failure to the activity log
			if @err <> 0
			begin
				set @msg = 'Error: Unable to create policy change log entry. '
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			end

		COMMIT TRAN
	end

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_addpolicychangelog] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addregisteredserver]'))
drop procedure [dbo].[isp_sqlsecure_addregisteredserver]
GO

CREATE procedure [dbo].[isp_sqlsecure_addregisteredserver] (@connectionname nvarchar(500), @connectionport int, @servername nvarchar(128), @instancename nvarchar(128),
															@loginname nvarchar(128), @loginpassword nvarchar(300), @authmode nvarchar(256),
															@serverlogin nvarchar(256), @serverpassword nvarchar(256),
															@version nvarchar(256), @retentionperiod int=50, @auditfoldersstring nvarchar(max),@servertype nvarchar(3))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Insert only sql server properties info into the registeredserver table
   -- 	           

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = N'Error: Insufficient privileges to register SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Add', @category=N'Server', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN

	if exists (select * from registeredserver where UPPER(connectionname) = UPPER(@connectionname))
	begin
			set @errmsg = 'Error: Connection name ' + @connectionname + ' already exists' 
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
	end

	declare @id int
	insert into registeredserver (connectionname, connectionport, servername, instancename, sqlserverlogin, sqlserverpassword, sqlserverauthtype, serverlogin, serverpassword, version, snapshotretentionperiod, auditfoldersstring,servertype) 
							values (@connectionname, @connectionport, @servername, @instancename, @loginname, @loginpassword, @authmode, @serverlogin, @serverpassword, @version, @retentionperiod, @auditfoldersstring,@servertype)

	select @err = @@error

	if @err <> 0
	begin
		set @errmsg = 'Error: Failed to insert into registeredserver table with connection name ' + @connectionname
		RAISERROR (@errmsg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

	select @id = @@IDENTITY
	if exists (Select snapshotid from serversnapshot where UPPER(connectionname) = UPPER(@connectionname))
	begin
		update serversnapshot set registeredserverid=@id where UPPER(connectionname) = UPPER(@connectionname)

		update registeredserver set currentcollectionstatus = (select top 1 status from serversnapshot where UPPER(connectionname) = UPPER(@connectionname)),
									currentcollectiontm = (select max(starttime) from serversnapshot where UPPER(connectionname) = UPPER(@connectionname)),
									lastcollectionsnapshotid = (select max(a.snapshotid) from serversnapshot a inner join dbo.getsnapshotlist(null, 0) b on UPPER(a.connectionname) = UPPER(b.connectionname) where UPPER(a.connectionname) = UPPER(@connectionname)),
									lastcollectiontm = (select max(a.starttime) from serversnapshot a inner join dbo.getsnapshotlist(null, 0) b on UPPER(a.connectionname) = UPPER(b.connectionname) where UPPER(a.connectionname) = UPPER(@connectionname))
		where UPPER(connectionname) = UPPER(@connectionname)
	end

	declare @str nvarchar(500)

	set @str = N'Registered SQL Server instance ' + @connectionname

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Add', @category=N'Server', @description=@str, @connectionname = @connectionname

	
	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addregisteredservertopolicy]'))
drop procedure [dbo].[isp_sqlsecure_addregisteredservertopolicy]
GO


CREATE procedure [dbo].[isp_sqlsecure_addregisteredservertopolicy] 
(
	@registeredserverid int, 
	@policyid int,
	@assessmentid int = null		-- default to policy settings for backward compatibility
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Add a registered server as a member of a policy 
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @category2 nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Add', @category=N'Policy Member', @category2=N'Assessment Member', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @connection nvarchar(400)
	select @connection=connectionname from [registeredserver] where registeredserverid = @registeredserverid

	if (@connection is null)
	begin
		set @msg = 'Error: Invalid registered server id ' + CONVERT(nvarchar, @registeredserverid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @policy nvarchar(128),
			@state nchar(1)
	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	select @policy = [dbo].[getassessmentname](@policyid, @assessmentid)
	select @state=assessmentstate 
		from assessment
		where policyid = @policyid 
			and assessmentid = @assessmentid

	set @category= case when @state in (N'D', N'P') then @category2 else @category end

	if (@policy is null)
	begin
		set @msg = N'Error: Registered Server "' + @connection + '" cannot be added. Invalid policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if exists (select * from [assessment] where policyid = @policyid and assessmentid = @assessmentid and isdynamic=1)
	begin
		set @msg = N'Error: Registered Server "' + @connection + '" cannot be added to "' + @policy + '" because the policy members are created dynamically'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if exists (select * from [policymember] where policyid = @policyid and assessmentid = @assessmentid and registeredserverid = @registeredserverid)
	begin
--		set @msg = 'Error: ' + @category + ' "' + @connection + '" already exists for "'  + @policy + '"'
--		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
--		RAISERROR (@msg, 16, 1)
--		return -1
		return	-- it already exists, which is the correct result so just return without any logging or messaging
	end

	BEGIN TRAN

		insert into [policymember] (policyid, assessmentid, registeredserverid)
			 values (@policyid, @assessmentid, @registeredserverid)

		select @err = @@error

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @connection + '" to "'  + @policy + '"'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		set @msg = N'Added server ' + @connection
		set @state=dbo.getassessmentstatename(@state)
		exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@state, @description=@msg

		set @msg = @category + N' "' + @connection + '" to '  + @policy
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addrule]'))
drop procedure [dbo].[isp_sqlsecure_addrule]
GO

CREATE procedure [dbo].[isp_sqlsecure_addrule] (@ruleheaderid int, @class tinyint, @scope nvarchar(64), @matchstring nvarchar(1000))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Insert a single rule to the filterrue table
   -- 	           

	declare @result int
	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	-- Get application program name
	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	
	-- Get connection name for the filterheaderid
	declare @connectionname nvarchar(400)
	select @connectionname = connectionname from filterruleheader where filterruleheaderid = @ruleheaderid
	
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to add filter rule for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Add', @category=N'Filter Rule', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end
	 
	BEGIN TRAN
	
		insert into filterrule (filterruleheaderid, class, scope, matchstring) values (@ruleheaderid, @class, @scope, @matchstring)

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to insert into filterrule table with filterruleheaderid ' + CONVERT(nvarchar(64), @ruleheaderid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		if object_id('#tmpruleheader') is null 
		begin
			create table #tmprule (data int)
		end

		delete from #tmprule

		insert into #tmprule (data) (select filterruleid from filterrule where filterruleheaderid = @ruleheaderid and class = @class and scope = @scope and matchstring = @matchstring)

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to insert into filterrule table with filterruleheaderid ' + CONVERT(nvarchar(64), @ruleheaderid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		declare @str nvarchar(500)
		set @str = N'Added filter rule for SQL Server instance ' + @connectionname + N', Scope: ' + @scope + N'Match String: ' + @matchstring + N' (ruleheaderid=' + CONVERT(nvarchar(64), @ruleheaderid) + ')'

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Add', @category=N'Filter Rule', @description=@str, @connectionname = @connectionname

	COMMIT TRAN

	exec('select * from #tmprule')
	


GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_addruleheader]'))
drop procedure [dbo].[isp_sqlsecure_addruleheader]
GO

CREATE procedure [dbo].[isp_sqlsecure_addruleheader] (@connectionname nvarchar(500), @rulename nvarchar(256), @description nvarchar(80))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Add a new rule header and return the new header id back to the sp caller
   -- 	           

	declare @currenttm datetime
	declare @result int
	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to add filter for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Add', @category=N'Filter', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	set @currenttm = GETUTCDATE()
	
	BEGIN TRAN
	
		insert into filterruleheader (connectionname, rulename, description, createdby, createdtm, lastmodifiedby, lastmodifiedtm) values (@connectionname, @rulename, @description, SYSTEM_USER, @currenttm, SYSTEM_USER,  @currenttm)
	
		select @err = @@error
	
		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to insert into filterruleheader table with connection name ' + @connectionname
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end
	
		if object_id('#tmpruleheader') is null 
		begin
			create table #tmpruleheader (data int)
		end
	
		delete from #tmpruleheader
	
		insert into #tmpruleheader (data) (select filterruleheaderid from filterruleheader where createdtm = @currenttm)
	
	
		select @err = @@error
	
		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to insert into filterruleheader table with connection name ' + @connectionname
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end
	
		declare @str nvarchar(500)
		set @str = N'Added filter ' + @rulename + N' for SQL Server instance ' + @connectionname
	
		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Add', @category=N'Filter', @description=@str, @connectionname = @connectionname

	COMMIT TRAN

	exec('select * from #tmpruleheader')
	
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_checkallcredentials]'))
drop procedure [dbo].[isp_sqlsecure_checkallcredentials]
GO

CREATE procedure [dbo].[isp_sqlsecure_checkallcredentials] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks if all registeredservers have windows credentials entered.
   --				If not, then this is an upgrade to 2.0
   --				Returns a Y or N
   -- 	    

	declare @result nchar(1)
	select @result = case when count(*) = 0 then 'Y' else 'N' end
		from registeredserver
		where sqlserverauthtype <> 'S' and len(sqlserverlogin) = 0

	select @result

	
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_checkallcredentials] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_createassessmentfrompolicy]'))
drop procedure [dbo].[isp_sqlsecure_createassessmentfrompolicy]
GO


CREATE procedure [dbo].[isp_sqlsecure_createassessmentfrompolicy] 
(
	@policyid int,
	@assessmentid int = null,
	@name nvarchar(128) = null,
	@description nvarchar(2048) = null,
	@assessmentdate datetime = null,
	@usebaseline bit = null,
	@type nchar(1) = N'D',
	@copy int = 1,
	@newassessmentid int output
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Create a new assessment by copying the chosen policy or assessment
   -- 	           
   -- 	           Parameters:
   -- 	             @policyid - the id of the policy to copy
   -- 	             @assessmentid - the id of the assessment to copy or null to use the default policy settings
   -- 	             @name - the name of the new assessment. If null, a name will be generated. The current assessment will always be named 'Current'
   -- 	             @description - the description of the new assessment
   -- 	             @assessmentdate - the rundate to use when copying the policy
   -- 	             @usebaseline - the usebaseline flag to use when copying the policy
   -- 	             @type - determines what type of assessment is being created
   --					Values: (case does not matter)
   --						D - draft	(default)
   --						C - current
   --                @copy - determines what type of copy operation to perform
   --					Values:
   --						1 - a new assessment is created with a full copy of the policy settings and assessment values
   --						2 - a new assessment is created with only a copy of the policy settings
   --						3 - delete the settings and data for the current assessment and recopy the settings from the policy default
   --                @newassessmentid - will contain the assessmentid of the assessment that was created or refreshed
   --
   --				Valid combinations for @type and @copy are:
   --					D,1
   --					D,2
   --					C,2
   --					C,3
   --

	declare @err int, @msg nvarchar(500)
	declare @policyname nvarchar(128)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Add', @category=N'Assessment', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @typedraft nchar(1), @typecurrent nchar(1), @typesettings nchar(1), @assessmentstate nchar(1)
	declare @copyall int, @copysettings int, @copyrefresh int
	select @typedraft=N'D',@typecurrent=N'C',@typesettings=N'S',
			@copyall=1, @copysettings=2, @copyrefresh=3

	select @type = upper(@type)			--make type parameter case insensitive
	if (@type not in (@typedraft, @typecurrent))
	begin
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' for Policy id ' + CONVERT(NVARCHAR, @policyid) + '. ' + @type + ' is not a valid type to create.'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	end

	if (@copy not in (@copyall, @copysettings, @copyrefresh))
	begin
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' for Policy id ' + CONVERT(NVARCHAR, @policyid) + '. ' + CONVERT(NVARCHAR, @copy) + ' is not a valid copy operation.'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	end

	if ((@type = @typedraft and @copy not in (@copyall, @copysettings)) or
		(@type = @typecurrent and @copy not in (@copysettings, @copyrefresh)))
	begin
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' for Policy id ' + CONVERT(NVARCHAR, @policyid) + '. The parameters @type=' + @type + ' and @copy=' + @copy + ' are not compatible.'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	end

	-- there can only be one current assessment
	if (@type = @typecurrent)
	begin
		select @assessmentid = null, @assessmentstate = @typecurrent, @name = N'Current', @assessmentdate = null, @usebaseline = 0
		if exists (select * from assessment where policyid = @policyid and assessmentstate = @typecurrent)
		begin
			-- if refreshing it must exist
			if (@copy <> @copyrefresh)
			begin
				set @msg = 'Error: Failed to ' + lower(@action) + ' current ' + lower(@category) + ' for Policy id ' + CONVERT(NVARCHAR, @policyid) + '. A current ' + lower(@category) + ' already exists.'
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				return -1
			end
		end

		-- make sure the assessmentid passed is the current assessment
		select @newassessmentid = assessmentid from assessment where policyid = @policyid and assessmentstate = @typecurrent
		if (@assessmentid is not null and @assessmentid <> @newassessmentid)
		begin
			set @msg = 'Error: Failed to update current ' + lower(@category) + ' for Policy id ' + CONVERT(NVARCHAR, @policyid) + '. The ' + lower(@category) + ' with id ' + CONVERT(NVARCHAR, @policyid) + ' is not a current ' + lower(@category) + '.'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end

		select @assessmentid = [dbo].[getdefaultassessmentid](@policyid)
	end
	else if exists (select * from assessment where policyid = @policyid and assessmentname = @name)
		begin
			if (@copy <> @copyrefresh)
			begin
				set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' for Policy id ' + CONVERT(NVARCHAR, @policyid) + '. An ' + lower(@category) + ' with the name ' + @name + ' already exists.'
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				return -1
			end
		end
	else
	begin
		select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid)),
					@assessmentstate = @type

		declare @policydate datetime, @policybaseline bit, @issettings bit, @currentid int
		select @policydate=assessmentdate, 
				@policybaseline=usebaseline, 
				@issettings = case when assessmentstate = @typesettings then 1 else 0 end
			from assessment 
			where policyid = @policyid 
				and assessmentid = @assessmentid
		if (@issettings = 1)
			select @currentid = assessmentid 
				from assessment 
				where policyid = @policyid 
					and assessmentstate = @typecurrent
		select @assessmentdate = isnull(@assessmentdate, isnull(@policydate, getutcdate()))
		select @usebaseline = isnull(@usebaseline, isnull(@policybaseline, 0))
	end

	select @policyname = dbo.[getassessmentname](@policyid, @assessmentid)
	if (@policyname is null)
	begin
		set @msg = 'Error: Failed to copy ' + lower(@category) + '. Policy id ' + CONVERT(NVARCHAR, @policyid) + ' does not exist' 
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

	if (@copy in (@copyall, @copysettings))
	begin
		-- create the assessment
		insert into [assessment] (
					[policyid], 
					[assessmentstate], 
					[assessmentname], 
					[assessmentdescription], 
					[assessmentnotes], 
					[assessmentdate], 
					[usebaseline], 
					[isdynamic], 
					[dynamicselection]
			)
			select
					@policyid, 
					@assessmentstate, 
					isnull(@name, N'Assessment created ' + convert(nvarchar,getdate())), 
					isnull(@description, a.[policydescription]), 
					N'', 
					@assessmentdate, 
					@usebaseline, 
					0, 
					N''
				from [policy] a,
					[assessment] b
				where a.[policyid] = @policyid
					and a.[policyid] = b.[policyid]
					and b.[assessmentid] = @assessmentid

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end

		set @newassessmentid = @@IDENTITY
	end
	else if (@copy = @copyrefresh)
	begin
		-- clear the data
		delete from policyassessmentdetail
			where policyid = @policyid
				and assessmentid = @newassessmentid

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to refresh current ' + lower(@category) + ' for "' + @policyname + '". The assessment detail could not be deleted. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
		delete from policyassessmentnotes
			where policyid = @policyid
				and assessmentid = @newassessmentid

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to refresh current ' + lower(@category) + ' for "' + @policyname + '". The assessment notes could not be deleted. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
		delete from policyassessment
			where policyid = @policyid
				and assessmentid = @newassessmentid

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to refresh current ' + lower(@category) + ' for "' + @policyname + '". The assessment info could not be deleted. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end

		-- clear the settings
		delete from policymetric
			where policyid = @policyid
				and assessmentid = @newassessmentid

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to refresh current ' + lower(@category) + ' for "' + @policyname + '". The security check settings could not be deleted. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end

		delete from policymember
			where policyid = @policyid
				and assessmentid = @newassessmentid

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to refresh current ' + lower(@category) + ' for "' + @policyname + '". The member servers could not be deleted. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end

		delete from policyinterview
			where policyid = @policyid
				and assessmentid = @newassessmentid

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to refresh current ' + lower(@category) + ' for "' + @policyname + '". The interview could not be deleted. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	end

	-- now copy all of the metrics to the new assessment
	insert into policymetric (
				policyid,
				assessmentid,
				metricid,
				isenabled,
				reportkey,
				reporttext,
				severity,
				severityvalues)
		select policyid,
				@newassessmentid,
				metricid,
				isenabled,
				reportkey,
				reporttext,
				severity,
				severityvalues
			from policymetric
			where policyid = @policyid
				and assessmentid = @assessmentid

	select @err = @@error

	if @err <> 0
	begin
		ROLLBACK TRAN
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '". The security check settings could not be copied. '
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	-- now copy all of the servers to the new assessment
	-- assessments cannot be dynamic, so get the server list and add them all manually
	create table #tmp_createassessmentfrompolicy_servertbl (registeredserverid int)
	insert into #tmp_createassessmentfrompolicy_servertbl
		exec SQLsecure.dbo.isp_sqlsecure_getpolicymemberlist
				@policyid = @policyid,
				@assessmentid = @assessmentid

	insert into policymember (
				policyid,
				assessmentid,
				registeredserverid)
		select @policyid,
				@newassessmentid,
				registeredserverid
			from #tmp_createassessmentfrompolicy_servertbl

	drop table #tmp_createassessmentfrompolicy_servertbl

	select @err = @@error

	if @err <> 0
	begin
		ROLLBACK TRAN
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '". The member servers could not be copied. '
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	insert into [policyinterview] (
				[policyid],
				[assessmentid],
				[istemplate],
				[interviewname],
				[interviewtext])
		select [policyid],
				@newassessmentid,
				[istemplate],
				[interviewname],
				[interviewtext]
			from [policyinterview]
			where policyid = @policyid
				and assessmentid = @assessmentid

	select @err = @@error

	if @err <> 0
	begin
		ROLLBACK TRAN
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '". The policy internal review notes could not be copied. '
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	-- copy all saved assessment data from the existing policy if creating a draft
	if (@copy in (@copyall))
	begin
		insert into [policyassessment] (
					[policyid],
					[assessmentid],
					[metricid],
					[snapshotid],
					[registeredserverid],
					[connectionname],
					[collectiontime],
					[metricname],
					[metrictype],
					[metricseveritycode],
					[metricseverity],
					[metricseverityvalues],
					[metricdescription],
					[metricreportkey],
					[metricreporttext],
					[severitycode],
					[severity],
					[currentvalue],
					[thresholdvalue])
			select [policyid],
					@newassessmentid,
					[metricid],
					[snapshotid],
					[registeredserverid],
					[connectionname],
					[collectiontime],
					[metricname],
					[metrictype],
					[metricseveritycode],
					[metricseverity],
					[metricseverityvalues],
					[metricdescription],
					[metricreportkey],
					[metricreporttext],
					[severitycode],
					[severity],
					[currentvalue],
					[thresholdvalue]
				from [policyassessment]
				where policyid = @policyid
					and assessmentid = isnull(@currentid, @assessmentid)

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '". The policy assessment info could not be copied. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end

--		insert into [policyassessmentnotes] (
--					[policyid],
--					[assessmentid],
--					[metricid],
--					[snapshotid],
--					[isexplained],
--					[notes])
--			select [policyid],
--					@newassessmentid,
--					[metricid],
--					[snapshotid],
--					[isexplained],
--					[notes]
--				from [policyassessmentnotes]
--				where policyid = @policyid
--					and assessmentid = isnull(@currentid, @assessmentid)
--
--		select @err = @@error
--
--		if @err <> 0
--		begin
--			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '". The policy assessment notes could not be copied. '
--			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
--			RAISERROR (@msg, 16, 1)
--			ROLLBACK TRAN
--			return -1
--		end

		insert into [policyassessmentdetail] (
					[policyid],
					[assessmentid],
					[metricid],
					[snapshotid],
					[detailfinding],
					[databaseid],
					[objecttype],
					[objectid],
					[objectname])
			select [policyid],
					@newassessmentid,
					[metricid],
					[snapshotid],
					[detailfinding],
					[databaseid],
					[objecttype],
					[objectid],
					[objectname]
				from [policyassessmentdetail]
				where policyid = @policyid
					and assessmentid = isnull(@currentid, @assessmentid)

		select @err = @@error

		if @err <> 0
		begin
			ROLLBACK TRAN
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '". The policy assessment detail could not be copied. '
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end

		-- log the creation to the change log
		set @msg = case when @copy = @copyrefresh then N'Refreshed assessment settings' else N'Assessment created' end
		exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg

	end

	set @msg = @category + N' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessmentid ' + CONVERT(NVARCHAR, @policyid) + ' with state ' + dbo.getassessmentstatename(@assessmentstate)
	exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_createinitialjobs]'))
drop procedure [dbo].[isp_sqlsecure_createinitialjobs]
GO

CREATE procedure [dbo].[isp_sqlsecure_createinitialjobs] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Creates initial categories for snapshot and grooming jobs.


	if not exists (select 1 from msdb.dbo.syscategories where category_class = 1 and category_type = 1 and UPPER(name) = 'SQLSECUREJOBS')
	begin
		EXEC msdb.dbo.sp_add_category 'JOB', 'LOCAL', 'SQLsecureJobs'
	end
	
	
	if not exists (select 1 from msdb.dbo.syscategories where category_class = 1 and category_type = 1 and UPPER(name) = 'SQLSECUREGROOMINGJOBS')
	begin
		EXEC msdb.dbo.sp_add_category 'JOB', 'LOCAL', 'SQLsecureGroomingJobs'
	end


	if not exists (select 1 from msdb.dbo.sysjobs where name = 'SQLsecure Grooming Job')
	begin
		EXEC SQLsecure.dbo.isp_sqlsecure_addnewgroomingjob @groomjobname='SQLsecure Grooming Job', @jobdescription='Deletes all SQLsecure snapshots where the server no longer exists or that are older than the server data retention period.', @isenabled=1
	end


GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getaccessinfo]'))
drop procedure [dbo].[isp_sqlsecure_getaccessinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_getaccessinfo] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all logins in the repository and get all the SQLsecure login information

	create table #tmplogins (sid varbinary(85), loginname nvarchar(500), logintype nvarchar(32), serveraccess nvarchar(16), applicationpermission nvarchar(16))

	declare @sid varbinary(85)
	declare @loginname nvarchar(500)
	declare @logintype nvarchar(32)
	declare @access nvarchar(16)
	declare @applicationpermission nvarchar(16)
	declare @uid smallint

	declare @guestenabled nchar(1)

	-- checks if sqlsecure database exists, then no one has permission
	if not exists (select 1 from [master].[dbo].[sysdatabases] where UPPER(name) = 'SQLSECURE')
	begin
		insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission)
		select sid, name, logintype= CASE WHEN isntname = 1 THEN CASE WHEN isntgroup = 1 THEN 'Windows Group' ELSE 'Windows User' END  ELSE 'SQL Server Login' END, accesstype=CASE WHEN denylogin = 1 or hasaccess = 0 THEN 'Deny' ELSE 'Grant' END, permission='None' from [master].[dbo].[syslogins]

		select * from #tmplogins
		return
	end

	-- checks if guest user is enabled
	if exists (select * from [SQLsecure].[dbo].[sysusers] where UPPER(name) = 'GUEST' and status = 2)
	begin
		set @guestenabled = 'Y'
	end

	declare cursor1 cursor for
		select sid, name, logintype= CASE WHEN isntname = 1 THEN CASE WHEN isntgroup = 1 THEN 'Windows Group' ELSE 'Windows User' END  ELSE 'SQL Server Login' END, accesstype=CASE WHEN denylogin = 1 or hasaccess = 0 THEN 'Deny' ELSE 'Grant' END, permission=CASE WHEN sysadmin = 1 THEN 'Permit' ELSE 'None' END from [master].[dbo].[syslogins]
	
	open cursor1
	fetch next from cursor1
	into @sid, @loginname, @logintype, @access, @applicationpermission
	
	while @@fetch_status = 0
	begin
		if (@loginname = SUSER_SNAME(0x01))
		begin
			insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission) values 
			(@sid, @loginname, @logintype, @access, 'Permit')			
		end
		else if (@applicationpermission = 'Permit')
		begin
			insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission) values 
			(@sid, @loginname, @logintype, @access, @applicationpermission)			
		end

		else
		begin

			-- check if access to sqlsecure database
			if exists (select 1 from [SQLsecure].[dbo].[sysusers] b where b.sid = @sid and b.hasdbaccess = 1)
			begin
				-- check if user has db_owner role, if so then permit, otherwise readonly permission
				select @uid = uid from [SQLsecure].[dbo].[sysusers] where sid = @sid 
	
				if exists (select 1 from [SQLsecure].[dbo].[sysmembers] a, [SQLsecure].[dbo].[sysusers] b where a.memberuid = @uid and a.groupuid = b.uid and UPPER(b.name) = 'DB_OWNER')
				begin
					insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission) values 
					(@sid, @loginname, @logintype, @access, 'Readonly')			
				end
				else if exists (select 1 from [SQLsecure].[dbo].[sysmembers] a, [SQLsecure].[dbo].[sysusers] b where a.memberuid = @uid and a.groupuid = b.uid and UPPER(b.name) = 'SQLSECUREVIEW')
				begin
					insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission) values 
					(@sid, @loginname, @logintype, @access, 'Readonly')			
				end
				else 
				begin
					insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission) values 
					(@sid, @loginname, @logintype, @access, 'None')			
				end
			end	
			else
			begin
				-- if not a database user but guest still have permission
				if (@guestenabled = 'Y')
				begin
					insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission) values 
					(@sid, @loginname, @logintype, @access, 'ReadOnly')
				end
				else 
				begin
					insert into #tmplogins (sid, loginname, logintype, serveraccess, applicationpermission) values 
					(@sid, @loginname, @logintype, @access, 'None')
				end
	
			end
		end

	fetch next from cursor1
	into @sid, @loginname, @logintype, @access, @applicationpermission

	end

	close cursor1
	deallocate cursor1

	select * from #tmplogins
	
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getaccessinfo] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getassessmentcomparison]'))
drop procedure [dbo].[isp_sqlsecure_getassessmentcomparison]
GO


CREATE procedure [dbo].[isp_sqlsecure_getassessmentcomparison] 
(
	@policyid int,
	@assessmentid1 int,
	@assessmentid2 int,
	@registeredserverid int=0,
	@diffsonly bit=0
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Compare two policy assessments and return a table of comparison results by metric and server
   -- 	           
   -- 	           Parameters:
   -- 	             @policyid - the id of the policy to compare assessments on
   -- 	             @assessmentid1 - the id of the first assessment
   -- 	             @assessmentid1 - the id of the first assessment
   -- 	             @registeredserverid - the optional id of a server for a server level comparison
   -- 	             @diffsonly - return only the items with differences
   --
   --

	declare @err int, @msg nvarchar(500)
	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Compare', @category=N'Assessment', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @outtbl table (policyid int,
							assessmentid1 int,
							assessmentid2 int,
							registeredserverid int,
							connectionname nvarchar(400),
							metricid int,
							metricname nvarchar(256),
							metrictype nvarchar(32),
							differencesfound bit,
							diffreportsettings bit,
							diffreportsettingstext nvarchar(1024),
							diffmetricsettings bit,
							diffmetricsettingstext nvarchar(1024),
							difffindings bit,
							difffindingstext nvarchar(1024),
							diffnotes bit,
							diffnotestext nvarchar(1024),

							snapshotid1 int,
							collectiontime1 datetime,
							metricseveritycode1 int,
							metricseverity1 nvarchar(16),
							metricseverityvalues1 nvarchar(4000),
							metricdescription1 nvarchar(4000),
							metricreportkey1 nvarchar(32),
							metricreporttext1 nvarchar(4000),
							severitycode1 int,
							severity1 nvarchar(16),
							currentvalue1 nvarchar(1500),
							thresholdvalue1 nvarchar(1500),
							isexplained1 bit,
							severitycodeexplained1 int,
							notes1 nvarchar(4000),

							snapshotid2 int,
							collectiontime2 datetime,
							metricseveritycode2 int,
							metricseverity2 nvarchar(16),
							metricseverityvalues2 nvarchar(4000),
							metricdescription2 nvarchar(4000),
							metricreportkey2 nvarchar(32),
							metricreporttext2 nvarchar(4000),
							severitycode2 int,
							severity2 nvarchar(16),
							currentvalue2 nvarchar(1500),
							thresholdvalue2 nvarchar(1500),
							isexplained2 bit,
							severitycodeexplained2 int,
							notes2 nvarchar(4000)
							)

	declare @policyname nvarchar(128),
			@valid bit

	-- check to make sure assessment1 exists and the data is current before comparison or invalid data may be returned
	select @policyname = policyassessmentname 
		from SQLsecure.dbo.vwpolicy 
		where 
			policyid = @policyid 
			and assessmentid = @assessmentid1

	if (@policyname is null)
	begin
		set @msg = 'Error: Failed to compare assessments. Unable to retrieve Assessment with  policy id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid1)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	create table #snapshottbl (snapshotid int, registeredserverid int, connectionname nvarchar(400), starttime datetime, status nchar(1), baseline bit, version nvarchar(256))
	declare @assessmentdate datetime, @usebaseline bit

	exec [dbo].[isp_sqlsecure_isassessmentdatacurrent]
			@policyid = @policyid,
			@assessmentid = @assessmentid1,
			@valid = @valid output
	if (@valid = 0)
	begin
		-- will return invalid if there are no snapshots, so make sure there is any valid data for the servers with the selections
		select @assessmentdate=assessmentdate, @usebaseline=usebaseline 
			from assessment 
			where policyid = @policyid
				and assessmentid = @assessmentid1

		insert #snapshottbl
			exec @err = [dbo].[isp_sqlsecure_getpolicysnapshotlist] 
				@policyid = @policyid, 
				@assessmentid = @assessmentid1
		if (exists (select snapshotid from #snapshottbl))
		begin
			drop table #snapshottbl
			set @msg = 'Error: Failed to compare assessments. Assessment "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) +  + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid1) + ' does not have current assessment data.'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	end

	-- check to make sure assessment2 exists and the data is current before comparison or invalid data may be returned
	select @policyname = policyassessmentname 
		from SQLsecure.dbo.vwpolicy 
		where 
			policyid = @policyid 
			and assessmentid = @assessmentid2

	if (@policyname is null)
	begin
		drop table #snapshottbl
		set @msg = 'Error: Failed to compare assessments. Unable to retrieve Assessment with  policy id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid2)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	exec [dbo].[isp_sqlsecure_isassessmentdatacurrent]
			@policyid = @policyid,
			@assessmentid = @assessmentid2,
			@valid = @valid output
	if (@valid = 0)
	begin
		-- will return invalid if there are no snapshots, so make sure there is any valid data for the servers with the selections
		select @assessmentdate=assessmentdate, @usebaseline=usebaseline 
			from assessment 
			where policyid = @policyid
				and assessmentid = @assessmentid2

		insert #snapshottbl
			exec @err = [dbo].[isp_sqlsecure_getpolicysnapshotlist] 
				@policyid = @policyid, 
				@assessmentid = @assessmentid2
		if (exists (select snapshotid from #snapshottbl))
		begin
			drop table #snapshottbl
			set @msg = 'Error: Failed to compare assessments. Assessment "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) +  + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid2) + ' does not have current assessment data.'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	end

	drop table #snapshottbl


	-- get the list of servers for the selected policy
	create table #servertbl (registeredserverid int)

	if (@registeredserverid > 0)
	begin
		insert #servertbl (registeredserverid) values (@registeredserverid)
	end
	else
	begin
		-- add the values from both assessments to include all. There may be duplicates, but that is ok
		insert #servertbl
			exec @err = [dbo].[isp_sqlsecure_getpolicymemberlist] 
				@policyid = @policyid, 
				@assessmentid = @assessmentid1
		insert #servertbl
			exec @err = [dbo].[isp_sqlsecure_getpolicymemberlist] 
				@policyid = @policyid, 
				@assessmentid = @assessmentid2
	end

	insert into @outtbl (
				policyid,
				assessmentid1,
				assessmentid2,
				registeredserverid,
				connectionname,
				metricid,
				metricname,
				metrictype,
				diffreportsettings,
				diffreportsettingstext,
				diffmetricsettings,
				diffmetricsettingstext,
				difffindings,
				difffindingstext,
				diffnotes,
				diffnotestext,
				snapshotid1,
				collectiontime1,
				metricseveritycode1,
				metricseverity1,
				metricseverityvalues1,
				metricdescription1,
				metricreportkey1,
				metricreporttext1,
				severitycode1,
				severity1,
				currentvalue1,
				thresholdvalue1,
				isexplained1,
				severitycodeexplained1, 
				notes1,
				snapshotid2,
				collectiontime2,
				metricseveritycode2,
				metricseverity2,
				metricseverityvalues2,
				metricdescription2,
				metricreportkey2,
				metricreporttext2,
				severitycode2,
				severity2,
				currentvalue2,
				thresholdvalue2,
				isexplained2,
				severitycodeexplained2, 
				notes2
					)
		select 
				m1.policyid,
				m1.assessmentid,
				m2.assessmentid,
				isnull(a1.registeredserverid, a2.registeredserverid),
				isnull(a1.connectionname, a2.connectionname),
				m1.metricid,
				isnull(a1.metricname, a2.metricname),
				isnull(a1.metrictype, a2.metrictype), 
				case when (m1.severity <> m2.severity or m1.reportkey <> m2.reportkey or m1.reporttext <> m2.reporttext) then 1 else 0 end,
				ltrim(case when (m1.severity <> m2.severity) then N'Risk Level' else N'' end
						+ case when (m1.reportkey <> m2.reportkey) then N' External Cross Reference' else N'' end 
						+ case when (m1.reporttext <> m2.reporttext) then N' Report Text' else N'' end),
				case when (m1.isenabled <> m2.isenabled or m1.severityvalues <> m2.severityvalues) then 1 else 0 end,
				case when (m1.isenabled <> m2.isenabled) then N'Enabled' else case when (m1.severityvalues <> m2.severityvalues) then N'Criteria' else N'' end end,
				case when (isnull(a1.currentvalue, 1) <> isnull(a2.currentvalue, 2)) then 1 else 0 end,
				case when (isnull(a1.currentvalue, 1) <> isnull(a2.currentvalue, 2)) then N'Findings' else N'' end,
				case when (isnull(convert(int,n1.isexplained),-1) <> isnull(convert(int,n2.isexplained),-1) or isnull(n1.notes,N'') <> isnull(n2.notes,N'')) then 1 else 0 end,
				ltrim(case when (isnull(convert(int,n1.isexplained),-1) <> isnull(convert(int,n2.isexplained),-1)) then N'Explained' else N'' end
						+ case when (isnull(n1.notes,N'') <> isnull(n2.notes,N'')) then N' Notes' else N'' end) as diffnotestext,
				a1.snapshotid,
				a1.collectiontime,
				a1.metricseveritycode,
				a1.metricseverity,
				a1.metricseverityvalues,
				a1.metricdescription,
				a1.metricreportkey,
				a1.metricreporttext,
				a1.severitycode,
				a1.severity,
				a1.currentvalue,
				a1.thresholdvalue,
				n1.isexplained,
				a1.severitycode + case when a1.severitycode > 0 and isnull(n1.isexplained,0) = 0 then 10 else 0 end,
				n1.notes,
				a2.snapshotid,
				a2.collectiontime,
				a2.metricseveritycode,
				a2.metricseverity,
				a2.metricseverityvalues,
				a2.metricdescription,
				a2.metricreportkey,
				a2.metricreporttext,
				a2.severitycode,
				a2.severity,
				a2.currentvalue,
				a2.thresholdvalue,
				n2.isexplained,
				a2.severitycode + case when a2.severitycode > 0 and isnull(n2.isexplained,0) = 0 then 10 else 0 end,
				n2.notes
			from (policymetric m1 
						left join policyassessment a1 
							on a1.policyid = m1.policyid 
								and a1.assessmentid = m1.assessmentid 
								and a1.metricid=m1.metricid 
						left join policyassessmentnotes n1 
							on a1.policyid = n1.policyid 
								and a1.assessmentid = n1.assessmentid 
								and a1.metricid = n1.metricid 
								and a1.snapshotid = n1.snapshotid
					) 
					inner join (policymetric m2
						left join policyassessment a2 
							on a2.policyid = m2.policyid 
								and a2.assessmentid = m2.assessmentid 
								and a2.metricid=m2.metricid 
						left join policyassessmentnotes n2 
							on a2.policyid = n2.policyid 
								and a2.assessmentid = n2.assessmentid 
								and a2.metricid = n2.metricid 
								and a2.snapshotid = n2.snapshotid
								) 
						on m1.policyid = m2.policyid 
							and m1.metricid=m2.metricid 
							and isnull(a1.registeredserverid,a2.registeredserverid) = isnull(a2.registeredserverid,a1.registeredserverid)
			where m1.policyid = @policyid
				and m1.assessmentid = @assessmentid1
				and m2.assessmentid = @assessmentid2
				and (m1.isenabled = 1 or m2.isenabled = 1)
				and (a1.registeredserverid in (select registeredserverid from #servertbl)
						or a2.registeredserverid in (select registeredserverid from #servertbl))

	update @outtbl set differencesfound = diffreportsettings | diffmetricsettings | difffindings | diffnotes

	if (@diffsonly = 1)
		select * from @outtbl where differencesfound = 1
	else
		select * from @outtbl

	drop table #servertbl
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getassessmentcomparison] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getcompatibleversions]'))
drop procedure [dbo].[isp_sqlsecure_getcompatibleversions]
GO

CREATE procedure [dbo].[isp_sqlsecure_getcompatibleversions] (@dtype nvarchar(16))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return all compatible version correspond to the given type. Type can be schema or dal
   -- 	           

	exec('select compatibleversion from compatibleversion where UPPER(objecttype) = UPPER(''' + @dtype + ''')')

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getcompatibleversions]  TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getcoveringpermission]'))
drop procedure [dbo].[isp_sqlsecure_getcoveringpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getcoveringpermission] (@parentpermissionlevel nvarchar(128), @parentcoveringpermission nvarchar(128), @permissionlevel nvarchar(128))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get a list of covering or container permissions
   -- 	           

	create table #tmpcoveringpermission (permission nvarchar(128))

	insert into #tmpcoveringpermission (permission) select distinct permissionname from coveringpermissionhierarchy where UPPER(parentpermissionlevel) = UPPER(@parentpermissionlevel) and UPPER(parentcoveringpermission) = UPPER(@parentcoveringpermission) and UPPER(permissionlevel) = UPPER(@permissionlevel) union select distinct permissionname from coveringpermissionhierarchy where UPPER(parentpermissionlevel) = UPPER(@parentpermissionlevel) and UPPER(permissionlevel) = UPPER(@permissionlevel) and UPPER(coveringpermissionname) in (select distinct UPPER(permissionname) from coveringpermissionhierarchy where UPPER(parentpermissionlevel) = UPPER(@parentpermissionlevel) and UPPER(parentcoveringpermission) = UPPER(@parentcoveringpermission) and UPPER(permissionlevel) = UPPER(@permissionlevel))

	delete from #tmpcoveringpermission where UPPER(permission) in ('RECEIVE', 
'ALTER ANY ASSEMBLY',
'ALTER ANY SCHEMA',
'ALTER ANY ROLE',
'ALTER ANY MESSAGE TYPE',
'ALTER ANY SERVICE',
'ALTER ANY CONTRACT',
'ALTER ANY REMOTE SERVICE BINDING',
'ALTER ANY ROUTE',
'ALTER ANY SYMMETRIC KEY',
'ALTER ANY ASYMMETRIC KEY',
'ALTER ANY FULLTEXT CATALOG',
'ALTER ANY CERTIFICATE',
'ALTER ANY DATABASE EVENT NOTIFICATION',
'ALTER ANY ENDPOINT',
'ALTER ANY DATABASE',
'ALTER ANY EVENT NOTIFICATION')


	exec('select * from #tmpcoveringpermission')
	
	drop table #tmpcoveringpermission

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getcoveringpermission] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getdatabaseobjectinfo]'))
drop procedure [dbo].[isp_sqlsecure_getdatabaseobjectinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_getdatabaseobjectinfo] (@snapshotid int, @dbid int, @classid int, @parentobjectid int, @objectid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return database object information identified by ids.
   -- 	           
	
SELECT 
	dbobj.name as name,
	dbobj.type as type,
	dbobj.owner as ownerid,
	dbuser.name AS owner, 
	dbobj.schemaid AS schemaid,
	dbschema.schemaname AS schemaname, 
	dbuser2.name AS schemaowner 
FROM databaseobject AS dbobj
    LEFT OUTER JOIN databaseprincipal AS dbuser ON (dbuser.snapshotid = dbobj.snapshotid AND dbuser.dbid = dbobj.dbid AND dbobj.owner = dbuser.uid)
    LEFT OUTER JOIN databaseschema AS dbschema ON (dbschema.snapshotid = dbobj.snapshotid AND dbschema.dbid = dbobj.dbid AND dbobj.schemaid = dbschema.schemaid)
    LEFT OUTER JOIN databaseprincipal AS dbuser2 ON (dbuser2.snapshotid = dbobj.snapshotid AND dbuser2.dbid = dbobj.dbid AND dbobj.schemaid = dbschema.schemaid AND dbuser2.uid = dbschema.uid)
WHERE 
    dbobj.snapshotid = @snapshotid
    AND dbobj.dbid = @dbid 
    AND dbobj.classid = @classid 
    AND dbobj.parentobjectid = @parentobjectid 
    AND dbobj.objectid = @objectid

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getdatabaseobjectinfo]  TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getdatabaseuserparents]'))
drop procedure [dbo].[isp_sqlsecure_getdatabaseuserparents]
GO

create procedure [dbo].[isp_sqlsecure_getdatabaseuserparents] (@snapshotid int, @dbid int, @inputuid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all database role group parents given the snapshot id, dbid and uid

	create table #tmpuid (uid int)
	create table #tmpuid2 (dbid int, uid int)
	create table #tmpuid3 (uid int)

	declare @count int
	declare @rcount int
	declare @uid int

	-- get all immediate parent uids
	insert into #tmpuid (uid) (select groupuid from databaserolemember where snapshotid = @snapshotid and rolememberuid = @inputuid and dbid = @dbid)
	set @count = @@rowcount
	set @rcount = 1

	-- if there is at least one parent then try to find all parents
	while (@count > 0 and @rcount < 100)
	begin
		-- go thru' tmpuid table, for each sid try to find its parents
		declare myc0 cursor for
			select uid from #tmpuid
		
		open myc0
		fetch next from myc0
		into @uid
		
		while @@fetch_status = 0
		begin	
			-- copy uid to tmp table
			insert into #tmpuid2 (dbid, uid) values (@dbid, @uid)	
			
			-- copy all new parent uid to another tmp table
			insert into #tmpuid3 (uid) (select groupuid from databaserolemember where snapshotid = @snapshotid and dbid = @dbid and rolememberuid = @uid)

			fetch next from myc0
			into @uid	
		end
	
		close myc0
		deallocate myc0	

		delete from #tmpuid

		-- copy all new parent uid to holding table
		insert into #tmpuid (uid) (select uid from #tmpuid3)				
		
		delete from #tmpuid3

		-- if there is no more new parent then stop
		set @count = @@rowcount

		set @rcount = @rcount + 1
	end

	-- add itself to the table
	insert into #tmpuid2(dbid, uid) values (@dbid, @inputuid)

	-- return all rows from the holding table
	exec ('select distinct dbid, uid from #tmpuid2')

	drop table #tmpuid
	drop table #tmpuid2
	drop table #tmpuid3


GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getdatabaseuserparents] TO [SQLSecureView]

GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getdatabaseuserpermissions]'))
drop procedure [dbo].[isp_sqlsecure_getdatabaseuserpermissions]
GO

CREATE procedure [dbo].[isp_sqlsecure_getdatabaseuserpermissions] (@connectionname nvarchar(400), @database nvarchar(256), @rundate datetime=null, @usertablesonly bit=0, @includesource bit=0)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return all permissions for all users who can access a database
   -- 	           

	declare @snapshotid int, @logintype nchar(1), @sid varbinary(85), @name nvarchar(128), @databaseid int, @errmsg nvarchar(500)


	-- get the snapshotid for the server and rundate
	-- if the server is not valid then return error
	if not exists (select * from serversnapshot where  upper(connectionname) = upper(@connectionname))
	begin
		set @errmsg = 'Error: SQL Server ' + @connectionname + ' not valid'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	select @snapshotid=snapshotid from dbo.getsnapshotlist(@rundate, 0) where upper(connectionname) = upper(@connectionname)

	-- if there is not a valid snapshot then return error
	if (@snapshotid is null)
	begin
		set @errmsg = 'Error: A valid snapshot was not found for the specified run date'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end


	-- get the databaseid
	-- if the database is not valid then return error
	if (@database IS NOT NULL and @database <> '')
	begin
		if exists (select * from serversnapshot where snapshotid = @snapshotid and casesensitivemode = 'Y')
		begin

			if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and CONVERT(varbinary, databasename) = CONVERT(varbinary, @database))
			begin
				set @errmsg = 'Error: Invalid database name'
				RAISERROR (@errmsg, 16, 1)
				return
			end 
		end
		else
		begin
			if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and UPPER(databasename) = UPPER(@database))
			begin
				set @errmsg = 'Error: Invalid database name'
				RAISERROR (@errmsg, 16, 1)
				return
			end 
		end
	end

	select @databaseid = dbid from sqldatabase where snapshotid = @snapshotid and databasename = @database

	-- pull the logins to a temp table to combine from the different sources and eliminate duplicates
	create table #tmplogin ([type] nchar(1), [sid] varbinary(85), [name] nvarchar(128))

	-- get a list of all the serverprincipals that have directly defined access to the database
	insert into #tmplogin
		select distinct p.type, p.sid, p.name
			from databaseprincipal u
				inner join serverprincipal p on (u.snapshotid = p.snapshotid and u.usersid = p.sid)
				inner join sqldatabase d on (u.snapshotid = d.snapshotid and u.dbid = d.dbid)
			where d.snapshotid=@snapshotid
				and d.dbid=@databaseid
	-- add all the sysadmins not already included
	insert into #tmplogin
		select p.type, p.sid, p.name
			from serverprincipal p
				inner join serverrolemember m on (m.snapshotid = p.snapshotid and m.memberprincipalid = p.principalid)
			where p.snapshotid=@snapshotid
				and m.principalid = dbo.getserverroleprincipalid(N'sysadmin')
				and p.sid not in (select [sid] from #tmplogin)
	-- add all windows accounts not already included
	insert into #tmplogin
		select 'W' as [type], p.sid, p.name
			from windowsaccount p
			where p.snapshotid=@snapshotid
				and p.sid not in (select [sid] from #tmplogin)

	-- loop through the logins getting the permissions for each one into the #tmpserverpermission table
	declare @type nchar(1), @inputsid varbinary(85), @sqllogin nvarchar(400)
	create table #tmpserverpermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))

	-- used for tracking statistics
	declare @exectime datetime, @count int, @lastcount int
	select @lastcount=0

	declare mycursor cursor for
		select [type], [sid], [name] from #tmplogin
	open mycursor
	fetch next from mycursor into @logintype, @sid, @name

	while (@@fetch_status = 0)
	begin
		select @type=case @logintype when N'S' then N'S' else N'W' end
		select @inputsid=case @type when N'S' then NULL else @sid end,
				@sqllogin=case when @type = N'S' then @name else NULL end
		-- used for tracking statistics
		print 'Processing login ' + @name + '   type=' + @type + ' (' + @logintype + ')'
		select @exectime = getdate(), @count=0

		exec [dbo].[isp_sqlsecure_getuserpermission]
				@snapshotid=@snapshotid,
				@logintype=@type,
				@inputsid=@inputsid,
				@sqllogin=@sqllogin,
				@databasename=@database,
				@permissiontype=N'E'

		-- used for tracking statistics
		select @count=count(*) from #tmpserverpermission
		print '    Added ' + right(space(6) + cast(@count-@lastcount as nvarchar), 7) + ' records in ' + right(space(8) + cast(datediff(ms, @exectime, getdate()) as nvarchar), 9) + ' ms'
		select @lastcount = @count

		fetch next from mycursor into @logintype, @sid, @name
	end

	close mycursor
	deallocate mycursor


	--if user tables and views only, remove all objects except tables, views, columns and the database and server
	if (@usertablesonly = 1)
		delete from #tmpserverpermission
			where permissionlevel='SCH'
					or (permissionlevel='OBJ' and objecttype not in ('V', 'U', 'iCO'))
					or (permissionlevel='SV' and objecttype not in ('iSRV'))
					--or (permissionlevel='OBJ' and objecttype = ('V') and ownername in ('sys', 'INFORMATION_SCHEMA'))

	declare @sql nvarchar(4000)
	select @sql = 'select distinct
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						parentobjectid,
						objectid,
						objectname, 
						qualifiedname,
						objecttype=CASE WHEN a.objecttype IS NULL THEN dbo.getclassobjecttype(classid) ELSE a.objecttype END, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
						inherited'

	if (@includesource = 1)
		select @sql = @sql + ',
						sourcename,
						sourcetype,
						sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END,
						sourcepermission'

	select @sql = @sql + ' from #tmpserverpermission a
							left outer join objecttype b on a.objecttype = b.objecttype'

	if (@includesource = 1)
		select @sql = @sql + ' left outer join objecttype c on a.sourcetype = c.objecttype'

	select @sql = @sql + ' order by logintype, loginname, permissionlevel, objecttype, objectname, permission'

	exec (@sql)

	drop table #tmpserverpermission

	drop table #tmplogin

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getdatabaseuserpermissions] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getdatabaseuserrole]'))
drop procedure [dbo].[isp_sqlsecure_getdatabaseuserrole]
GO

CREATE procedure [dbo].[isp_sqlsecure_getdatabaseuserrole] (@snapshotid int, @logintype nchar(1), @inputsid varbinary(85), @sqllogin nvarchar(128), @databasename nvarchar(256))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all the database roles for the given Windows login or sql login

	declare @loginname nvarchar(128)
	declare @errmsg nvarchar(500)
	declare @databaseid int

	-- if there is not such snapshotid then return error
	if not exists (select * from serversnapshot where snapshotid = @snapshotid)
	begin
		set @errmsg = 'Error: Snapshot id ' + CONVERT(varchar(10), @snapshotid) + ' not found'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	declare @iscasesensitive nchar(1)
	set @iscasesensitive = 'N'

	select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

	set @databaseid = -1

	if (@databasename IS NOT NULL and @databasename <> '')
	begin
		if (@iscasesensitive = 'Y')
		begin
			if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and CONVERT(varbinary, databasename) = CONVERT(varbinary, @databasename))
			begin
				set @errmsg = 'Error: Invalid database name'
				RAISERROR (@errmsg, 16, 1)
				return
			end 
		end
		else
		begin
			if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and UPPER(databasename) = UPPER(@databasename))
			begin
				set @errmsg = 'Error: Invalid database name'
				RAISERROR (@errmsg, 16, 1)
				return
			end 

		end
	end

	select @databaseid = dbid from sqldatabase where snapshotid = @snapshotid and databasename = @databasename

	create table #tmplogins (sid varbinary(85), principalid int, name nvarchar(128), type nchar(1), serveraccess nchar(1), serverdeny nchar(1), disabled nchar(1))

	if (@logintype = 'W')
	begin
		-- checks if the login exists in sql server
		if exists (select * from windowsaccount where snapshotid = @snapshotid and sid = @inputsid)
		begin
	
			create table #tmpsid (sid varbinary(85))
		
			-- insert current login to tmp table
			insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select sid, principalid, name, type, serveraccess, serverdeny, disabled from serverprincipal where snapshotid = @snapshotid and sid = @inputsid)
		
			-- get all windows parents groups
			insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid
		
			-- insert all groups in serverprincipal table
			insert into #tmplogins (sid, principalid, name, type, serveraccess, disabled) (select a.sid, a.principalid, a.name, a.type, a.serveraccess, a.disabled from serverprincipal a, #tmpsid b where a.serveraccess = 'Y' and a.serverdeny = 'N' and a.snapshotid = @snapshotid and a.sid = b.sid)

			select @loginname = name from serverprincipal where sid = @inputsid

			drop table #tmpsid				
			end 
	end
	else -- sql login type
	begin
		insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled from serverprincipal a where a.snapshotid = @snapshotid and name=@sqllogin)
		set @loginname = @sqllogin
	end

	-- Create a temp table to store all database users information

	create table #tmpdbusers (snapshotid int, sid varbinary(85), serverprincipalname nvarchar(400), serverprincipaltype nchar(1), serveraccess nchar(1), dbid int, databaseprincipalname nvarchar(400), databaseprincipaltype nchar(1), isalias nchar(1), role nvarchar(64), hasalias nchar(1))

	-- if there is no user or invalid user then return nothing
	if not exists (select 1 from #tmplogins)
	begin
		select * from #tmpdbusers
		return
	end

	-- check if user 'guest' is valid. If so, then current login will have public database role even there is
   	-- no databse user map to it.
	if exists (select * from databaseprincipal a where UPPER(a.name) = 'GUEST' and UPPER(a.hasaccess) ='Y' and a.snapshotid = @snapshotid and a.dbid = @databaseid) 
	begin
		insert into #tmpdbusers (snapshotid, sid, serverprincipalname, serverprincipaltype, serveraccess, dbid, databaseprincipalname, databaseprincipaltype, isalias, role, hasalias)
		(
		select a.snapshotid, a.sid, serverprincipalname, serverprincipaltype, a.serveraccess, a.dbid, databaseprincipalname, databaseprincipaltype, isalias, role, dbo.isuseraliased(a.snapshotid, a.dbid, a.uid) from vwdatabasefixedrole a, #tmplogins b where a.snapshotid = @snapshotid and a.sid = b.sid and a.dbid = @databaseid 
		union
		select @snapshotid, null, null, null, null,  dbid=a.dbid, databaseprincipalname='guest', databaseprincipaltype=a.type, isalias=a.isalias, role=a.name, 'N' from databaseprincipal a where a.snapshotid = @snapshotid and a.dbid = @databaseid and type = 'R' and uid = 0
		union
		select b.snapshotid, b.sid, serverprincipalname=b.name, serverprincipaltype=b.type, b.serveraccess, dbid=a.dbid, databaseprincipalname=c.name, databaseprincipaltype=c.type, isalias=a.isalias, role=null, 'Y' from databaseprincipal a, serverprincipal b, databaseprincipal c where a.snapshotid = @snapshotid and a.dbid = @databaseid and a.isalias = 'Y' and a.usersid = b.sid and b.snapshotid = a.snapshotid and c.snapshotid = a.snapshotid and c.dbid = a.dbid and c.uid = a.altuid and b.name IN (select name from #tmplogins)
		)
	end
	else
	begin
		insert into #tmpdbusers (snapshotid, sid, serverprincipalname, serverprincipaltype, serveraccess, dbid, databaseprincipalname, databaseprincipaltype, isalias, role, hasalias)
		(
		select a.snapshotid, a.sid, serverprincipalname, serverprincipaltype, a.serveraccess, a.dbid, databaseprincipalname, databaseprincipaltype, isalias, role, dbo.isuseraliased(a.snapshotid, a.dbid, a.uid) from vwdatabasefixedrole a, #tmplogins b where a.snapshotid = @snapshotid and a.sid = b.sid and a.dbid = @databaseid 
		union
		select b.snapshotid, b.sid, serverprincipalname=b.name, serverprincipaltype=b.type, b.serveraccess, dbid=a.dbid, databaseprincipalname=c.name, databaseprincipaltype=c.type, isalias=a.isalias, role=null, 'Y' from databaseprincipal a, serverprincipal b, databaseprincipal c where a.snapshotid = @snapshotid and a.dbid = @databaseid and a.isalias = 'Y' and a.usersid = b.sid and b.snapshotid = a.snapshotid and c.snapshotid = a.snapshotid and c.dbid = a.dbid and c.uid = a.altuid and b.name IN (select name from #tmplogins)
		)
	end

	declare @sid varbinary(85)
	declare @dbid nvarchar(500)
	declare @databaseprincipalname nvarchar(500)
	declare @isalias nchar(1)

	if not exists (select 1 from #tmpdbusers where UPPER(databaseprincipalname) <> 'GUEST')
	begin
		-- if there is no roles then just all a single row for the login and user
		insert into #tmpdbusers (snapshotid, sid, serverprincipalname, serverprincipaltype, serveraccess, dbid, databaseprincipalname, databaseprincipaltype)
		select a.snapshotid, a.sid, a.name, a.type, a.serveraccess, b.dbid, b.name, b.type from serverprincipal a, databaseprincipal b, #tmplogins c where a.snapshotid = @snapshotid and a.sid = b.usersid and b.dbid = @databaseid and b.snapshotid = a.snapshotid and c.principalid = a.principalid and c.sid = a.sid
	end

	declare myc100 cursor for
		select sid, dbid, databaseprincipalname from #tmpdbusers where isalias = 'N' and databaseprincipaltype ='U'
	
	open myc100
	fetch next from myc100
	into @sid, @dbid, @databaseprincipalname
	
	while @@fetch_status = 0
	begin
		if exists (select 1 from databaseprincipal a, databaseprincipal b where b.snapshotid = a.snapshotid and b.dbid = a.dbid and b.altuid = a.uid and b.isalias = 'Y' and a.snapshotid = @snapshotid and a.dbid = @dbid)
		begin
			update #tmpdbusers set hasalias = 'Y' where sid = @sid and dbid = @dbid and databaseprincipalname = @databaseprincipalname
		end

		fetch next from myc100
		into @sid, @dbid, @databaseprincipalname
	end
	
	close myc100
	deallocate myc100	

	select distinct * from #tmpdbusers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getdatabaseuserrole] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getdatabaseuserroles]'))
drop procedure [dbo].[isp_sqlsecure_getdatabaseuserroles]
GO

CREATE procedure [dbo].[isp_sqlsecure_getdatabaseuserroles] (@snapshotid int, @dbid int, @inputuid int, @idonly bit=1)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all database roles given the snapshot id and dbid and uid

	create table #tmpuid (uid int)
	create table #tmpuid2 (uid int)
	create table #tmpuid3 (uid int)

	declare @count int
	declare @rcount int
	declare @uid int

	-- get all immediate parent uids
	insert into #tmpuid (uid) (select groupuid from databaserolemember where snapshotid = @snapshotid and dbid = @dbid and rolememberuid = @inputuid)
	set @count = @@rowcount
	set @rcount = 1

	-- if there is at least one parent then try to find all parents
	while (@count > 0 and @rcount < 100)
	begin

		-- go thru' tmpuid table, for each uid try to find its parents
		declare myc0 cursor for
			select uid from #tmpuid
		
		open myc0
		fetch next from myc0
		into @uid
		
		while @@fetch_status = 0
		begin
			-- copy uid to tmp table
			insert into #tmpuid2 (uid) values (@uid)	
			
			-- copy all new parent uid to another tmp table
			insert into #tmpuid3 (uid) (select groupuid from databaserolemember where snapshotid = @snapshotid and dbid = @dbid and rolememberuid = @uid)

			fetch next from myc0
			into @uid	
		end
	
		close myc0
		deallocate myc0	

		delete from #tmpuid

		-- copy all new parent uid to holding table
		insert into #tmpuid (uid) (select uid from #tmpuid3 where uid not in (select uid from #tmpuid2))				
		
		delete from #tmpuid3

		-- if there is no more new parent then stop
		set @count = @@rowcount

		set @rcount = @rcount + 1
	end

	-- add itself to the list
	insert into #tmpuid2 (uid) values (@inputuid)

	-- return all rows from the holding table
	declare @sql nvarchar(1024)
	if (@idonly = 1)
		select @sql = 'select distinct uid from #tmpuid2'
	else
		select @sql = 'select * from vwdatabaseprincipal where snapshotid = ' + convert(nvarchar, @snapshotid) + ' and dbid = ' + convert(nvarchar, @dbid) + ' and uid in (select distinct uid from #tmpuid2)'
	exec (@sql)

	drop table #tmpuid
	drop table #tmpuid2
	drop table #tmpuid3

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getdatabaseuserroles] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getdetailedpermission]'))
drop procedure [dbo].[isp_sqlsecure_getdetailedpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getdetailedpermission] (@permissionlevel nvarchar(128), @coveringpermission nvarchar(128))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get a list of detailed permissions
   -- 	           
	
	create table #tmpdetailedpermission (permission nvarchar(128))

	insert into #tmpdetailedpermission (permission) select distinct permissionname from coveringpermissionhierarchy where UPPER(coveringpermissionname) = @coveringpermission and UPPER(permissionlevel) = @permissionlevel

	exec('select * from #tmpdetailedpermission')
	
	drop table #tmpdetailedpermission

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getdetailedpermission] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getfixedloginrole]'))
drop procedure [dbo].[isp_sqlsecure_getfixedloginrole]
GO

CREATE procedure [dbo].[isp_sqlsecure_getfixedloginrole] (@snapshotid int, @logintype nchar(1), @inputsid varbinary(85), @sqllogin nvarchar(128))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all the fixed server role for the given Windows login or sql login

	declare @loginname nvarchar(128)
	declare @errmsg nvarchar(500)

	-- if there is not such snapshotid then return error
	if not exists (select * from serversnapshot where snapshotid = @snapshotid)
	begin
		set @errmsg = 'Error: Snapshot id ' + CONVERT(varchar(10), @snapshotid) + ' not found'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	create table #tmplogins (sid varbinary(85), principalid int, name nvarchar(128), type nchar(1), serveraccess nchar(1), serverdeny nchar(1), disabled nchar(1))

	if (UPPER(@logintype) = 'W')
	begin
	
		create table #tmpsid (sid varbinary(85))
	
		-- insert current login to tmp table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select sid, principalid, name, type, serveraccess, serverdeny, disabled from serverprincipal where snapshotid = @snapshotid and sid = @inputsid)
	
		-- get all windows parents groups
		insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid
	
		-- insert all groups in serverprincipal table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, disabled) (select a.sid, a.principalid, a.name, a.type, a.serveraccess, a.disabled from serverprincipal a, #tmpsid b where a.snapshotid = @snapshotid and a.sid = b.sid)

		select @loginname = name from serverprincipal where sid = @inputsid

		drop table #tmpsid				
	end
	else -- sql login type
	begin
		insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled from serverprincipal a where a.snapshotid = @snapshotid and name=@sqllogin)
		set @loginname = @sqllogin
	end

	if exists (select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmproles%')
	begin
		--select a.*, access=CASE WHEN a.serveraccess='Y' and a.serverdeny='N' THEN 'Permit' WHEN a.serverdeny='Y' THEN 'Deny' ELSE 'None'  END from vwloginfixedserverrole a, #tmplogins b where a.snapshotid = @snapshotid and a.principalid = b.principalid
		insert into #tmproles (rolename) select distinct CASE WHEN a.rolename IS NULL THEN '' ELSE a.rolename END from vwloginfixedserverrole a, #tmplogins b where a.snapshotid = @snapshotid and a.principalid = b.principalid
		return
	end

	select a.*, access=CASE WHEN a.serveraccess='Y' and a.serverdeny='N' THEN 'Permit' WHEN a.serverdeny='Y' THEN 'Deny' ELSE 'None'  END from vwloginfixedserverrole a, #tmplogins b where a.snapshotid = @snapshotid and a.principalid = b.principalid


GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getfixedloginrole] TO [SQLSecureView]

GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getguestenabledservers]'))
drop procedure [dbo].[isp_sqlsecure_getguestenabledservers]
GO

CREATE procedure [dbo].[isp_sqlsecure_getguestenabledservers] (@connectionname nvarchar(400)='ALL')
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all the databases that have guest users enabled.


	if (@connectionname = 'ALL' or @connectionname ='')
		select distinct a.connectionname, b.databasename, b.owner from serversnapshot a, sqldatabase b where a.snapshotid = b.snapshotid
	else
		select distinct a.connectionname, b.databasename, b.owner from serversnapshot a, sqldatabase b where a.snapshotid = b.snapshotid and UPPER(a.connectionname) = @connectionname

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getguestenabledservers] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getjobstatus]'))
drop procedure [dbo].[isp_sqlsecure_getjobstatus]
GO

CREATE procedure [dbo].[isp_sqlsecure_getjobstatus] (@jobid uniqueidentifier)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Check the current job status
   -- 	           

	create table #tmpjobstatus (result nvarchar(32))

	create table #xp_results (
		job_id  uniqueidentifier not null,
		last_run_date         int              not null,
		last_run_time         int              not null,
		next_run_date         int              not null,
		next_run_time         int              not null,
		next_run_schedule_id  int              not null,
		requested_to_run      int              not null, -- bool
		request_source        int              not null,
		request_source_id     sysname          collate database_default null,
		running               int              not null, -- bool
		current_step          int              not null,
		current_retry_attempt int              not null,
		job_state             int              not null)

	declare @is_sysadmin int
	declare @job_owner   sysname
	declare @is_running int
	
	select @is_sysadmin = isnull(is_srvrolemember(N'sysadmin'), 0)
	select @job_owner = suser_sname()

	insert into #xp_results execute master.dbo.xp_sqlagent_enum_jobs @is_sysadmin, @job_owner, @jobid

	select @is_running = running from #xp_results

	if (@is_running = 1)
	begin
		insert into #tmpjobstatus (result) values ('Running')
	end
	else
	begin
		if not exists (select 1 from msdb.dbo.sysjobs where job_id = @jobid)
		begin
			insert into #tmpjobstatus (result) values ('Not found')
		end
		else if exists (select 1 from msdb.dbo.sysjobhistory where job_id = @jobid)
		begin
			insert into #tmpjobstatus (result) select CASE WHEN run_status = 0 THEN 'Failed' WHEN run_status = 1 THEN 'Succeeded' WHEN run_status = 2 THEN 'Retry' WHEN run_status = 3 THEN 'Canceled' WHEN run_status = 4 THEN 'In progress' ELSE 'Unknown' END from msdb.dbo.sysjobhistory where job_id=@jobid and instance_id = (select max(instance_id) from msdb.dbo.sysjobhistory where job_id = @jobid)
		end
		else
		begin
			insert into #tmpjobstatus (result) values ('Not running')
		end
	end

	select * from #tmpjobstatus

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getjobstatus] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getmsdbvalidroleslist]'))
drop procedure [dbo].[isp_sqlsecure_getmsdbvalidroleslist]
GO


CREATE procedure [dbo].[isp_sqlsecure_getmsdbvalidroleslist]
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Get a list of valid roles that have permissions on stored procedures in the MSDB database
   --				by default, this includes the Agent roles and Reporting Services roles installed by SQL Server
   --
   --			  Any roles listed here will not show as risks when they have access to stored procedures in MSDB

	DECLARE @mytable table (rolename nvarchar(128))

	-- Note: these names ARE case sensitive on a case sensitive server

	--SQL Server Agent 2000
	INSERT INTO @mytable VALUES ('TargetServersRole')		-- this role does not provide create capability by default

	--SQL Server Agent 2005
	INSERT INTO @mytable VALUES ('SQLAgentUserRole')
	INSERT INTO @mytable VALUES ('SQLAgentReaderRole')
	INSERT INTO @mytable VALUES ('SQLAgentOperatorRole')

	--SQL Server Reporting Services
	INSERT INTO @mytable VALUES ('RSExecRole')


	SELECT rolename FROM @mytable

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getmsdbvalidroleslist] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getobjectpermission]'))
drop procedure [dbo].[isp_sqlsecure_getobjectpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getobjectpermission]
(
	@snapshotid int,
	@databaseid int=-1,
	@objectid int=-1,
	@classid int,
	@permissiontype nchar(1)=null,
	@iscolumn nchar(1)='N',
	@parentobjectid int=null
)
WITH ENCRYPTION
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all object permission given the snapshotid, sid or sql login

	declare @loginname nvarchar(128)
	declare @logintype nvarchar(1)
	declare @inputsid varbinary(128)
	declare @inputprincipalid int
	declare @connectionname nvarchar(400)
	declare @errmsg nvarchar(500)
	declare @sql2000 nvarchar(1)
	declare @geteffective nchar(1)
	declare @databasename nvarchar(128)
	declare @principalid int
	declare @uid int

	if (@permissiontype = 'B' or @permissiontype IS NULL)
		set @geteffective = 'Y'
	else if (@permissiontype = 'X')
		set @geteffective = 'N'
	else if (@permissiontype = 'E')
		set @geteffective = 'Y'

	if (@iscolumn IS NULL)
		set @iscolumn = 'Y'

	-- if there is not such snapshotid then return error
	if not exists (select * from serversnapshot where snapshotid = @snapshotid)
	begin
		set @errmsg = 'Error: Snapshot id ' + CONVERT(varchar(10), @snapshotid) + ' not found'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if (@classid < 0)
	begin
		set @errmsg = 'Error: Class id cannot be less than zero'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if not exists (select 1 from classtype where classid = @classid)
	begin
		set @errmsg = 'Error: Invalid class id'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- check if database name is not found
	if (@classid not in (100, 101, 105,108))
	begin
		if (@databaseid < 0)
		begin
			set @errmsg = 'Error: Invalid database name'
			RAISERROR (@errmsg, 16, 1)
			return
		end
	
	end

	select @databasename = databasename from sqldatabase where snapshotid = @snapshotid and dbid = @databaseid

	-- check if the snapshot server is sql 2000 or sql 2005, it is important to differentiate them for getting column permission processing
	select @sql2000 = dbo.issql2000(@snapshotid)

	create table #tmplogins (sid varbinary(85), principalid int, name nvarchar(128), type nchar(1), serveraccess nchar(1), serverdeny nchar(1), disabled nchar(1))
	create table #tmppermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), objecttype nvarchar(64), objecttypename nvarchar(256), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))
	create table #tmppermission2 (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), objecttype nvarchar(64), objecttypename nvarchar(256), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))
	create table #tmpdenypermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), objecttype nvarchar(64), objecttypename nvarchar(256), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))

	create table #tmpsysadmin (principalid int, sysadmin nchar(1))

	-- TODO: FIND ALL THE LOGINS ASSOCIATED WITH ALL THE DATABASE USERS

	if (@classid IN (100, 105,108))
	begin

		declare cursor1 cursor for
				select distinct a.principalid, a.name, a.sid, a.type from serverprincipal a where a.snapshotid = @snapshotid
	
	end
	else if (@classid = 101)
	begin

		declare cursor1 cursor for
				select distinct a.principalid, a.name, a.sid, a.type from serverprincipal a where a.snapshotid = @snapshotid and a.principalid = @objectid
	
	end
	else
	begin
		declare cursor1 cursor for
				select distinct a.principalid, a.name, a.sid, a.type from serverprincipal a, databaseprincipal b where a.snapshotid = @snapshotid and b.usersid = a.sid and b.snapshotid = a.snapshotid and UPPER(b.type) IN ('U', 'G', 'R', 'S') and a.sid IS NOT NULL and b.dbid = @databaseid

	end

	open cursor1
	fetch next from cursor1
	into @inputprincipalid, @loginname, @inputsid, @logintype
	
	while @@fetch_status = 0
	begin

		if (@logintype = 'W')
		begin
			-- checks if the login exists in sql server
			create table #tmpsid (sid varbinary(85))
		
			-- insert current login to tmp table
			insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select distinct /* ssz add distinct */  sid, principalid, name, type, serveraccess, serverdeny, disabled from serverprincipal where snapshotid = @snapshotid and sid = @inputsid)
		
			-- get all windows parents groups
			insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid
		
			-- insert all groups in serverprincipal table
			insert into #tmplogins (sid, principalid, name, type, serveraccess, disabled) (select distinct /* ssz add distinct */  a.sid, a.principalid, a.name, a.type, a.serveraccess, a.disabled from serverprincipal a, #tmpsid b where a.serveraccess = 'Y' and a.serverdeny = 'N' and a.snapshotid = @snapshotid and a.sid = b.sid)

			drop table #tmpsid				
		end
		else -- sql login type
		begin
			insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select distinct /* ssz add distinct */  a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled from serverprincipal a where a.snapshotid = @snapshotid and name=@loginname)
		end

	fetch next from cursor1
	into @inputprincipalid, @loginname, @inputsid, @logintype

	end

	close cursor1
	deallocate cursor1

	select @connectionname = connectionname from serversnapshot where snapshotid = @snapshotid
	
	-- GET SERVER PERMISSIONS
	insert into #tmppermission 
	(snapshotid, 
	permissionlevel, 
	logintype, 
	loginname, 
	connectionname, 
	databasename, 
	principalid, 
	principalname, 
	principaltype, 
	grantor,
	grantorname,
	grantee, 
	granteename,
	classid, 
	permissiontype, 
	permission, 
	isgrant, 
	isgrantwith, 
	isrevoke, 
	isdeny, 
	objectid,
	objectname, 
	objecttype,
	objecttypename,
	inherited,
	sourcename,
	sourcetype,
	sourcepermission)
	select distinct 
	a.snapshotid, 
	'SV',
	@logintype, 
	@loginname, 
	@connectionname, 
	NULL, 	
	a.principalid, 
	a.name, 
	a.type, 
	d.grantor, 
	dbo.getserverprincipalname(d.snapshotid, d.grantor),
	d.grantee, 
	dbo.getserverprincipalname(d.snapshotid, d.grantee),
	d.classid, 
	'EX', 
	d.permission, 
	d.isgrant, 
	d.isgrantwith, 
	d.isrevoke, 
	d.isdeny, 
	d.majorid,
	@connectionname, 
	'iSRV',
	dbo.getclasstype(d.classid),
	'N',
	@connectionname,
	'Server',
	d.permission
	from 
	serverprincipal a, 
	serverpermission d 
	where 
	a.snapshotid = @snapshotid and 
	d.snapshotid = a.snapshotid and
	d.grantee = a.principalid and 
	d.classid = 100 and 
	a.serveraccess = 'Y' and
	a.serverdeny = 'N' and 
	(a.principalid in (select distinct /* ssz add distinct */  principalid from #tmplogins) or 
	 (a.principalid in (select distinct /* ssz add distinct */  principalid from serverrolemember where memberprincipalid in (select distinct /* ssz add distinct */  principalid from #tmplogins))))

	--TODO: if class id is 100 the return all the permission for the server
	if (@classid = 100 and UPPER(@permissiontype) = 'X')
	begin
		exec ('isp_sqlsecure_processpermission')

		exec ('select distinct * from #tmppermission')
		return
	end
	
	-- get all the database users
	create table #tmpuid (dbid int, uid int)
	insert into #tmpuid (dbid, uid) select distinct dbid, uid from databaseprincipal where snapshotid = @snapshotid and dbid = @databaseid and UPPER(name) not in ('DB_ACCESSADMIN', 'DB_BACKUPOPERATOR', 'DB_DATAREADER', 'DB_DATAWRITER', 'DB_DDLADMIN', 'DB_DENYDATAREADER', 'DB_DENYDATAWRITER', 'DB_OWNER', 'DB_SECURITYADMIN')

/*	declare @dbid int
	declare @uid int

	declare myc100 cursor for
			select distinct a.dbid, a.uid from databaseprincipal a where a.snapshotid = @snapshotid and a.dbid = @databaseid 
	
	open myc100
	fetch next from myc100
	into @dbid, @uid
	
	while @@fetch_status = 0
	begin		
		print '============ gettting uid =========='

		insert into #tmpuid exec isp_sqlsecure_getdatabaseuserparents @snapshotid, @dbid, @uid

		insert into #tmpuid (dbid, uid) select dbid, uid from databaseprincipal where dbid = @dbid and type IN ('R', 'A')

		fetch next from myc100
		into @dbid, @uid

	end
	
	close myc100
	deallocate myc100	
*/

	-- check if user 'guest' is valid. If so, then current login will have public database role even there is
   	-- no databse user map to it.
	if exists (select * from databaseprincipal a where UPPER(a.name) = 'GUEST' and a.snapshotid = @snapshotid and a.dbid = @databaseid) 
	begin
		-- public uid is always 0
		insert into #tmpuid (dbid, uid) values (@databaseid, 0)
		
		-- insert guest user as well
		insert into #tmpuid (dbid, uid) select distinct dbid, uid from databaseprincipal a where UPPER(a.name) = 'GUEST' and snapshotid = @snapshotid and dbid = @databaseid
	end

	--select * from #tmpuid

	-- GET DATABASE EXPLICIT PERMISSIONS
	insert into #tmppermission (
	snapshotid, 
	permissionlevel,
	logintype, 
	loginname, 
	connectionname, 
	databasename, 
	principalid, 
	principalname, 
	principaltype,
	databaseprincipal, 
	databaseprincipaltype, 
	grantor, 
	grantorname,
	grantee, 
	granteename,
	classid, 
	permissiontype, 
	permission, 
	isgrant, 
	isgrantwith, 
	isrevoke, 
	isdeny, 
	objectid,
	objectname, 
	objecttype, 
	objecttypename,
	schemaid, 
	schemaname,
	owner,
	ownername,
	isaliased,
	inherited,
	sourcename,
	sourcetype,
	sourcepermission) 
	select distinct 
	a.snapshotid, 
	'DB',
	@logintype,
	@loginname,
	@connectionname,
	b.databasename,
	principalid=e.principalid,
	principalname=e.name,
	principaltype=e.type,
	databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
	databaseprincipaltype=a.type, 
	d.grantor, 
	dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
	d.grantee, 
	dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
	d.classid,
	'EX',
	d.permission,
	d.isgrant, 
	d.isgrantwith, 
	d.isrevoke, 
	d.isdeny,
	b.dbid, 
	b.databasename, 
	'DB',
	'Database',
	NULL, 
	NULL,
	dbo.getdatabaseprincipalid(d.snapshotid, d.dbid, d.owner),
	b.owner,
	a.isalias,
	'N',
	b.databasename,
	'Database',
	d.permission
	from 
	databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
	sqldatabase b,
	#tmpuid c, 
	vwdatabasepermission d
	where 
	a.snapshotid = @snapshotid and 
	(a.uid = c.uid or a.altuid = c.uid) and 
	a.dbid = c.dbid and
	d.snapshotid = a.snapshotid and 
	d.classid = 0 and 
	d.grantee = c.uid and
	d.dbid = c.dbid and  
	a.dbid = b.dbid and
	b.snapshotid = a.snapshotid and
	b.dbid = @databaseid 

	if (@classid = 0 and UPPER(@permissiontype) = 'X')
	begin
		exec ('isp_sqlsecure_processpermission')

		exec ('select * from #tmppermission where classid=0 and objectid=' + @objectid)
		return
	end

	-- process for 2005 and above
	if (@sql2000 = 'N')
	begin
		if (@classid = 101)
		begin

			--GET ALL LOGINS PERMISSION
			insert into #tmppermission 
			(snapshotid, 
			permissionlevel, 
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype, 
			grantor,
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectname, 
			objectid,
			objecttype,
			objecttypename,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
			select distinct 
			a.snapshotid, 
			'SV',
			@logintype, 
			@loginname, 
			@connectionname, 
			NULL, 	
			a.principalid, 
			a.name, 
			a.type, 
			d.grantor, 
			dbo.getserverprincipalname(d.snapshotid, d.grantor),
			d.grantee, 
			dbo.getserverprincipalname(d.snapshotid, d.grantee),
			d.classid, 
			'EX', 
			d.permission, 
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny, 
			a.name, 
			a.principalid,
			dbo.getclassobjecttype(d.classid),
			dbo.getclasstype(d.classid),
			'N',
			a.name,
			'Login',
			d.permission
			from 
			serverprincipal a, 
			serverpermission d 
			where 
			a.snapshotid = @snapshotid and 
			d.snapshotid = a.snapshotid and
			d.grantee = a.principalid and 
			a.type IN ('U', 'G') and 
			d.classid = 101 and 
			(d.grantee in (select distinct /* ssz add distinct */  principalid from #tmplogins) or 
			 (d.grantee in (select distinct /* ssz add distinct */  principalid from serverrolemember where memberprincipalid in (select distinct /* ssz add distinct */  principalid from #tmplogins))))
		end

		--select * from #tmppermission

		if (@classid = 101 and UPPER(@permissiontype) = 'X')
		begin
			exec ('isp_sqlsecure_processpermission')

			exec ('select distinct * from #tmppermission where classid = 101 and objectid=' + @objectid)
			return
		end

			if (@classid = 108)
		begin
			insert into #tmppermission 
			(snapshotid, 
			permissionlevel, 
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype, 
			grantor,
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectname, 
			objectid,
			objecttype,
			objecttypename,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
			select distinct 
			ag.snapshotid, 
			'AV',
			@logintype, 
			@loginname, 
			@connectionname, 
			NULL, 	
			ag.servergroupId, 
			ag.name, 
			'A', 
			d.grantor, 
			dbo.getserverprincipalname(d.snapshotid, d.grantor),
			d.grantee, 
			dbo.getserverprincipalname(d.snapshotid, d.grantee),
			d.classid, 
			'EX', 
			d.permission, 
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny, 
			ag.name, 
			ag.servergroupId,
			dbo.getclassobjecttype(d.classid),
			dbo.getclasstype(d.classid),
			'N',
			ag.name, 
			'Login',
			d.permission
			from 
			dbo.availabilitygroups ag 
			join dbo.availabilityreplicas ar on ag.groupid = ar.groupid and ag.snapshotid = ar.snapshotid
			join serverpermission d on  d.majorid=ar.replicametadataid and ar.snapshotid = d.snapshotid
			where 
			ag.snapshotid = @snapshotid and			
			d.classid = 108 and ag.servergroupId=@objectid and 
			(d.grantee in (select distinct /* ssz add distinct */  principalid from #tmplogins) or 
			 (d.grantee in (select distinct /* ssz add distinct */  principalid from serverrolemember where memberprincipalid in (select distinct /* ssz add distinct */  principalid from #tmplogins))))
		end
		if (@classid = 108 and UPPER(@permissiontype) = 'X')
		begin
			exec ('isp_sqlsecure_processpermission')
			exec ('select distinct * from #tmppermission where classid = 108 and objectid=' + @objectid)
			return
		end
		if (@classid = 105)
		begin

			-- ENDPOINT PERMISSION
			-- REQUIRES SOME CUSTOMIZATION BECAUSE THE ENDPOINT COVERING HAS AT LEAST A CONNECT PERMISSION EVEN THERE IS NO PARENT PERMISSION
			-- ALSO IF THERE IS NO ENDPOINT EXPLICIT NEED TO CREATE ROWS DUE TO COVERING
			insert into #tmppermission 
			(snapshotid, 
			permissionlevel, 
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype, 
			grantor,
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype,
			objecttypename,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
			select distinct 
			a.snapshotid, 
			'SV',
			@logintype, 
			@loginname, 
			@connectionname, 
			NULL,
			a.principalid, 
			dbo.getserverprincipalname(a.snapshotid, a.principalid),
			dbo.getserverprincipaltype(a.snapshotid, a.principalid), 
			d.grantor, 
			dbo.getserverprincipalname(d.snapshotid, d.grantor),
			d.grantee, 
			dbo.getserverprincipalname(d.snapshotid, d.grantee),
			d.classid, 
			'EX', 
			d.permission, 
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny, 
			a.endpointid,
			a.name, 
			dbo.getclassobjecttype(d.classid),
			dbo.getclasstype(d.classid),
			'N',
			a.name,
			'Endpoint',
			d.permission
			from 
			endpoint a, 
			serverpermission d 
			where 
			a.snapshotid = @snapshotid and 
			d.snapshotid = a.snapshotid and
			d.majorid = a.endpointid and 
			d.classid = 105 and 
			(d.grantee in (select distinct /* ssz add distinct */  principalid from #tmplogins) or 
			 (d.grantee in (select distinct /* ssz add distinct */  principalid from serverrolemember where memberprincipalid in (select distinct /* ssz add distinct */  principalid from #tmplogins))))
		end

		if (@classid = 105 and UPPER(@permissiontype) = 'X')
		begin
			exec ('isp_sqlsecure_processpermission')

			exec ('select distinct * from #tmppermission where classid = 105 and objectid=' + @objectid)
			return
		end
		
		-- GET ALL THE DATABASE PRINCIPAL PERMISSION
		insert into #tmppermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permissiontype, 
		permission, 
		isgrant, 
		isgrantwith, 
		isrevoke, 
		isdeny, 
		objectid,
		objectname, 
		objecttype, 
		objecttypename,
		owner,
		ownername,
		isaliased,
		inherited,
		sourcename,
		sourcetype,
		sourcepermission) 
		select distinct 
		a.snapshotid, 
		'USR',
		@logintype,
		@loginname,
		@connectionname,
		@databasename, 
		e.principalid,
		principalid=e.name,
		principaltype=e.type,
		databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
		databaseprincipaltype=a.type, 
		d.grantor, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
		d.grantee, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		d.classid,
		'EX',
		d.permission,
		d.isgrant, 
		d.isgrantwith, 
		d.isrevoke, 
		d.isdeny,
		d.grantee,
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		dbo.getdatabaseprincipaltype(d.snapshotid, d.dbid, d.grantee), 
		dbo.getobjecttypename('iDUSR'),
		d.uid,
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.uid),
		a.isalias,
		'N',
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		'Database User',
		d.permission
		from 
		databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
		#tmpuid c, 
		databaseprincipalpermission d
		where 
		a.snapshotid = @snapshotid and 
		(a.uid = c.uid or a.altuid = c.uid) and 
		a.dbid = c.dbid and
		d.snapshotid = a.snapshotid and 
		d.grantee = c.uid and 
		d.dbid = c.dbid and  
		a.dbid = @databaseid

		if (@classid = 4 and UPPER(@permissiontype) = 'X')
		begin
			exec ('isp_sqlsecure_processpermission')

			exec ('select distinct * from #tmppermission where classid = 4 and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			return
		end

		-- TODO: GET ALL THE SCHEMA PERMISSION
		insert into #tmppermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permissiontype, 
		permission, 
		isgrant, 
		isgrantwith, 
		isrevoke, 
		isdeny, 
		objectid,
		objectname, 
		objecttype, 
		objecttypename, 
		schemaid, 
		schemaname,
		owner,
		ownername,
		isaliased,
		inherited,
		sourcename,
		sourcetype,
		sourcepermission) 
		select distinct 
		a.snapshotid, 
		'SCH',
		@logintype,
		@loginname,
		@connectionname,
		@databasename, 
		e.principalid,
		principalid=e.name,
		principaltype=e.type,
		databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
		databaseprincipaltype=a.type, 
		d.grantor, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
		d.grantee, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		d.classid,
		'EX',
		d.permission,
		d.isgrant, 
		d.isgrantwith, 
		d.isrevoke, 
		d.isdeny,
		d.schemaid,
		d.schemaname,	
		'iSCM', 
		dbo.getobjecttypename('iSCM'),
		d.schemaid, 
		d.schemaname,	
		d.uid,
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.uid),
		a.isalias,
		'N',
		d.schemaname,
		'Schema',
		d.permission
		from 
		databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
		#tmpuid c, 
		vwschemapermission d
		where 
		a.snapshotid = @snapshotid and 
		(a.uid = c.uid or a.altuid = c.uid) and 
		a.dbid = c.dbid and
		d.snapshotid = a.snapshotid and 
		d.grantee = c.uid and 
		d.dbid = c.dbid and  
		a.dbid = @databaseid 

		if (@classid = 3 and UPPER(@permissiontype) = 'X')
		begin
			exec ('isp_sqlsecure_processpermission')

			exec ('select distinct * from #tmppermission where classid = 3 and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			return
		end

		-- GET SQL 2005 ALL OBJECTS EXCEPT COLUMN WHERE SCHEMA IS NOT NULL AND OWNER IS NULL
		insert into #tmppermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permissiontype, 
		permission, 
		isgrant, 
		isgrantwith, 
		isrevoke, 
		isdeny, 
		objectid,
		objectname, 
		objecttype, 
		objecttypename, 
		schemaid, 
		schemaname,
		owner,
		ownername,
		isaliased,
		inherited,
		sourcename,
		sourcetype,
		sourcepermission) 
		select distinct 
		a.snapshotid, 
		'OBJ',
		@logintype,
		@loginname,
		@connectionname,
		@databasename, 
		e.principalid,
		principalid=e.name,
		principaltype=e.type,
		databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
		databaseprincipaltype=a.type, 
		d.grantor, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
		d.grantee, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		d.classid,
		'EX',
		d.permission,
		d.isgrant, 
		d.isgrantwith, 
		d.isrevoke, 
		d.isdeny,
		d.objectid,
		d.objectname, 
		d.objecttype, 
		dbo.getobjecttypename(d.objecttype),		
		d.schemaid, 
		dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
		d.owner,
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
		a.isalias,
		'N',
		d.objectname,
		dbo.getobjecttypename(d.objecttype),		
		d.permission
		from 
		databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
		#tmpuid c, 
		vwdatabaseobjectpermission d,
		databaseschema f
		where 
		a.snapshotid = @snapshotid and 
		(a.uid = c.uid or a.altuid = c.uid) and 
		a.dbid = c.dbid and
		d.snapshotid = a.snapshotid and 
		d.dbid = a.dbid and
		f.snapshotid = d.snapshotid and
		f.dbid = c.dbid and
		d.grantee = c.uid and
		d.schemaid = f.schemaid and
		d.dbid = f.dbid and
		d.snapshotid = f.snapshotid and
		d.schemaid is not null and
		a.dbid = @databaseid  and
		(d.parentobjectid = @objectid or d.objectid = @objectid)

		-- all database objects except columns
		if (@classid IN (5, 6, 10, 15, 16, 17, 18, 19, 23, 24, 25, 6) and UPPER(@permissiontype) = 'X' and UPPER(@iscolumn) = 'N')
		begin
			exec ('isp_sqlsecure_processpermission')

			exec ('select distinct * from #tmppermission where classid = ' + @classid + ' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			return
		end
	
		-- GET SQL 2005 ALL COLUMN WHERE SCHEMA IS NULL AND OWNER IS NULL
		insert into #tmppermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permissiontype, 
		permission, 
		isgrant, 
		isgrantwith, 
		isrevoke, 
		isdeny, 
		parentobjectid,
		objectid,
		objectname, 
		objecttype, 
		objecttypename,
		schemaid, 
		schemaname,
		owner,
		ownername,
		isaliased,
		inherited,
		sourcename,
		sourcetype,
		sourcepermission) 
		select distinct 
		a.snapshotid, 
		'COL',
		@logintype,
		@loginname,
		@connectionname,
		@databasename, 
		e.principalid,
		principalid=e.name,
		principaltype=e.type,
		databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
		databaseprincipaltype=a.type, 
		d.grantor, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
		d.grantee, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		d.classid,
		'EX',
		d.permission,
		d.isgrant, 
		d.isgrantwith, 
		d.isrevoke, 
		d.isdeny,
		d.parentobjectid,
		d.objectid,
		dbo.gettablename(@snapshotid, @databaseid, d.parentobjectid) + '.' + d.objectname,
		d.objecttype, 
		dbo.getobjecttypename(d.objecttype),
		d.schemaid, 
		d.schemaname,
		d.owner,
		d.ownername,
		a.isalias,
		'N',
		d.objectname,
		'Column',
		d.permission
		from 
		databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
		#tmpuid c, 
		vwsql2005databasecolumnpermission d
		where 
		a.snapshotid = @snapshotid and 
		(a.uid = c.uid or a.altuid = c.uid) and 
		a.dbid = c.dbid and
		d.snapshotid = a.snapshotid and 
		d.dbid = a.dbid and
		d.grantee = a.uid and
		a.dbid = @databaseid 	

		-- for table, return all columns as well
		if (@classid = 1 and UPPER(@permissiontype) = 'X' and UPPER(@iscolumn) = 'N')
		begin
			exec ('isp_sqlsecure_processpermission')

			exec ('select distinct * from #tmppermission where classid = 1 and (parentobjectid=' + @objectid + ' or objectid=' + @objectid + ') and databasename=''' + @databasename + '''')
			return
		end

		-- all columns
		if (@classid = 1 and UPPER(@permissiontype) = 'X' and UPPER(@iscolumn) = 'Y')
		begin
			exec ('isp_sqlsecure_processpermission')

			exec ('select distinct * from #tmppermission where classid = 1 and parentobjectid=' + @parentobjectid + ' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			return
		end

		if (@geteffective = 'Y')
		begin
	
		-- PROCESS FIXED SERVER ROLE PERMISSION
		-- CHECK IF LOGINS BELONGS TO FIXED SERVERR ROLES, IF SO THEN ASSIGN FIXED PERMISSION TO SERVER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  a.snapshotid, 
			'SV',
			@logintype, 
			@loginname, 
			@connectionname, 
			NULL, 
			a.memberprincipalid, 
			dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
			dbo.getserverprincipaltype(a.snapshotid, a.memberprincipalid), 
			NULL, 
			NULL, 
			a.principalid, 
			dbo.getserverprincipalname(a.snapshotid, a.principalid), 
			a.memberprincipalid, 
			dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
			100, 
			'EF', 
			rolepermission, 
			'Y', -- force it 
			c.isgrantwith, 
			c.isrevoke, 
			c.isdeny, 
			0,
			@connectionname, 
			dbo.getclassobjecttype(100), 
			dbo.getclasstype(100), 
			NULL, 
			NULL,
			NULL,
			NULL,
			'N',
			'FXROLE',
			'N',
			c.rolename,
			'Server Role',
			rolepermission
			from 
			vwfixedserverrolemember a, 
			#tmplogins b ,
			fixedrolepermission c
			where 
			a.snapshotid = @snapshotid and 
			a.memberprincipalid = b.principalid and
			UPPER(a.name) = UPPER(c.rolename) and
			c.roletype = 'S'	


		declare @tmpsysprincipalid int

		-- TODO: COPY ALL EXISTING SERVER PERMISSION AS EFFECTIVE PERMISSION
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select distinct /* ssz add distinct */   snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'SV'

		-- TODO: NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where classid = 100 and b.permissionlevel ='SERVER' and b.coveringpermissionname = a.permission

		-- need to break down again for level 2 server level permissions
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where classid = 100 and b.permissionlevel ='SERVER' and b.coveringpermissionname = a.permission and UPPER(a.permission) in ('ALTER ANY DATABASE', 'ALTER ANY ENDPOINT', 'VIEW ANY DEFINITION', 'ALTER SERVER STATE', 'ALTER ANY EVENT NOTIFICATION', 'UNSAFE ASSEMBLY')

		if (@classid = 100)
		begin
			exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 100 and permissiontype = ''EF''')
			else
				exec ('select distinct * from #tmppermission where classid = 100')

			return
		end

		if (@classid = 105)
		begin

		declare @endpointid int
		declare @endpointprincipalid int
		declare @endpointname nvarchar(128)

		-- TODO: COPY ALL THE ENDPOINT PERMISSION AS EFFECTIVE PERMISSION	
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where classid = 105

		-- TODO: CHECK IF ENDPOINT NEEDS COVERING FROM SERVER
		if exists (select * from #tmppermission where classid = 100 and UPPER(permission) = 'CONTROL SERVER') 
		begin
			-- IF SERVER HAS CONTROL PERMISSION ALL ENDPOINT WILL HAVE ALL PERMISSIONS
			delete from #tmppermission where UPPER(objecttype) = 'IENDP' and permissiontype = 'EF'

			declare myc1000 cursor for
					select distinct a.endpointid, a.principalid, a.name from endpoint a where snapshotid = @snapshotid 
			
			open myc1000
			fetch next from myc1000
			into @endpointid, @endpointprincipalid, @endpointname
			
			while @@fetch_status = 0
			begin

				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					objecttypename,
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					coveringfrom,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				select top 1 
					snapshotid, 
					a.permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					@endpointprincipalid, 
					dbo.getserverprincipalname(@snapshotid, @endpointprincipalid), 
					dbo.getserverprincipaltype(@snapshotid, @endpointprincipalid), 
					NULL, 
					NULL, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					105, 
					'EF', 
					'CONTROL', 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					@endpointid,
					@endpointname, 
					'iENDP',
					'Endpoint',
					NULL, 
					NULL,
					owner,
					ownername,
					isaliased,
					'SV',
					'Y',
					sourcename,
					sourcetype,
					sourcepermission
				from #tmppermission a
				where a.classid = 100 and UPPER(permission) = 'CONTROL SERVER'

				fetch next from myc1000
				into @endpointid, @endpointprincipalid, @endpointname
			end

			close myc1000
			deallocate myc1000	

			-- GET ALL COVERING PERMISSION
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				objecttypename, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct /* ssz add distinct */  snapshotid, 
				a.permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.permissionname, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				objecttypename, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				'Y',
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission a, coveringpermissionhierarchy b
			where a.classid = 105 and UPPER(a.permissionlevel) = 'SV' and UPPER(b.permissionlevel) = 'ENDPOINT' and UPPER(b.coveringpermissionname) = 'CONTROL'
		end 	
		else -- ELSE CHECK IF THERE IS OTHER SERVER COVERING PERMISSION, IF SO MANUALLY CREATE COVERING ROWS. ALSO, CREATE A DEFAULT CONNECT FOR ALL ENDPOINTS EXCEPT ADMIN
		begin

			declare myc1000 cursor for
					select distinct a.endpointid, a.principalid, a.name from endpoint a where snapshotid = @snapshotid 
			
			open myc1000
			fetch next from myc1000
			into @endpointid, @endpointprincipalid, @endpointname
			
			while @@fetch_status = 0
			begin

				if exists (select * from #tmppermission where classid = 100 and UPPER(permission) IN ('ALTER ANY ENDPOINT', 'VIEW ANY DEFINITION')) 
				begin

					insert into #tmppermission (
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						objectid,
						objectname, 
						objecttype, 
						objecttypename, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						coveringfrom,
						inherited,
						sourcename,
						sourcetype,
						sourcepermission)
					select top 1 
						snapshotid, 
						a.permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						@endpointprincipalid, 
						dbo.getserverprincipalname(@snapshotid, @endpointprincipalid), 
						dbo.getserverprincipaltype(@snapshotid, @endpointprincipalid), 
						NULL, 
						NULL, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						105, 
						'EF', 
						CASE WHEN permission = 'ALTER ANY ENDPOINT' THEN 'ALTER' ELSE 'VIEW DEFINITION' END, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						@endpointid,
						@endpointname, 
						'iENDP',
						'Endpoint',
						NULL, 
						NULL,
						owner,
						ownername,
						isaliased,
						'SV',
						'Y',
						sourcename,
						sourcetype,
						sourcepermission
					from #tmppermission a
					where a.classid = 100 and UPPER(permission) IN ('ALTER ANY ENDPOINT', 'VIEW ANY DEFINITION')
				end

				-- INSERT CONNECT EXCEPT ADMIN
				if (UPPER(@endpointname) in ('TSQL LOCAL MACHINE', 'TSQL NAMED PIPES', 'TSQL DEFAULT TCP', 'TSQL DEFAULT VIA'))
				begin
					insert into #tmppermission (
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						objectid,
						objectname, 
						objecttype, 
						objecttypename, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						coveringfrom,
						inherited,
						sourcename,
						sourcetype,
						sourcepermission)
					select top 1 
						snapshotid, 
						a.permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						@endpointprincipalid, 
						dbo.getserverprincipalname(@snapshotid, @endpointprincipalid), 
						dbo.getserverprincipaltype(@snapshotid, @endpointprincipalid), 
						NULL, 
						NULL, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						105, 
						'EF', 
						'CONNECT', 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						@endpointid,
						@endpointname, 
						'iENDP',
						'Endpoint',
						NULL, 
						NULL,
						owner,
						ownername,
						isaliased,
						'SV',
						'Y',
						sourcename,
						sourcetype,
						sourcepermission
					from #tmppermission a
					where a.classid = 100
				end

				fetch next from myc1000
				into @endpointid, @endpointprincipalid, @endpointname
			end

			close myc1000
			deallocate myc1000	
	
			-- TODO: NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				objecttypename, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select distinct /* ssz add distinct */   snapshotid, 
				a.permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.permissionname, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				objecttypename, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission a, coveringpermissionhierarchy b
			where a.classid = 105 and UPPER(b.permissionlevel) = 'ENDPOINT' and b.coveringpermissionname = a.permission
		end

		if (@classid = 105)
		begin
			exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 105 and permissiontype =''EF'' and objectid=' + @objectid)
			else
				exec ('select distinct * from #tmppermission where classid = 105 and objectid=' + @objectid)

			return
		end

		end

		create table #tmpcovering (name nvarchar(128))
	
		declare @tmpepgrantee int
		declare @tmpepobjectid int

		declare @tmpdatabasename nvarchar(128)
		declare @#tmppermission nvarchar(128)
		declare @tmpprincipalid int
		declare @tmpgrantor int
		declare @tmpgrantorname nvarchar(128)
		declare @tmpgranteename nvarchar(128)
		declare @tmpcoveringpermission nvarchar(128)
		declare @tmpgrant nchar(1)
		declare @tmpgrantwith nchar(1)
		declare @tmpdeny nchar(1)
		declare @tmprevoke nchar(1)

		declare @tmploginid int
		declare @tmploginname nvarchar(256)
		declare @tmplogintype nchar(1)
		declare @tmpprincipaltype nchar(1)
		declare @tmpprincipalname nvarchar(256)

		if (@classid = 101)
		begin

		-- LOGIN: IF SERVER LOGIN IS CONTROL THEN LOGIN WILL HAVE ALL PERMISSION FROM ALL USERS OR GROUPS
		if exists (select * from #tmppermission where classid = 100 and UPPER(permission) = 'CONTROL SERVER') 
		begin
			select distinct @tmpgrant = isgrant, @tmpgrantwith = isgrantwith, @tmprevoke = isrevoke, @tmpdeny = isrevoke from #tmppermission where classid = 100 and UPPER(permission) = 'CONTROL SERVER'

			-- IF SERVER HAS CONTROL PERMISSION ALL LOGINS WILL HAVE ALL PERMISSIONS
			delete from #tmppermission where classid = 101 and permissiontype = 'EF'			

			-- ALL USERS AND GROUPS ARE GRANTOR
			declare myca1000 cursor for
					select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and type IN ('G', 'U')
			
			open myca1000
			fetch next from myca1000
			into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
			
			while @@fetch_status = 0
			begin
				declare myca1000a cursor for
						select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and a.principalid in (select  distinct /* ssz add distinct */ principalid from #tmplogins) or (a.principalid in (select distinct /* ssz add distinct */  principalid from serverrolemember where memberprincipalid in (select distinct /* ssz add distinct */  principalid from #tmplogins))) and UPPER(a.type) IN ('U', 'G')
		
				open myca1000a
				fetch next from myca1000a
				into @tmploginid, @tmploginname, @tmplogintype

				while @@fetch_status = 0
				begin
					--print 'tmplogin info ' + @tmploginname + ' ,' + @tmplogintype

					insert into #tmppermission (
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						objectid,
						objectname, 
						objecttype, 
						objecttypename, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						coveringfrom,
						inherited,
						sourcename,
						sourcetype,
						sourcepermission)
					values ( 
						@snapshotid, 
						'SV',
						@tmplogintype, 
						@tmploginname, 
						@connectionname, 
						NULL, 
						@tmploginid, 
						@tmploginname, 
						@tmplogintype, 
						NULL, 
						NULL, 
						@tmpprincipalid, 
						@tmpprincipalname, 
						@tmploginid, 
						@tmploginname, 
						101, 
						'EF',
						'CONTROL', 
						@tmpgrant, 
						@tmpgrantwith, 
						@tmprevoke, 
						@tmpdeny, 
						@tmploginid,
						@tmploginname, 
						dbo.getclassobjecttype(101),
						dbo.getclasstype(101),
						NULL, 
						NULL,
						NULL,
						NULL,
						'N',
						'SV',
						'Y',
						@tmploginname,
						'Login',
						'CONTROL')

					fetch next from myca1000a
					into @tmploginid, @tmploginname, @tmplogintype
				end


				close myca1000a
				deallocate myca1000a	

				fetch next from myca1000
				into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
			end

			close myca1000
			deallocate myca1000	
		end 	


		-- LOGIN: IF SERVER LOGIN IS VIEW ANY DEFINITION THEN LOGIN WILL HAVE VIEW DEFINITION PERMISSION FROM ALL USERS OR GROUPS
		if exists (select * from #tmppermission where classid=100 and UPPER(permission) = 'VIEW ANY DEFINITION') 
		begin
			select distinct @tmpgrant = isgrant, @tmpgrantwith = isgrantwith, @tmprevoke = isrevoke, @tmpdeny = isrevoke from #tmppermission where classid = 100 and UPPER(permission) = 'VIEW ANY DEFINITION'

			-- ALL USERS AND GROUPS ARE GRANTOR
			declare myca1000 cursor for
					select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and type IN ('G', 'U')
			
			open myca1000
			fetch next from myca1000
			into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
			
			while @@fetch_status = 0
			begin
				declare myca1000a cursor for
						select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and a.principalid in (select distinct /* ssz add distinct */  principalid from #tmplogins) or (a.principalid in (select distinct /* ssz add distinct */  principalid from serverrolemember where memberprincipalid in (select  distinct /* ssz add distinct */ principalid from #tmplogins))) and UPPER(a.type) IN ('U', 'G')
		
				open myca1000a
				fetch next from myca1000a
				into @tmploginid, @tmploginname, @tmplogintype

				while @@fetch_status = 0
				begin
					--print 'tmplogin info ' + @tmploginname + ' ,' + @tmplogintype

					insert into #tmppermission (
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						objectid,
						objectname, 
						objecttype, 
						objecttypename, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						coveringfrom,
						inherited,
						sourcename,
						sourcetype,
						sourcepermission)
					values ( 
						@snapshotid, 
						'SV',
						@tmplogintype, 
						@tmploginname, 
						@connectionname, 
						NULL, 
						@tmploginid, 
						@tmploginname, 
						@tmplogintype, 
						NULL, 
						NULL, 
						@tmpprincipalid, 
						@tmpprincipalname, 
						@tmploginid, 
						@tmploginname, 
						101, 
						'EF',
						'VIEW DEFINITION', 
						@tmpgrant, 
						@tmpgrantwith, 
						@tmprevoke, 
						@tmpdeny, 
						@tmploginid,
						@tmploginname, 
						dbo.getclassobjecttype(101),						
						dbo.getclasstype(101),	
						NULL, 
						NULL,
						NULL,
						NULL,
						'N',
						'SV',
						'Y',
						@tmploginname,
						'Login',
						'VIEW DEFINITION')

					fetch next from myca1000a
					into @tmploginid, @tmploginname, @tmplogintype
				end


				close myca1000a
				deallocate myca1000a	

				fetch next from myca1000
				into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
			end

			close myca1000
			deallocate myca1000	

		end 	

		-- LOGIN: IF SERVER LOGIN IS ALTER ANY LOGIN THEN LOGIN WILL HAVE ALTER PERMISSION FROM ALL USERS OR GROUPS
		if exists (select * from #tmppermission where classid = 100 and UPPER(permission) = 'ALTER ANY LOGIN') 
		begin
			select distinct @tmpgrant = isgrant, @tmpgrantwith = isgrantwith, @tmprevoke = isrevoke, @tmpdeny = isrevoke from #tmppermission where classid = 100 and UPPER(permission) = 'ALTER ANY LOGIN'

			-- ALL USERS AND GROUPS ARE GRANTOR
			declare myca1000 cursor for
					select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and type IN ('G', 'U')
			
			open myca1000
			fetch next from myca1000
			into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
			
			while @@fetch_status = 0
			begin
				declare myca1000a cursor for
						select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and a.principalid in (select distinct /* ssz add distinct */  principalid from #tmplogins) or (a.principalid in (select distinct /* ssz add distinct */  principalid from serverrolemember where memberprincipalid in (select distinct /* ssz add distinct */  principalid from #tmplogins))) and UPPER(a.type) IN ('U', 'G')
		
				open myca1000a
				fetch next from myca1000a
				into @tmploginid, @tmploginname, @tmplogintype

				while @@fetch_status = 0
				begin
					--print 'tmplogin info ' + @tmploginname + ' ,' + @tmplogintype

					insert into #tmppermission (
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						objectid,
						objectname, 
						objecttype, 
						objecttypename, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						coveringfrom,
						inherited,
						sourcename,
						sourcetype,
						sourcepermission)
					values ( 
						@snapshotid, 
						'SV',
						@tmplogintype, 
						@tmploginname, 
						@connectionname, 
						NULL, 
						@tmploginid, 
						@tmploginname, 
						@tmplogintype, 
						NULL, 
						NULL, 
						@tmpprincipalid, 
						@tmpprincipalname, 
						@tmploginid, 
						@tmploginname, 
						101, 
						'EF',
						'ALTER', 
						@tmpgrant, 
						@tmpgrantwith, 
						@tmprevoke, 
						@tmpdeny, 
						@tmploginid,
						@tmploginname, 
						dbo.getclassobjecttype(101),						 
						dbo.getclasstype(101),						
						NULL, 
						NULL,
						NULL,
						NULL,
						'N',
						'SV',
						'Y',
						@tmploginname,
						'Login',
						'ALTER')

					fetch next from myca1000a
					into @tmploginid, @tmploginname, @tmplogintype
				end


				close myca1000a
				deallocate myca1000a	

				fetch next from myca1000
				into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
			end

			close myca1000
			deallocate myca1000	

		end 	
				

		-- LOGIN - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 101 and UPPER(b.permissionlevel) = 'LOGIN' and b.coveringpermissionname = a.permission

		if (@classid = 101)
		begin
			exec ('isp_sqlsecure_processpermission')

			if  (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 101 and permissiontype = ''EF'' and objectid=' + @objectid)
			else
				exec ('select distinct * from #tmppermission where classid = 101 and objectid=' + @objectid)

			return
		end

		end

		-- COPY ALL THE DATABASE LEVEL PERMISSION AS EFFECTIVE PERMISSION	
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where classid = 0 and permissiontype = 'EX'



	-- get all the users associates with server permissions (except fixed server role)
	declare myc1000 cursor for
			select distinct a.principalid, c.uid from #tmppermission a, serverprincipal b, databaseprincipal c where permissionlevel = 'SV' and UPPER(sourcename) <> 'SYSADMIN' and a.classid = 100 and b.snapshotid = @snapshotid and c.snapshotid = b.snapshotid and c.dbid = @databaseid and c.usersid = b.sid and b.principalid = a.principalid
	
	open myc1000
	fetch next from myc1000
	into @principalid, @uid
	
	while @@fetch_status = 0
	begin		

		-- PROVIDE SERVER TO DATABASE COVERING PERMISSIONS
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission,
			coveringfrom)
		select  distinct a.snapshotid, 
			'DB',
			logintype, 
			loginname, 
			connectionname, 
			c.databasename, 
			principalid, 
			principalname, 
			principaltype,
			dbo.getdatabaseprincipalname(c.snapshotid, c.dbid, d.uid),
			'',
			a.principalid,
			a.principalname,
			d.uid,
			dbo.getdatabaseprincipalname(c.snapshotid, c.dbid, d.uid),
			0,
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			c.dbid,
			c.databasename, 
			'DB', 
			'Database',
			null, 
			null,
			dbo.getdatabaseprincipalid(c.snapshotid, c.dbid, c.owner),
			c.owner, 
			'N',
			'Y',
			sourcename,
			sourcetype,
			sourcepermission,
			'SV'
		from 	#tmppermission a, 
			coveringpermissionhierarchy b, 
			sqldatabase c,
			#tmpuid d
		where 	a.classid = 100 and 
			UPPER(b.permissionlevel) = 'DATABASE' and 
			UPPER(b.parentpermissionlevel) = 'SERVER' and 
			b.parentcoveringpermission = a.permission and
			c.snapshotid = @snapshotid and
			c.dbid = @databaseid and
			a.principalid = @principalid and
			d.dbid = c.dbid and
			d.uid = @uid and 
			UPPER(a.sourcename) <> 'SYSADMIN'

		fetch next from myc1000
		into @principalid, @uid

	end

	close myc1000
	deallocate myc1000

	-- process sysadmin
/*	declare myc1001 cursor for
		select distinct a.principalid from #tmppermission a where a.permissionlevel = 'SV' and UPPER(a.sourcename) = 'SYSADMIN' and a.classid = 100
	
	open myc1001
	fetch next from myc1001
		into @principalid
	
	while @@fetch_status = 0
	begin		

		-- PROVIDE SERVER TO DATABASE COVERING PERMISSIONS
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission,
			coveringfrom)
		select  distinct a.snapshotid, 
			'DB',
			logintype, 
			loginname, 
			connectionname, 
			c.databasename, 
			principalid, 
			principalname, 
			principaltype,
			'dbo',
			'S',
			5,
			'sysadmin',
			1,
			'dbo',
			0,
			'EF', 
			'CONTROL', 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			c.dbid,
			c.databasename, 
			'DB', 
			'Database',
			null, 
			null,
			dbo.getdatabaseprincipalid(c.snapshotid, c.dbid, c.owner),
			c.owner, 
			'N',
			'Y',
			sourcename,
			sourcetype,
			sourcepermission,
			'SV'
		from 	#tmppermission a,
			sqldatabase c
		where 	a.classid = 100 and 
			c.snapshotid = @snapshotid and
			c.dbid = @databaseid and
			a.principalid = @principalid and
			UPPER(a.sourcename) = 'SYSADMIN'			

		fetch next from myc1001
		into @principalid
	end

	close myc1001
	deallocate myc1001
*/
		-- PROCESS FIXED DATABASE ROLE PERMISSION
		-- GET ALL EFFECTIVE PERMISSION ASSOCIATES WITH THE FIXED DATABASE ROLE AND INSERT THEM AS EFFECTIVE PERMISSIONS
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  a.snapshotid, 
			'DB',
			@logintype, 
			@loginname, 
			@connectionname, 
			d.databasename, 
			f.principalid, 
			f.name, 
			f.type, 
			a.name, 
			a.type, 
			a.uid, 
			a.name, 
			b.uid, 
			dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.rolememberuid), 
			0, 
			'EF', 
			rolepermission, 
			c.isgrant, 
			c.isgrantwith, 
			c.isrevoke, 
			c.isdeny, 
			d.dbid,
			d.databasename, 
			'DB', 
			dbo.getobjecttypename('DB'),
			NULL, 
			NULL,
			dbo.getdatabaseprincipalid(d.snapshotid, d.dbid, d.owner),
			d.owner, 
			'N',
			'DBFXROLE',
			'N',
			c.rolename,
			'Fixed Database Role',
			rolepermission
			from 
			vwfixeddatabaserolemember a, 
			#tmpuid b,
			fixedrolepermission c,
			sqldatabase d,
			databaseprincipal e left outer join serverprincipal f on e.snapshotid = f.snapshotid and e.usersid = f.sid
			where 
			a.snapshotid = @snapshotid and 
			a.dbid = d.dbid and 
			d.dbid = @databaseid and 
			d.snapshotid = a.snapshotid and 
			a.rolememberuid = b.uid and
			e.snapshotid = a.snapshotid and
			e.uid = b.uid and 
			e.dbid = b.dbid and
			UPPER(a.name) = UPPER(c.rolename) and
			c.roletype = 'D'


		-- TODO: NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype,
			objecttypename, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 0 and UPPER(b.permissionlevel) = 'DATABASE' and b.coveringpermissionname = a.permission
	
		-- TODO: FOR EACH DATABASE, COPY THE DATA TO ANOTHER TABLE EXCEPT THE PERMISSION AND GRANTING/DENY ATTRIBUTES
		insert into #tmppermission2 (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select 	distinct snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			'Y',
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where classid = 0 and UPPER(permissiontype) = 'EF' and principalid in (select distinct grantee from #tmppermission where classid = 100)
		
		-- TODO: FOR EACH DATABASE, CONVERT EACH ROW TO COVERING PERMISSION BY COPYING OR EXPANDING EACH ROW TO THE NEW COVERING PERMISISON
		declare myc102 cursor for
			select distinct  cc.databasename, cc.principalid , aa.permission, aa.isgrant, aa.isgrantwith, aa.isdeny, aa.isrevoke
			from #tmppermission aa, #tmppermission2 cc
			where   UPPER(aa.permissionlevel) = 'SV' 
				and UPPER(aa.permissiontype) = 'EF' 
				and UPPER(aa.objecttype) = 'SERVER' 
				and cc.principalname IS NOT NULL 
				and cc.principalid IS NOT NULL
				and aa.principalid = cc.principalid

		open myc102
		fetch next from myc102
		-- ssz into @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
		into @tmpdatabasename, @tmpprincipalid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke

		while @@fetch_status = 0
		begin
			-- COPY A ROW FROM #tmppermission2 
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				objecttypename,
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.permissionname, 
				@tmpgrant, 
				@tmpgrantwith, 
				@tmprevoke, 
				@tmpdeny, 
				objectid,
				objectname, 
				objecttype, 
				objecttypename,
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				'SV',
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from 	#tmppermission2 a
				, getcoveringpermission('SERVER', @#tmppermission, 'DATABASE' ) b
			where UPPER(a.databasename) = UPPER(@tmpdatabasename) 
				and a.principalid = @tmpprincipalid

		fetch next from myc102
		into @tmpdatabasename, @tmpprincipalid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
		end

		close myc102
		deallocate myc102

		if (@classid = 0)
		begin
			exec ('isp_sqlsecure_processpermission')

			if  (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 0 and permissiontype = ''EF'' and objectid=' + @objectid)
			else
				exec ('select distinct * from #tmppermission where classid = 0 and objectid=' + @objectid)

			return
		end

		-- TODO: NEED TO ADD SCHEMA COVERING PERMISSION FROM DATABASE PERMISSION
		-- BY EXPANDING ON EXISTING DATABASE PERMISSION TO SCHEMA LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  a.snapshotid, 
			'SCH',
			logintype, 
			loginname, 
			connectionname, 
			@databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			3, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			c.schemaid,
			c.schemaname, 
			'iSCM',
			dbo.getobjecttypename('iSCM'),
			c.schemaid, 
			c.schemaname,
			c.uid,
			dbo.getdatabaseprincipalname(a.snapshotid, @databaseid, c.uid),
			isaliased,
			'DB',
			'Y',
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b, databaseschema c
		where 
		c.snapshotid = a.snapshotid and 
		c.dbid = @databaseid and 
		UPPER(b.permissionlevel) = 'SCHEMA' and 
		UPPER(b.parentpermissionlevel) = 'DATABASE' and 
		UPPER(b.parentcoveringpermission) = UPPER(a.permission) and 
		UPPER(a.permissionlevel) = 'DB' and 
		UPPER(a.objecttype) = 'DB' and 
		UPPER(a.permissiontype) = 'EF' and 
		UPPER(a.permission) IN ('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'EXECUTE', 'VIEW DEFINITION', 'ALTER ANY SCHEMA', 'ALTER', 'CONTROL')	

		-- COPY ALL THE SCHEMA EXPLICIT PERMISSION AS EFFECTIVE
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'SCH'		

		-- TODO: NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 3 and UPPER(b.permissionlevel) = 'SCHEMA' and b.coveringpermissionname = a.permission

		--declare @tmpschemaid int
		declare @tmpgrantee int
		declare @tmpschemaid int

		if (@classid = 3)
		begin
			exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 3 and objectid=' + @objectid + ' and permissiontype = ''EF'' and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = 3 and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')

			return
		end
		
		-- TODO: NEED TO ADD OBJECT COVERING PERMISSION FROM SCHEMA PERMISSION
		-- BY EXPANDING ON EXISTING SCHEMA PERMISSION TO OBJECT LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select distinct a.snapshotid, 
			'OBJ',
			logintype, 
			loginname, 
			connectionname, 
			@databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			c.classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			c.objectid,
			c.name, 
			c.type, 
			a.schemaid, 
			a.schemaname,
			c.owner,
			dbo.getdatabaseprincipalname(a.snapshotid, @databaseid, c.owner),
			isaliased,
			'DB',
			'Y',
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b, databaseobject c
		where 
		a.snapshotid = @snapshotid and
		c.snapshotid = a.snapshotid and 
		c.schemaid = a.schemaid and 
		c.dbid = @databaseid and 
		UPPER(b.permissionlevel) = 'OBJECT' and 
		UPPER(b.parentpermissionlevel) = 'SCHEMA' and 
		UPPER(b.parentcoveringpermission) = UPPER(a.permission) and 
		a.classid = 3 and 
		UPPER(a.permissiontype) = 'EF' and 
		UPPER(a.permission) IN ('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'EXECUTE', 'ALTER', 'CONTROL', 'VIEW DEFINITION') 
		and a.sourcetype not in ('Database', 'Database Role') and
		(c.parentobjectid = @objectid or c.objectid = @objectid)

		-- TODO: COPY ALL OBJECT EXPLICIT PERMISSION AS EFFECTIVE
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) IN ('OBJ', 'COL')

		-- TODO: OBJECT LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 1 and UPPER(b.permissionlevel) = 'OBJECT' and b.coveringpermissionname = a.permission

		if (@classid = 18)
		begin

		-- TODO: REMOTE SERVICE BINDING LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 18 and UPPER(b.permissionlevel) = 'REMOTE SERVICE BINDING' and b.coveringpermissionname = a.permission

		end

		if (@classid = 19)
		begin

		-- TODO: ROUTE LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 19 and UPPER(b.permissionlevel) = 'ROUTE' and b.coveringpermissionname = a.permission

		end

		if (@classid = 23)
		begin

		-- TODO: FULLTEXT CATELOG LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 23 and UPPER(b.permissionlevel) = 'FULLTEXT CATALOG' and b.coveringpermissionname = a.permission

		end

		if (@classid = 24)
		begin

		-- TODO: SYMMETRIC KEY LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 24 and UPPER(b.permissionlevel) = 'SYMMETRIC KEY' and b.coveringpermissionname = a.permission

		end

		if (@classid = 25)
		begin

		-- TODO: CERTIFICATE LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 25 and UPPER(b.permissionlevel) = 'CERTIFICATE' and b.coveringpermissionname = a.permission

		end

		if (@classid = 26)
		begin

		-- TODO: ASYMMETRIC KEY - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 26 and UPPER(b.permissionlevel) = 'ASYMMETRIC KEY' and b.coveringpermissionname = a.permission

		end

		if (@classid = 6)
		begin

		-- TODO: TYPE - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 6 and UPPER(b.permissionlevel) = 'TYPE' and b.coveringpermissionname = a.permission
		
		end

		if (@classid = 10)
		begin

		-- TODO: XML SCHEMA COLLECTION - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 10 and UPPER(b.permissionlevel) = 'XML SCHEMA COLLECTION' and b.coveringpermissionname = a.permission

		end

		if (@classid = 5)
		begin

		-- TODO: ASSEMBLY - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 5 and UPPER(b.permissionlevel) = 'ASSEMBLY' and b.coveringpermissionname = a.permission

		end

		if (@classid = 4)
		begin

		-- TODO: USER - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 4 and UPPER(b.permissionlevel) = 'USER' and b.coveringpermissionname = a.permission

			if (@permissiontype = 'E')
				exec ('select distinct * from #tmppermission where classid = 4 and objectid=' + @objectid + ' and permissiontype = ''EF'' and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = 4 and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')

			return
		end

		if (@classid = 16)
		begin
		
		-- TODO: CONTRACT - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 16 and UPPER(b.permissionlevel) = 'CONTRACT' and b.coveringpermissionname = a.permission

		end

		if (@classid = 17)
		begin

		-- TODO: SERVICE - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 17 and UPPER(b.permissionlevel) = 'SERVICE' and b.coveringpermissionname = a.permission

		end

		delete from #tmppermission2

		-- TODO: FOR ALL OBJECTS WHOSE SCHEMA HAS COVERING PERMISSIONS, COPY THEM TO PERMISSION2 AS STAGING AREA
		insert into #tmppermission2 (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select 	distinct snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 			
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'OBJ' and UPPER(permissiontype) = 'EF' and schemaid IS NOT NULL

		-- IF THERE IS NO CURRENT PERMISSION ON THE OBJECT THEN CREATE A DUMMY ROW
		if not exists (select 1 from #tmppermission2)
		begin
			insert into #tmppermission2 (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased) 
			select distinct 
			a.snapshotid, 
			'OBJ',
			@logintype,
			@loginname,
			@connectionname,
			@databasename, 
			d.classid,
			'TP',
			d.objectid,
			d.name, 
			d.type, 
			d.schemaid, 
			dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
			d.owner,
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
			a.isalias
			from 
			databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
			#tmpuid c, 
			databaseobject d,
			databaseschema f
			where 
			a.snapshotid = @snapshotid and 
			(a.uid = c.uid or a.altuid = c.uid) and 
			a.dbid = c.dbid and
			d.snapshotid = a.snapshotid and 
			d.dbid = a.dbid and
			f.snapshotid = d.snapshotid and
			f.dbid = c.dbid and
			d.schemaid = f.schemaid and
			d.dbid = f.dbid and
			d.snapshotid = f.snapshotid and
			a.dbid = @databaseid and
			d.parentobjectid = 0 and
			d.classid = 1
		end		

		-- TODO: APPLY SCHEMA COVERING PERMISSION TO THE OBJECTS
		-- FOR EACH SCHEMA
		declare myc302 cursor for
		select distinct  aa.grantor, aa.grantorname, aa.grantee, aa.granteename, cc.databasename, cc.schemaid , aa.permission, aa.isgrant, aa.isgrantwith, aa.isdeny, aa.isrevoke  
		from #tmppermission aa, #tmppermission2 cc
		where UPPER(aa.permissionlevel) = 'SCH' 
			and UPPER(aa.permissiontype) = 'EF' 
			and aa.schemaid = cc.schemaid 
			and aa.databasename = @databasename
			and aa.sourcetype in ('Database', 'Database Role')

		open myc302
		fetch next from myc302
		into @tmpgrantor, @tmpgrantorname, @tmpgrantee, @tmpgranteename, @tmpdatabasename, @tmpschemaid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
	
		while @@fetch_status = 0
		begin
				-- TODO: THERE MIGHT BE REDUNDENCY WHEN COVERING PERMISSION PRODUCES SAME LOWER LEVEL PERMISSION		
				-- COPY A ROW FROM #tmppermission2 
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					objecttypename,
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					coveringfrom,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				select  distinct snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					@tmpgrantor, 
					@tmpgrantorname,
					@tmpgrantee, 
					@tmpgranteename,
					classid, 
					'EF', 
					b.permissionname, 
					@tmpgrant, 
					@tmpgrantwith, 
					@tmprevoke, 
					@tmpdeny, 
					objectid,
					objectname, 
					objecttype, 
					objecttypename,
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					'SCH',
					'Y',
					@tmpgrantorname,
					'Database Role',
					b.permissionname
				from 	#tmppermission2 a, getcoveringpermission('SCHEMA', @#tmppermission, 'OBJECT' ) b
				where 	UPPER(a.permissionlevel) = 'OBJ' 
					and a.databasename = @tmpdatabasename 
					and a.schemaid = @tmpschemaid

		fetch next from myc302
		into @tmpgrantor, @tmpgrantorname, @tmpgrantee, @tmpgranteename, @tmpdatabasename, @tmpschemaid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke

		end

		close myc302
		deallocate myc302

		-- RETURN OBJECT LEVEL
		if (@classid IN (5, 6, 10, 15, 16, 17, 18, 19, 23, 24, 25, 6))
		begin
			exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = ' + @classid + ' and permissiontype=''EF'' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = ' + @classid + ' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')

			return
		end		

		-- TODO: CHECK COLUMN PERMISSIONS
		-- TODO: COPY ALL OBJECT EXPLICIT PERMISSION AS EFFECTIVE
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			parentobjectid,
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			parentobjectid,
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'COL'

		-- need to return columns back with table permission
		if (@classid = 1 and UPPER(@iscolumn) = 'N')
		begin
			exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 1 and permissiontype=''EF'' and (parentobjectid=' + @objectid + ' or objectid=' + @objectid + ') and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = 1 and (objectid=' + @objectid + ' or parentobjectid=' + @objectid + ') and databasename=''' + @databasename + '''')

			return
		end

		if (@classid = 1 and UPPER(@iscolumn) = 'Y')
		begin
			--exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 1 and permissiontype=''EF'' and parentobjectid=' + @parentobjectid + ' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = 1 and objectid=' + @objectid + ' and parentobjectid=' + @parentobjectid + ' and databasename=''' + @databasename + '''')

			return
		end

		delete from #tmppermission2
		drop table #tmpcovering
	
	end

	END
	ELSE -- SQL 2000 
	BEGIN

		-- TODO: GIVEN THE UID (USERS AND ROLES) NEED TO GET DATABASE PRINCIPAL PERMISSION
	
		-- TODO: TO GET TO OBJECTS, USE EITHER SCHEMA ID OR OWNER
		-- IF OWNER IS NULL THEN USE SCHEMAID
		-- IF OWNER AND SCHEMA ID ARE NULL THEN IT IS A COLUMN, NEED TO FIND ITS PARENT AND GET OWNER

		-- GET SQL 2000 ALL OBJECTS EXCEPT COLUMN PERMISSION WHERE OWNER IS NOT NULL
		insert into #tmppermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permissiontype, 
		permission, 
		isgrant, 
		isgrantwith, 
		isrevoke, 
		isdeny, 
		objectid,
		objectname, 
		objecttype, 
		objecttypename,
		schemaid, 
		schemaname,
		owner,
		ownername,
		isaliased,
		inherited,
		sourcename,
		sourcetype,
		sourcepermission) 
		select distinct 
		a.snapshotid, 
		'OBJ',
		@logintype,
		@loginname,
		@connectionname,
		@databasename, 
		e.principalid,
		principalid=e.name,
		principaltype=e.type,
		databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
		databaseprincipaltype=a.type, 
		d.grantor, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
		d.grantee, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		d.classid,
		'EX',
		d.permission,
		d.isgrant, 
		d.isgrantwith, 
		d.isrevoke, 
		d.isdeny,
		d.objectid,
		d.objectname, 
		d.objecttype, 
		dbo.getobjecttypename(d.objecttype),
		d.schemaid, 
		dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
		d.owner,
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
		a.isalias,
		'N',
		d.objectname,
		dbo.getobjecttypename(d.objecttype),
		d.permission
		from 
		databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
		#tmpuid c, 
		vwdatabaseobjectpermission d
		where 
		a.snapshotid = @snapshotid and 
		a.dbid = @databaseid and 
		(a.uid = c.uid or a.altuid = c.uid) and 
		a.dbid = c.dbid and
		d.snapshotid = a.snapshotid and 
		d.grantee = c.uid and 
		d.dbid = c.dbid and  
		d.owner is not null and
		(d.schemaid = 0 or d.schemaid is null) and
		(d.parentobjectid = @objectid or d.objectid = @objectid)

		-- GET SQL 2000 COLUMN PERMISSION WHERE OWNER IS NULL, SO USE PARENTOBJECT ID TO GET OWNER
		insert into #tmppermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permissiontype, 
		permission, 
		isgrant, 
		isgrantwith, 
		isrevoke, 
		isdeny, 
		parentobjectid,
		objectid,
		objectname, 
		objecttype, 
		objecttypename,
		schemaid, 
		schemaname,
		owner,
		ownername,
		isaliased,
		inherited,
		sourcename,
		sourcetype,
		sourcepermission) 
		select distinct 
		a.snapshotid, 
		'COL',
		@logintype,
		@loginname,
		@connectionname,
		@databasename, 
		e.principalid,
		principalid=e.name,
		principaltype=e.type,
		databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
		databaseprincipaltype=a.type, 
		d.grantor, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
		d.grantee, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		d.classid,
		'EX',
		d.permission,
		d.isgrant, 
		d.isgrantwith, 
		d.isrevoke, 
		d.isdeny,
		d.parentobjectid,
		d.objectid,
		dbo.gettablename(@snapshotid, @databaseid, d.parentobjectid) + '.' + d.objectname,
		d.objecttype, 
		dbo.getobjecttypename(d.objecttype),
		d.schemaid, 
		dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
		d.owner,
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
		a.isalias,
		'N',
		d.objectname,
		'Column',
		d.permission
		from 
		databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
		#tmpuid c, 
		vwdatabasecolumnpermission d
		where 
		a.snapshotid = @snapshotid and 
		a.dbid = @databaseid and 
		(a.uid = c.uid or a.altuid = c.uid) and 
		a.dbid = c.dbid and
		d.snapshotid = a.snapshotid and 
		d.grantee = c.uid and 
		d.dbid = c.dbid and  
		(d.schemaid = 0 or d.schemaid is null)

		if (@geteffective = 'Y')	
		begin

		-- PROCESS FIXED SERVER ROLE PERMISSION
		-- CHECK IF LOGINS BELONGS TO FIXED SERVERR ROLES, IF SO THEN ASSIGN FIXED PERMISSION TO SERVER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  a.snapshotid, 
			'SV',
			@logintype, 
			@loginname, 
			@connectionname, 
			NULL, 
			a.memberprincipalid, 
			dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
			dbo.getserverprincipaltype(a.snapshotid, a.memberprincipalid), 
			NULL, 
			NULL, 
			a.principalid, 
			dbo.getserverprincipalname(a.snapshotid, a.principalid), 
			a.memberprincipalid, 
			dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
			100, 
			'EF', 
			rolepermission, 
			'Y', -- force it 
			c.isgrantwith, 
			c.isrevoke, 
			c.isdeny, 
			0,
			@connectionname, 
			dbo.getclassobjecttype(100), 
			dbo.getclasstype(100), 
			NULL, 
			NULL,
			NULL,
			NULL,
			'N',
			'FXROLE',
			'N',
			c.rolename,
			'Server Role',
			rolepermission
			from 
			vwfixedserverrolemember a, 
			#tmplogins b ,
			fixedrolepermission c
			where 
			a.snapshotid = @snapshotid and 
			a.memberprincipalid = b.principalid and
			UPPER(a.name) = UPPER(c.rolename) and
			c.roletype = 'P'	

			-- get all the users associates with server permissions (except fixed server role)
			declare myc1000 cursor for
					select distinct a.principalid, c.uid from #tmppermission a, serverprincipal b, databaseprincipal c where permissionlevel = 'SV' and UPPER(sourcename) <> 'SYSADMIN' and a.classid = 100 and b.snapshotid = @snapshotid and c.snapshotid = b.snapshotid and c.dbid = @databaseid and c.usersid = b.sid and b.principalid = a.principalid
			
			open myc1000
			fetch next from myc1000
			into @principalid, @uid
			
			while @@fetch_status = 0
			begin		
		
				-- PROVIDE SERVER TO DATABASE COVERING PERMISSIONS
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					objecttypename,
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission,
					coveringfrom)
				select  distinct a.snapshotid, 
					'DB',
					logintype, 
					loginname, 
					connectionname, 
					c.databasename, 
					principalid, 
					principalname, 
					principaltype,
					dbo.getdatabaseprincipalname(c.snapshotid, c.dbid, d.uid),
					'',
					a.principalid,
					a.principalname,
					d.uid,
					dbo.getdatabaseprincipalname(c.snapshotid, c.dbid, d.uid),
					0,
					'EF', 
					b.permissionname, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					c.dbid,
					c.databasename, 
					'DB', 
					'Database',
					null, 
					null,
					dbo.getdatabaseprincipalid(c.snapshotid, c.dbid, c.owner),
					c.owner, 
					'N',
					'Y',
					sourcename,
					sourcetype,
					sourcepermission,
					'SV'
				from 	#tmppermission a, 
					coveringpermissionhierarchy b, 
					sqldatabase c,
					#tmpuid d
				where 	a.classid = 100 and 
					UPPER(b.permissionlevel) = 'DB2000' and 
					UPPER(b.parentpermissionlevel) = 'SERVER' and 
					b.parentcoveringpermission = a.permission and
					c.snapshotid = @snapshotid and
					c.dbid = @databaseid and
					a.principalid = @principalid and
					d.dbid = c.dbid and
					d.uid = @uid and 
					UPPER(a.sourcename) <> 'SYSADMIN'
		
				fetch next from myc1000
				into @principalid, @uid
		
			end
		
			close myc1000
			deallocate myc1000
		
			-- process sysadmin
/*			declare myc1001 cursor for
				select distinct a.principalid from #tmppermission a where a.permissionlevel = 'SV' and UPPER(a.sourcename) = 'SYSADMIN' and a.classid = 100
			
			open myc1001
			fetch next from myc1001
				into @principalid
			
			while @@fetch_status = 0
			begin		
		
				-- PROVIDE SERVER TO DATABASE COVERING PERMISSIONS
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					objecttypename,
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission,
					coveringfrom)
				select  distinct a.snapshotid, 
					'DB',
					logintype, 
					loginname, 
					connectionname, 
					c.databasename, 
					principalid, 
					principalname, 
					principaltype,
					'dbo',
					'S',
					5,
					'sysadmin',
					1,
					'dbo',
					0,
					'EF', 
					'CONTROL', 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					c.dbid,
					c.databasename, 
					'DB', 
					'Database',
					null, 
					null,
					dbo.getdatabaseprincipalid(c.snapshotid, c.dbid, c.owner),
					c.owner, 
					'N',
					'Y',
					sourcename,
					sourcetype,
					sourcepermission,
					'SV'
				from 	#tmppermission a,
					sqldatabase c
				where 	a.classid = 100 and 
					c.snapshotid = @snapshotid and
					c.dbid = @databaseid and
					a.principalid = @principalid and
					UPPER(a.sourcename) = 'SYSADMIN'			
		
				fetch next from myc1001
				into @principalid
			end
		
			close myc1001
			deallocate myc1001
*/

		-- PROCESS FIXED DATABASE ROLE PERMISSION
		-- GET ALL EFFECTIVE PERMISSION ASSOCIATES WITH THE FIXED DATABASE ROLE AND INSERT THEM AS EFFECTIVE PERMISSIONS
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select distinct    a.snapshotid, 
			'DB',
			@logintype, 
			@loginname, 
			@connectionname, 
			d.databasename, 
			f.principalid, 
			f.name, 
			f.type, 
			dbo.getdatabaseprincipalname(e.snapshotid, e.dbid, e.uid), 
			e.type, 
			a.uid, 
			a.name, 
			b.uid, 
			dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.rolememberuid), 
			0, 
			'EF', 
			rolepermission, 
			c.isgrant, 
			c.isgrantwith, 
			c.isrevoke, 
			c.isdeny, 
			d.dbid,
			d.databasename, 
			'DB', 
			NULL, 
			NULL,
			dbo.getdatabaseprincipalid(d.snapshotid, d.dbid, d.owner),
			d.owner, 
			'N',
			'DBFXROLE',
			'N',
			c.rolename,
			'Database Role',
			rolepermission
			from 
			vwfixeddatabaserolemember a, 
			#tmpuid b,
			fixedrolepermission c,
			sqldatabase d,
			databaseprincipal e left outer join serverprincipal f on e.snapshotid = f.snapshotid and e.usersid = f.sid
			where 
			a.snapshotid = @snapshotid and 
			a.dbid = b.dbid and 
			a.rolememberuid = b.uid and
			e.snapshotid = a.snapshotid and
			e.uid = b.uid and 
			e.dbid = b.dbid and
			UPPER(a.name) = UPPER(c.rolename) and
			d.dbid = a.dbid and
			d.snapshotid = a.snapshotid and
			d.databasename = @databasename and 
			c.roletype = 'D'
	

		-- TODO: NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			objecttypename,
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct /* ssz add distinct */  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype,
			objecttypename, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 0 and UPPER(b.permissionlevel) = 'DB2000' and b.coveringpermissionname = a.permission

			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   snapshotid, 
				a.permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.permissionname, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				'Y',
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission a, coveringpermissionhierarchy b
			where a.classid = 0 and UPPER(b.permissionlevel) = 'OBJECT' and b.coveringpermissionname = a.permission

			-- FOR 2000, ALL EXPLICIT ARE EFFECTIVE PERMISSION
	
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				parentobjectid,
				objectid,
				objectname, 
				objecttype, 
				objecttypename,
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct /* ssz add distinct */  snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				parentobjectid,
				objectid,
				objectname, 
				objecttype, 
				objecttypename,
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission

			-- Apply database fixed role permission to all objects
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				objecttypename, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct b.snapshotid, 
				'OBJ',
				b.logintype, 
				b.loginname, 
				b.connectionname, 
				b.databasename, 
				b.principalid, 
				b.principalname, 
				b.principaltype,
				b.databaseprincipal, 
				b.databaseprincipaltype, 
				b.grantor, 
				b.grantorname,
				b.grantee, 
				b.granteename,
				a.classid, 
				'EF', 
				b.permission, 
				b.isgrant, 
				b.isgrantwith, 
				b.isrevoke, 
				b.isdeny, 
				a.objectid,
				a.name, 
				a.type, 
				dbo.getobjecttypename(a.type), 
				b.schemaid, 
				b.schemaname,
				a.owner,
				dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.owner), 
				b.isaliased,
				'Y',
				sourcename,
				sourcetype,
				sourcepermission
			from databaseobject a, #tmppermission b
			where 
				a.snapshotid = @snapshotid and
				a.dbid = @databaseid and
				a.objectid = @objectid and
				a.snapshotid = b.snapshotid and
				b.objecttype ='DB' and
				a.type <> 'iCO'and
				b.permission in ('SELECT', 'INSERT', 'DELETE', 'UPDATE', 'REFERENCES', 'EXECUTE') and
				(a.parentobjectid = @objectid or a.objectid = @objectid)

			--select * from #tmppermission where permissionlevel = 'OBJ'

			-- remove all databse fixed role and other objects permissions
			delete from #tmppermission where permissionlevel = 'DB' and permission not in ('CREATE TABLE', 'CREATE PROCEDURE', 'CREATE VIEW', 'CREATE DEFAULT', 'CREATE RULE', 'CREATE FUNCTION', 'BACKUP DATABASE', 'BACKUP LOG')
			delete from #tmppermission where objecttype = 'P' and UPPER(permission) NOT IN ('ALTER', 'CONTROL', 'EXECUTE', 'TAKE OWNERSHIP', 'VIEW DEFINITION')
			delete from #tmppermission where objecttype = 'FN' and UPPER(permission) NOT IN ('REFERENCES', 'EXECUTE')

			if (@classid = 0)
			begin
				exec ('isp_sqlsecure_processpermission')
	
				if  (UPPER(@permissiontype) = 'E')
					exec ('select distinct * from #tmppermission where classid = 0 and permissiontype = ''EF'' and objectid=' + @objectid)
				else
					exec ('select distinct * from #tmppermission where classid = 0 and objectid=' + @objectid)
	
				return
			end

		end


		-- SQL 2000, PROCESS OBJECT AND COLUMN PERMISSIONS
		if (@classid IN (5, 6, 10, 15, 16, 17, 18, 19, 23, 24, 25, 6) and UPPER(@iscolumn) = 'N')
		begin
			exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = ' + @classid + ' and permissiontype=''EF'' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = ' + @classid + ' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')

			return
		end		

		-- table needs to return columns
		if (@classid = 1 and UPPER(@iscolumn) = 'N')
		begin
			exec ('isp_sqlsecure_processpermission')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 1 and permissiontype=''EF'' and (parentobjectid=' + @objectid + ' or objectid=' + @objectid + ') and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = 1 and (objectid=' + @objectid + ' or parentobjectid=' + @objectid + ') and databasename=''' + @databasename + '''')

			return
		end


		if (@classid = 1 and UPPER(@iscolumn) = 'Y')
		begin
			--exec ('isp_sqlsecure_processpermission')
			delete from #tmppermission where objecttype = 'iCOL' and UPPER(permission) NOT IN ('SELECT', 'UPDATE')

			if (UPPER(@permissiontype) = 'E')
				exec ('select distinct * from #tmppermission where classid = 1 and permissiontype=''EF'' and parentobjectid=' + @parentobjectid + ' and objectid=' + @objectid + ' and databasename=''' + @databasename + '''')
			else
				exec ('select distinct * from #tmppermission where classid = 1 and objectid=' + @objectid + ' and parentobjectid=' + @parentobjectid + ' and databasename=''' + @databasename + '''')

			return
		end

	END

	--drop table #tmplogins
	--drop table #tmpuid
	--drop table #tmppermission
	--drop table #tmppermission2
	--drop table #tmpdenypermission






GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


GRANT EXECUTE ON [dbo].[isp_sqlsecure_getobjectpermission] TO [SQLSecureView]

GO



SET QUOTED_IDENTIFIER ON;
GO
SET ANSI_NULLS ON;
GO

IF EXISTS (SELECT
                *
        FROM dbo.sysobjects
        WHERE id = OBJECT_ID(N'[dbo].[isp_sqlsecure_getpolicyassessment]'))
        DROP PROCEDURE [dbo].[isp_sqlsecure_getpolicyassessment];
GO

CREATE PROCEDURE [dbo].[isp_sqlsecure_getpolicyassessment] (@policyid int,
@assessmentid int = NULL,    	-- default to policy settings for backward compatibility
@registeredserverid int = 0,
@alertsonly bit = 0,
@usebaseline bit = 0,
@rundate datetime = NULL,
@fullRefresh int = 1
) WITH ENCRYPTION
AS -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
        --
        -- Description :
        --             Perform a security assessment for the policy or assessment using the configured metrics
        --				for the servers in the policy and return a table of results flagging all metrics that exceed the configured thresholds
        --
        --				If @registeredserverid is 0, then all servers in the policy will be evaluated
        --					otherwise, only the selected server will have the policy applied to it
        --				If @alertsonly is 1, only return the risks
        --				If the assessmentid is for a saved assessment, then usebaseline and rundate parameters are ignored
        --					and the values are pulled from the assessment table

        DECLARE @outtbl TABLE (
                snapshotid int,
                registeredserverid int,
                connectionname nvarchar(400),
                collectiontime datetime,
                metricid int,
                metricname nvarchar(256),
                metrictype nvarchar(32),
                metricseveritycode int,
                metricseverity nvarchar(16),
                metricseverityvalues nvarchar(4000),
                metricdescription nvarchar(4000),
                metricreportkey nvarchar(32),
                metricreporttext nvarchar(4000),
                severitycode int,
                severity nvarchar(16),
                currentvalue nvarchar(1500),
                thresholdvalue nvarchar(1500)
        );
        CREATE TABLE #tempdetails (
                policyid int,
                assessmentid int,
                metricid int,
                snapshotid int,
                detailfinding varchar(2048),
                databaseid int NULL,
                objecttype varchar(5),
                objectid int NULL,
                objectname varchar(400)
        );
        DECLARE @err int,
                @sevcodeok int,
                @valid bit,
                @isadmin bit,
                @debug bit,
                @runtime datetime,
                @serverruntime datetime;
        SELECT
                @sevcodeok = 0,
                @valid = 0,
                @isadmin = 0,
                @debug = 0;

        IF (@debug = 1)
        BEGIN
                SET NOCOUNT OFF;
                PRINT '@policyid=' + CONVERT(nvarchar, @policyid)
                + ', @assessmentid=' + CONVERT(nvarchar, ISNULL(@assessmentid,
                -1))
                + ', @registeredserverid='
                + CONVERT(nvarchar, ISNULL(@registeredserverid, -1));
                PRINT '@alertsonly=' + CONVERT(nvarchar, ISNULL(@alertsonly, -1))
                + ', @usebaseline=' + CONVERT(nvarchar, ISNULL(@usebaseline,
                -1))
                + ', @rundate=' + CONVERT(nvarchar, ISNULL(@rundate, -1));
        END;
        ELSE
        BEGIN
                SET NOCOUNT ON;
        END;

        EXEC @isadmin = [isp_sqlsecure_isadmin];

        -- replace the settings assessmentid with the current assessmentid
        IF (@assessmentid IS NULL
                OR EXISTS (SELECT
                        *
                FROM assessment
                WHERE assessmentid = @assessmentid
                AND assessmentstate = N'S')
                )
        BEGIN
                SELECT
                        @assessmentid = NULL;		-- make sure it is null so the current assessment will be created if it doesn't exist
                SELECT
                        @assessmentid = assessmentid
                FROM assessment
                WHERE policyid = @policyid
                AND assessmentstate = N'C';
                IF (@debug = 1)
                BEGIN
                        SET NOCOUNT OFF;
                        PRINT 'Policy passed, @assessmentid='
                        + CONVERT(nvarchar, ISNULL(@assessmentid, -1));
                END;
        END;

        -- if it still wasn't found, then create the current assessment
        IF (@assessmentid IS NULL
                AND @isadmin = 1
                )
        BEGIN
                IF (@debug = 1)
                BEGIN
                        SET NOCOUNT OFF;
                        PRINT 'creating new current assessment';
                END;
                EXEC [dbo].[isp_sqlsecure_createassessmentfrompolicy] @policyid = @policyid,
                                                                      @assessmentid = NULL,
                                                                      @type = N'C',
                                                                      @copy = 2,
                                                                      @newassessmentid = @assessmentid OUTPUT;
                IF (@debug = 1)
                BEGIN
                        SET NOCOUNT OFF;
                        PRINT 'New @assessmentid='
                        + CONVERT(nvarchar, @assessmentid);
                END;
        END;

        --get the id of the settings to update with selection criteria
        DECLARE @state nchar(1),
                @settingsid int;
        SELECT
                @state = assessmentstate
        FROM assessment
        WHERE policyid = @policyid
        AND assessmentid = @assessmentid;

        IF (@state IS NULL)
        BEGIN
                SELECT
                        @state = N'S',
                        @assessmentid = assessmentid
                FROM assessment
                WHERE policyid = @policyid
                AND assessmentstate = N'S';
        END;
        IF (@state = N'S')
                SELECT
                        @settingsid = @assessmentid;
        ELSE
        IF (@state = N'C')
                SELECT
                        @settingsid = assessmentid
                FROM assessment
                WHERE policyid = @policyid
                AND assessmentstate = N'S';

        IF (@debug = 1)
        BEGIN
                PRINT '@state=' + @state;
                PRINT '@assessmentid=' + CONVERT(nvarchar, ISNULL(@assessmentid,
                -1));
                PRINT '@settingsid=' + CONVERT(nvarchar, ISNULL(@settingsid, -1));
        END;
        IF (@isadmin = 1)
        BEGIN
                IF (@settingsid IS NOT NULL)
                        UPDATE [assessment]
                        SET assessmentdate = @rundate,
                            usebaseline = @usebaseline
                        WHERE policyid = @policyid
                        AND assessmentid = @settingsid;

                -- check to make sure the assessment data is current.
                EXEC [dbo].[isp_sqlsecure_isassessmentdatacurrent] @policyid = @policyid,
                                                                   @assessmentid = @assessmentid,
                                                                   @valid = @valid OUTPUT;
        END;

        IF (@debug = 1)
        BEGIN
                SET NOCOUNT OFF;
                PRINT '@valid=' + CONVERT(nvarchar, @valid);
        END;

        -- get the list of servers for the selected policy
        CREATE TABLE #servertbl (
                registeredserverid int
        );
        INSERT #servertbl
        EXEC @err = [dbo].[isp_sqlsecure_getpolicymemberlist] @policyid = @policyid,
                                                              @assessmentid = @assessmentid;

        DECLARE @returnservertbl TABLE (
                registeredserverid int
        );
        INSERT INTO @returnservertbl
                SELECT
                        registeredserverid
                FROM #servertbl;
        IF (@registeredserverid > 0)
        BEGIN
                DELETE FROM @returnservertbl
                WHERE registeredserverid != @registeredserverid;
        END;

		
    -- accept the current assessment unless fullRefresh is true
	if (@fullRefresh != 1)
	begin
		SET @valid = 1
	end

        IF (@valid = 1)
        BEGIN
                INSERT INTO @outtbl (snapshotid,
                registeredserverid,
                connectionname,
                collectiontime,
                metricid,
                metricname,
                metrictype,
                metricseveritycode,
                metricseverity,
                metricseverityvalues,
                metricdescription,
                metricreportkey,
                metricreporttext,
                severitycode,
                severity,
                currentvalue,
                thresholdvalue)
                        (SELECT
                                snapshotid,
                                registeredserverid,
                                connectionname,
                                collectiontime,
                                metricid,
                                metricname,
                                metrictype,
                                metricseveritycode,
                                metricseverity,
                                metricseverityvalues,
                                metricdescription,
                                metricreportkey,
                                metricreporttext,
                                severitycode,
                                severity,
                                currentvalue,
                                thresholdvalue
                        FROM policyassessment
                        WHERE policyid = @policyid
                        AND assessmentid = @assessmentid
                        AND registeredserverid IN (SELECT
                                registeredserverid
                        FROM @returnservertbl)
                        );
        END;
        ELSE
        BEGIN
                BEGIN TRANSACTION;

                        IF (@isadmin = 1)
                        BEGIN
                                DELETE policyassessmentdetail
                                WHERE policyid = @policyid
                                        AND assessmentid = @assessmentid;
                                DELETE policyassessment
                                WHERE policyid = @policyid
                                        AND assessmentid = @assessmentid;
                        END;

                        -- if it is a current assessment, then refresh the metric settings
                        IF (@state = N'C')
                        BEGIN
                                IF (@isadmin = 1)
                                BEGIN
                                        IF (@debug = 1)
                                        BEGIN
                                                PRINT 'Refreshing assessment from policy settings @assessmentid='
                                                + CONVERT(nvarchar, @assessmentid);
                                        END;
                                        EXEC [dbo].[isp_sqlsecure_createassessmentfrompolicy] @policyid = @policyid,
                                                                                              @assessmentid = @assessmentid,
                                                                                              @type = N'C',
                                                                                              @copy = 3,
                                                                                              @newassessmentid = @assessmentid OUTPUT;
                                END;
                        END;
                        ELSE
                        IF (@state IN (N'D', N'P'))
                        BEGIN
                                SELECT
                                        @rundate = assessmentdate,
                                        @usebaseline = usebaseline
                                FROM assessment
                                WHERE policyid = @policyid
                                AND assessmentid = @assessmentid;
                        END;

                        IF EXISTS (SELECT
                                        *
                                FROM #servertbl)
                        BEGIN
                                -- create constants for use on metrics
                                DECLARE @everyonesid varbinary(85),
                                        @sysadminsid varbinary(85),
                                        @builtinadminsid varbinary(85);
                                SELECT
                                        @everyonesid = 0x01010000000000010000000000000000000000000000000000000000000000000000000000000000,
                                        @sysadminsid = 0x03,
                                        @builtinadminsid = 0x01020000000000052000000020020000;


                                -- get the list of metrics for the policy
                                DECLARE @metricid int,
                                        @metricname nvarchar(256),
                                        @metrictype nvarchar(32),
                                        @metricdescription nvarchar(1024),
                                        @metricreportkey nvarchar(32),
                                        @metricreporttext nvarchar(4000),
                                        @severity int,
                                        @severityvalues nvarchar(4000),
                                        @configuredvalues nvarchar(4000);

                                DECLARE metriccursor CURSOR STATIC FOR
                                SELECT
                                        metricid,
                                        metricname,
                                        metrictype,
                                        metricdescription,
                                        reportkey,
                                        reporttext,
                                        severity,
                                        severityvalues
                                FROM vwpolicymetric
                                WHERE policyid = @policyid
                                AND assessmentid = @assessmentid
                                AND isenabled = 1;
                                OPEN metriccursor;

                                -- process the snapshots for each metric
                                DECLARE @snapshotid int,
                                        @connection nvarchar(400),
                                        @snapshottime datetime,
                                        @status nchar(1),
                                        @baseline nchar(1),
                                        @collectorversion nvarchar(32),
                                        @version nvarchar(256),
                                        @os nvarchar(512),
                                        @authentication nchar(1),
                                        @loginauditmode nvarchar(20),
                                        @c2audittrace nchar(1),
                                        @crossdb nchar(1),
                                        @proxy nchar(1),
                                        @remotedac nchar(1),
                                        @remoteaccess nchar(1),
                                        @startupprocs nchar(1),
                                        @sqlmail nchar(1),
                                        @databasemail nchar(1),
                                        @ole nchar(1),
                                        @webassistant nchar(1),
                                        @xp_cmdshell nchar(1),
                                        @agentmailprofile nvarchar(128),
                                        @hide nchar(1),
                                        @agentsysadmin nchar(1),
                                        @dc nchar(1),
                                        @replication nchar(1),
                                        @sapassword nchar(1),
                                        @systemtables nchar(1),
                                        @systemdrive nchar(2),
                                        @adhocqueries nchar(1),
                                        @weakpasswordenabled nchar(1);

                                DECLARE snapcursor CURSOR STATIC FOR
                                SELECT
                                        a.snapshotid,
                                        a.registeredserverid,
                                        a.connectionname,
                                        a.endtime,
                                        a.status,
                                        a.baseline,
                                        a.collectorversion,
                                        a.version,
                                        a.os,
                                        a.authenticationmode,
                                        a.loginauditmode,
                                        a.enablec2audittrace,
                                        a.crossdbownershipchaining,
                                        a.enableproxyaccount,
                                        a.remoteadminconnectionsenabled,
                                        a.remoteaccessenabled,
                                        a.scanforstartupprocsenabled,
                                        a.sqlmailxpsenabled,
                                        a.databasemailxpsenabled,
                                        a.oleautomationproceduresenabled,
                                        a.webassistantproceduresenabled,
                                        a.xp_cmdshellenabled,
                                        a.agentmailprofile,
                                        a.hideinstance,
                                        a.agentsysadminonly,
                                        a.serverisdomaincontroller,
                                        a.replicationenabled,
                                        a.sapasswordempty,
                                        a.allowsystemtableupdates,
                                        a.systemdrive,
                                        a.adhocdistributedqueriesenabled,
                                        a.isweakpassworddetectionenabled
                                FROM serversnapshot a,
                                     dbo.getsnapshotlist(@rundate, @usebaseline) b
                                WHERE a.registeredserverid IN (SELECT
                                        registeredserverid
                                FROM #servertbl)
                                AND a.snapshotid = b.snapshotid;
                                OPEN snapcursor;

                                DECLARE @sevcode int,
                                        @sev nvarchar(16),
                                        @metricval nvarchar(1500),
                                        @metricthreshold nvarchar(1500);
                                DECLARE @loginname nvarchar(200),
                                        @intval int,
                                        @intval2 int;
                                DECLARE @strval nvarchar(1024),
                                        @strval2 nvarchar(1024),
                                        @strval3 nvarchar(1024),
                                        @sql nvarchar(4000);
                                DECLARE @tblval TABLE (
                                        val nvarchar(1024) COLLATE DATABASE_DEFAULT
                                );
                                -- store sysadmin users in table that can be used with dynamic sql for multiple checks
                                CREATE TABLE #sysadminstbl (
                                        id int,
                                        name nvarchar(256) COLLATE DATABASE_DEFAULT
                                );

                                FETCH NEXT FROM snapcursor INTO @snapshotid,
                                @registeredserverid, @connection, @snapshottime,
                                @status, @baseline, @collectorversion, @version, @os,
                                @authentication, @loginauditmode, @c2audittrace,
                                @crossdb, @proxy, @remotedac, @remoteaccess,
                                @startupprocs, @sqlmail, @databasemail, @ole,
                                @webassistant, @xp_cmdshell, @agentmailprofile, @hide,
                                @agentsysadmin, @dc, @replication, @sapassword,
                                @systemtables, @systemdrive, @adhocqueries,
                                @weakpasswordenabled;

                                WHILE @@fetch_status = 0
                                BEGIN
                                        IF (@debug = 1)
                                        BEGIN
                                                SELECT
                                                        @serverruntime = GETDATE();
                                                PRINT CONVERT(nvarchar, @serverruntime, 8)
                                                + ': @connection=' + @connection;
                                                PRINT '@snapshotid='
                                                + CONVERT(nvarchar, @snapshotid);
                                        END;

                                        -- save a list of sysadmin members in this snapshot for use by multiple metrics
                                        DELETE FROM #sysadminstbl;
                                        INSERT INTO #sysadminstbl
                                                SELECT DISTINCT
                                                        a.memberprincipalid,
                                                        c.name
                                                FROM serverrolemember a,
                                                     serverprincipal b,
                                                     serverprincipal c
                                                WHERE a.snapshotid = @snapshotid
                                                AND a.snapshotid = b.snapshotid
                                                AND a.principalid = b.principalid
                                                AND b.sid = @sysadminsid
                                                AND a.snapshotid = c.snapshotid
                                                AND a.memberprincipalid = c.principalid;

                                        FETCH FIRST FROM metriccursor INTO @metricid,
                                        @metricname, @metrictype, @metricdescription,
                                        @metricreportkey, @metricreporttext, @severity,
                                        @severityvalues;

                                        WHILE @@fetch_status = 0
                                        BEGIN
                                        BEGIN TRY
                                                IF (@debug = 1)
                                                BEGIN
                                                        SELECT
                                                                @runtime = GETDATE();
                                                        PRINT CONVERT(nvarchar, @runtime, 8)
                                                        + ': @metricid='
                                                        + CONVERT(nvarchar, @metricid);
                                                END;
                                                -- This sets the metric so it will not be displayed if no value is found
                                                --     each metric should handle this situation appropriately
                                                SELECT
                                                        @err = 0,
                                                        @sevcode = -1,
                                                        @metricval = N'',
                                                        @metricthreshold = N'',
                                                        @configuredvalues = @severityvalues;
                                                -- clean up old values
                                                SELECT
                                                        @intval = 0,
                                                        @intval2 = 0,
                                                        @strval = N'',
                                                        @strval2 = N'',
                                                        @strval3 = N'',
                                                        @sql = N'';
                                                DELETE FROM @tblval;

                                                -- Collection Time
                                                IF (@metricid = 1)
                                                BEGIN
                                                        -- remove the quotes surrounding the value and test for numeric
                                                        SET @severityvalues = REPLACE(@severityvalues,
                                                        '''', '');
                                                        IF (ISNUMERIC(@severityvalues) = 1)
                                                                SELECT
                                                                        @intval = CAST(@severityvalues AS int);
                                                        SET @err = @@ERROR;
                                                        IF (@err = 0)
                                                        BEGIN
                                                                SELECT
                                                                        @intval2 = DATEDIFF(D,
                                                                        @snapshottime,
                                                                        ISNULL(@rundate,
                                                                        GETDATE()));
                                                                IF (@intval2 <= @intval)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'Audit data is within the selected date range.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @snapshottime)
                                                                                + N': Audit data is '
                                                                                + CONVERT(nvarchar, @intval2)
                                                                                + N' days from the selected date.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Audit data is acceptable if within '
                                                                + @severityvalues
                                                                + N' days of the selected date.';
                                                END;
                                                -- SQL Server version
                                                ELSE
                                                IF (@metricid = 2)
                                                BEGIN
                                                        --make sure the version doesn't start with a 0 before comparing
                                                        SELECT
                                                                @strval =
                                                                                 CASE
                                                                                         WHEN LEFT(@version,
                                                                                                 1) = '0' THEN SUBSTRING(@version,
                                                                                                 2,
                                                                                                 LEN(@version)
                                                                                                 - 1)
                                                                                         ELSE @version
                                                                                 END;

                                                        --find the matching entry based on major and minor version
                                                        SELECT
                                                                @intval = CHARINDEX(''''
                                                                + LEFT(@strval,
                                                                CHARINDEX('.',
                                                                @strval,
                                                                CHARINDEX('.',
                                                                @strval) + 1)),
                                                                @severityvalues);

                                                        SELECT
                                                                @intval2 = 1;	-- force a finding if it can't be parsed

                                                        IF (@intval > 0)
                                                        BEGIN
                                                                -- set the threshold to the matching version
                                                                SELECT
                                                                        @metricthreshold = SUBSTRING(@severityvalues,
                                                                        @intval + 1,
                                                                        CHARINDEX('''',
                                                                        @severityvalues,
                                                                        @intval + 1)
                                                                        - @intval - 1);
                                                                DECLARE @v1 int,
                                                                        @v2 int,
                                                                        @v3 int,
                                                                        @v4 int,
                                                                        @t1 int,
                                                                        @t2 int,
                                                                        @t3 int,
                                                                        @t4 int,
                                                                        @ver nvarchar(20);
                                                                SELECT
                                                                        @v1 = 0,
                                                                        @v2 = 0,
                                                                        @v3 = 0,
                                                                        @v4 = 0,
                                                                        @t1 = 0,
                                                                        @t2 = 0,
                                                                        @t3 = 0,
                                                                        @t4 = 0;

                                                                --parse the server version into component numbers to compare string values of different lengths
                                                                SELECT
                                                                        @intval = CHARINDEX('.',
                                                                        @strval);
                                                                IF (@intval > 1)
                                                                BEGIN
                                                                        SELECT
                                                                                @ver = LEFT(@strval,
                                                                                @intval - 1);
                                                                        SELECT
                                                                                @v1 =
                                                                                             CASE
                                                                                                     WHEN ISNUMERIC(@ver) = 1 THEN CONVERT(int, @ver)
                                                                                                     ELSE 0
                                                                                             END,
                                                                                @strval = RIGHT(@strval,
                                                                                LEN(@strval)
                                                                                - @intval);

                                                                        SELECT
                                                                                @intval = CHARINDEX('.',
                                                                                @strval);
                                                                        IF (@intval > 1)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @v2 = CONVERT(int, LEFT(@strval,
                                                                                        @intval - 1)),
                                                                                        @strval = RIGHT(@strval,
                                                                                        LEN(@strval)
                                                                                        - @intval);

                                                                                SELECT
                                                                                        @intval = CHARINDEX('.',
                                                                                        @strval);
                                                                                IF (@intval > 1)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @v3 = CONVERT(int, LEFT(@strval,
                                                                                                @intval - 1)),
                                                                                                @strval = RIGHT(@strval,
                                                                                                LEN(@strval)
                                                                                                - @intval);

                                                                                        IF (LEN(@strval) > 0
                                                                                                AND CHARINDEX('.',
                                                                                                @strval) = 0
                                                                                                AND ISNUMERIC(@strval) = 1
                                                                                                )
                                                                                                SELECT
                                                                                                        @v4 = CONVERT(int, @strval);
                                                                                END;
                                                                                ELSE
                                                                                        SELECT
                                                                                                @v3 =
                                                                                                             CASE
                                                                                                                     WHEN ISNUMERIC(@strval) = 1 AND
                                                                                                                             CHARINDEX('.',
                                                                                                                             @strval) = 0 THEN CONVERT(int, @strval)
                                                                                                                     ELSE 0
                                                                                                             END;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @v2 =
                                                                                                     CASE
                                                                                                             WHEN ISNUMERIC(@strval) = 1 AND
                                                                                                                     CHARINDEX('.',
                                                                                                                     @strval) = 0 THEN CONVERT(int, @strval)
                                                                                                             ELSE 0
                                                                                                     END;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @v1 =
                                                                                             CASE
                                                                                                     WHEN ISNUMERIC(@strval) = 1 AND
                                                                                                             CHARINDEX('.',
                                                                                                             @strval) = 0 THEN CONVERT(int, @strval)
                                                                                                     ELSE 0
                                                                                             END;

                                                                --parse the threshold version into component numbers to compare string values of different lengths
                                                                SELECT
                                                                        @strval = @metricthreshold;
                                                                SELECT
                                                                        @intval = CHARINDEX('.',
                                                                        @strval);
                                                                IF (@intval > 1)
                                                                BEGIN
                                                                        SELECT
                                                                                @ver = LEFT(@strval,
                                                                                @intval - 1);
                                                                        SELECT
                                                                                @t1 =
                                                                                             CASE
                                                                                                     WHEN ISNUMERIC(@ver) = 1 AND
                                                                                                             CHARINDEX('.',
                                                                                                             @ver) = 0 THEN CONVERT(int, @ver)
                                                                                                     ELSE 0
                                                                                             END,
                                                                                @strval = RIGHT(@strval,
                                                                                LEN(@strval)
                                                                                - @intval);

                                                                        SELECT
                                                                                @intval = CHARINDEX('.',
                                                                                @strval);
                                                                        IF (@intval > 1)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @t2 = CONVERT(int, LEFT(@strval,
                                                                                        @intval - 1)),
                                                                                        @strval = RIGHT(@strval,
                                                                                        LEN(@strval)
                                                                                        - @intval);

                                                                                SELECT
                                                                                        @intval = CHARINDEX('.',
                                                                                        @strval);
                                                                                IF (@intval > 1)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @t3 = CONVERT(int, LEFT(@strval,
                                                                                                @intval - 1)),
                                                                                                @strval = RIGHT(@strval,
                                                                                                LEN(@strval)
                                                                                                - @intval);

                                                                                        IF (LEN(@strval) > 0
                                                                                                AND CHARINDEX('.',
                                                                                                @strval) = 0
                                                                                                AND ISNUMERIC(@strval) = 1
                                                                                                )
                                                                                                SELECT
                                                                                                        @t4 = CONVERT(int, @strval);
                                                                                END;
                                                                                ELSE
                                                                                        SELECT
                                                                                                @t3 =
                                                                                                             CASE
                                                                                                                     WHEN ISNUMERIC(@strval) = 1 AND
                                                                                                                             CHARINDEX('.',
                                                                                                                             @strval) = 0 THEN CONVERT(int, @strval)
                                                                                                                     ELSE 0
                                                                                                             END;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @t2 =
                                                                                                     CASE
                                                                                                             WHEN ISNUMERIC(@strval) = 1 AND
                                                                                                                     CHARINDEX('.',
                                                                                                                     @strval) = 0 THEN CONVERT(int, @strval)
                                                                                                             ELSE 0
                                                                                                     END;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @t1 =
                                                                                             CASE
                                                                                                     WHEN ISNUMERIC(@strval) = 1 AND
                                                                                                             CHARINDEX('.',
                                                                                                             @strval) = 0 THEN CONVERT(int, @strval)
                                                                                                     ELSE 0
                                                                                             END;

                                                                --compare level by level to see if there is a mismatch
                                                                IF ((@t1 > @v1)
                                                                        OR (@t1 = @v1
                                                                        AND @t2 > @v2
                                                                        )
                                                                        OR (@t1 = @v1
                                                                        AND @t2 = @v2
                                                                        AND @t3 > @v3
                                                                        )
                                                                        OR (@t1 = @v1
                                                                        AND @t2 = @v2
                                                                        AND @t3 = @v3
                                                                        AND @t4 > @v4
                                                                        )
                                                                        )
                                                                        SET @intval2 = 1;
                                                                ELSE
                                                                        SET @intval2 = 0;
                                                        END;

                                                        IF (@intval2 = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = N'Current version is '
                                                                + @version;
                                                        SELECT
                                                                @metricthreshold = N'Acceptable levels for each SQL Server version are '
                                                                + @severityvalues
                                                                + N' and above.';
                                                END;
                                                -- SQL Authentication Enabled
                                                ELSE
                                                IF (@metricid = 3)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'M';
                                                        IF (@authentication <> @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getauthenticationmodename(@authentication);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if '''
                                                                + dbo.getauthenticationmodename(@severityvalues)
                                                                + N''' is enabled.';
                                                END;
                                                -- Login Audit Level
                                                ELSE
                                                IF (@metricid = 4)
                                                BEGIN
                                                        IF (CHARINDEX(''''
                                                                + @loginauditmode
                                                                + '''',
                                                                @severityvalues) > 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;
                                                        -- convert values to display values
                                                        SELECT
                                                                @strval = @severityvalues,
                                                                @metricthreshold = '',
                                                                @intval = CHARINDEX(''',''',
                                                                @strval);
                                                        WHILE (@intval > 0)
                                                        BEGIN
                                                                IF LEN(@metricthreshold) > 0
                                                                        SELECT
                                                                                @metricthreshold = @metricthreshold
                                                                                + ',';
                                                                SELECT
                                                                        @metricthreshold = @metricthreshold
                                                                        + ''''
                                                                        + dbo.getloginauditmodename(SUBSTRING(@strval,
                                                                        2, @intval - 2))
                                                                        + '''';
                                                                SELECT
                                                                        @strval = SUBSTRING(@strval,
                                                                        @intval + 2,
                                                                        LEN(@strval)
                                                                        - (@intval + 1)),
                                                                        @intval = CHARINDEX(''',''',
                                                                        @strval);
                                                        END;
                                                        IF LEN(@strval) > 0
                                                        BEGIN
                                                                IF LEN(@metricthreshold) > 0
                                                                        SELECT
                                                                                @metricthreshold = @metricthreshold
                                                                                + ', ';
                                                                SELECT
                                                                        @metricthreshold = @metricthreshold
                                                                        + ''''
                                                                        + dbo.getloginauditmodename(SUBSTRING(@strval,
                                                                        2,
                                                                        LEN(@strval) - 2))
                                                                        + '''';
                                                        END;

                                                        SELECT
                                                                @metricval = dbo.getloginauditmodename(@loginauditmode);
                                                        SELECT
                                                                @metricthreshold = N'Login auditing is acceptable if set to '
                                                                + @metricthreshold
                                                                + '.';
                                                END;
                                                -- Cross Database Ownership Chaining Enabled
                                                ELSE
                                                IF (@metricid = 5)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        IF (@crossdb <> @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@crossdb);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Cross Database Ownership Chaining is enabled.';
                                                END;
                                                -- Guest User Enabled
                                                ELSE
                                                IF (@metricid = 6)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare dbcursor cursor static for
												select databasename
													from sqldatabase
													where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
														and databasename not in ('
                                                                + @severityvalues
                                                                + N')
														and guestenabled = ''Y''
													order by databasename';
                                                        EXEC (@sql);
                                                        OPEN dbcursor;
                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        dbcursor INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Database with Guest user access: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, -- object id
                                                                                @strval);

                                                                FETCH NEXT FROM
                                                                dbcursor INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Databases with Guest user access: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Guest user access is available on databases other than: '
                                                                + @severityvalues;

                                                        CLOSE dbcursor;
                                                        DEALLOCATE dbcursor;
                                                END;
                                                -- Suspect Logins
                                                ELSE
                                                IF (@metricid = 7)
                                                BEGIN
                                                        -- This should return the same results as the report SP
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        SELECT
                                                                @intval = COUNT(*)
                                                        FROM serverprincipal a
                                                        INNER JOIN windowsaccount b
                                                                ON a.snapshotid = b.snapshotid
                                                                AND a.sid = b.sid
                                                                LEFT JOIN ancillarywindowsgroup c
                                                                        ON a.snapshotid = c.snapshotid
                                                                        AND a.name = c.windowsgroupname
                                                        WHERE a.snapshotid = @snapshotid
                                                        AND a.type IN (
                                                        'G', 'U')	-- Principal type is Windows Group or User
                                                        AND b.state = 'S'			-- State is suspect
                                                        AND c.windowsgroupname IS NULL;	-- Account is not OS controlled well-known

                                                        IF (@intval = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @strval = N'N';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @strval = N'Y';

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if any Windows Accounts have permissions on the server, but could not be verified with Active Directory.';
                                                END;
                                                -- C2 Audit Trace Enabled
                                                ELSE
                                                IF (@metricid = 8)
                                                BEGIN
                                                        SELECT
                                                                @strval = @c2audittrace,
                                                                @severityvalues = N'Y';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the C2 audit trace is not enabled.';
                                                END;
                                                -- Proxy Account Enabled
                                                ELSE
                                                IF (@metricid = 9)
                                                BEGIN
                                                        SELECT
                                                                @strval = @proxy,
                                                                @severityvalues = N'N';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the proxy account is enabled.';
                                                END;
                                                -- DAC Remote Access Enabled
                                                ELSE
                                                IF (@metricid = 10)
                                                BEGIN
                                                        SELECT
                                                                @strval = @remotedac,
                                                                @severityvalues = N'N';
                                                        -- this is a 2005 and up only value, so just mark it ok in 2000
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                                IF (@strval = @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @strval = N'N/A';

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if remote access through a Dedicated Administrator Connection is enabled.';
                                                END;
                                                -- Integration Services
                                                ELSE
                                                IF (@metricid = 11)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                CREATE TABLE #roletbl (
                                                                        rolename
                                                                        nvarchar(128)
                                                                        COLLATE
                                                                        DATABASE_DEFAULT
                                                                );

                                                                INSERT INTO #roletbl
                                                                EXEC @err = [dbo].[isp_sqlsecure_getmsdbvalidroleslist];

                                                                SELECT
                                                                        @sql = N'declare proccursur cursor static for
													select a.name as objectname, c.name as granteename, b.permission
														from databaseobject a,
															databaseobjectpermission b,
															databaseprincipal c
														where a.snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' 
															and a.dbid = 4 and a.type = N''P''
															and a.name in ('
                                                                        + @severityvalues
                                                                        + N')
															and a.snapshotid = b.snapshotid
															and a.dbid = b.dbid
															and a.objectid = b.objectid
															and b.snapshotid = c.snapshotid
															and b.dbid = c.dbid
															and (b.isgrant = N''Y'' or b.isgrantwith = N''Y'')
															and b.grantee = c.uid
															and c.name not in (select rolename from #roletbl)
														order by objectname, granteename';

                                                                EXEC (@sql);
                                                                OPEN proccursur;

                                                                SELECT
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                proccursur INTO @strval,
                                                                @strval2,
                                                                @strval3;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@intval2 = 1
                                                                                OR LEN(@metricval)
                                                                                + LEN(@strval) > 1010
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + @strval3
                                                                                        + N' granted to '''
                                                                                        + @strval2
                                                                                        + N''' on '''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Permissions on stored procedure found: ' + @strval3 + N' granted to ''' + @strval2 + N''' on ''' + @strval + N'''', 4, -- database ID,
                                                                                        N'P', -- object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        proccursur INTO @strval,
                                                                        @strval2,
                                                                        @strval3;
                                                                END;
                                                                CLOSE proccursur;
                                                                DEALLOCATE proccursur;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No permissions found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Permissions on stored procedures found: '
                                                                                + @metricval;

                                                                DROP TABLE #roletbl;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of Integration Services stored procedures was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if permissions have been granted on any of these stored procedures: '
                                                                + @severityvalues;
                                                END;
                                                -- 'OLAP SQL Authentication Enabled
                                                ELSE
                                                IF (@metricid = 12)
                                                BEGIN
                                                        -- this metric has been removed, but a placeholder is left here so it won't be reused
                                                        SELECT
                                                                @err = 0,
                                                                @sevcode = -1,
                                                                @metricval = N'',
                                                                @metricthreshold = @severityvalues;
                                                END;
                                                -- SQL Mail Enabled
                                                ELSE
                                                IF (@metricid = 13)
                                                BEGIN
                                                        -- test for 2005 or later
                                                        IF ((@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                                AND @sqlmail = N'N'
                                                                AND @databasemail = N'N'
                                                                )
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'SQL Mail is not enabled.';
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                -- This should return the same results as the report SP
                                                                SELECT
                                                                        @severityvalues = N'Y';
                                                                SELECT
                                                                        @intval = COUNT(*)
                                                                FROM databaseobject
                                                                WHERE snapshotid = @snapshotid
                                                                AND [type] = 'X'
                                                                AND [name] LIKE 'xp_%mail';

                                                                IF (@intval = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No SQL Mail stored procedures were found.';
                                                                ELSE
                                                                BEGIN
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'SQL Mail stored procedures found';
                                                                        IF (@sqlmail = @severityvalues)
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N' and SQL Mail is enabled';
                                                                        IF (@databasemail = @severityvalues)
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N' and Database Mail is enabled';
                                                                END;
                                                                SELECT
                                                                        @metricval = @metricval
                                                                        + '.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Sql Mail stored procedures like ''xp_%mail'' are found and SQL Mail or Database Mail are enabled (Sql 2005 only).';
                                                END;
                                                -- SQL Agent Mail Enabled
                                                ELSE
                                                IF (@metricid = 14)
                                                BEGIN
                                                        IF (LEN(RTRIM(@agentmailprofile)) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'SQL Agent Mail profile not found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'SQL Agent Mail profile found: '
                                                                        + @agentmailprofile;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if a Sql Agent Mail profile exists.';
                                                END;
                                                -- Sample Databases Exist
                                                ELSE
                                                IF (@metricid = 15)
                                                BEGIN
                                                        IF LEN(@severityvalues) > 0
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare dbcursor cursor static for
													select [databasename]
														from vwdatabases 
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N'
															and [databasename] in ('
                                                                        + @severityvalues
                                                                        + N')
														order by [databasename]';
                                                                EXEC (@sql);
                                                                OPEN dbcursor;

                                                                SELECT
                                                                        @strval = '',
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                dbcursor INTO @strval;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@intval2 = 1
                                                                                OR LEN(@metricval)
                                                                                + LEN(@strval) > 1010
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Sample database found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                        N'DB', -- object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        dbcursor INTO @strval;
                                                                END;

                                                                CLOSE dbcursor;
                                                                DEALLOCATE dbcursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'None found.';
                                                                ELSE
                                                                BEGIN
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Sample databases found: '
                                                                                + @metricval;
                                                                END;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No sample databases were provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if these sample databases exist: '
                                                                + @severityvalues;
                                                END;
                                                -- sa Account Exists
                                                ELSE
                                                IF (@metricid = 16)
                                                BEGIN
                                                        -- only apply this check if the version is 2005 or greater
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                        BEGIN
                                                                -- check to make sure the sa account is either disabled or renamed
                                                                SELECT
                                                                        @severityvalues = N'N';
                                                                SELECT
                                                                        @metricval = [name],
                                                                        @strval = [disabled]
                                                                FROM serverprincipal
                                                                WHERE snapshotid = @snapshotid
                                                                AND sid = 0x01;
                                                                IF (LOWER(@metricval) = N'sa'
                                                                        AND @strval = @severityvalues
                                                                        )
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;

                                                                SELECT
                                                                        @metricval = N'The sa account is named '''
                                                                        + @metricval
                                                                        + N''''
                                                                        + CASE
                                                                                WHEN @strval = @severityvalues THEN N'.'
                                                                                ELSE N' and is enabled.'
                                                                        END;
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The sa account is always enabled on SQL Server 2000.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the sa account has not been renamed and is enabled.';
                                                END;
                                                -- sa Account Blank Password
                                                ELSE
                                                IF (@metricid = 17)
                                                BEGIN
                                                        SELECT
                                                                @strval = @sapassword,
                                                                @severityvalues = N'N';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the sa account has a blank password.';
                                                END;
                                                -- System Table Updates
                                                ELSE
                                                IF (@metricid = 18)
                                                BEGIN
                                                        SELECT
                                                                @strval = @systemtables,
                                                                @severityvalues = N'N';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if System Table Updates are enabled.';
                                                END;
                                                -- Everyone System Table Access
                                                ELSE
                                                IF (@metricid = 19)
                                                BEGIN
                                                        -- This uses the same logic as the report SP
                                                        IF NOT EXISTS (SELECT
                                                                        *
                                                                FROM windowsaccount
                                                                WHERE snapshotid = @snapshotid
                                                                AND sid = @everyonesid)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Everyone account not found on server.';
                                                        ELSE
                                                        BEGIN
                                                                -- this code is based on getuserpermissions to setup the list of db users
                                                                CREATE TABLE #logintbl (
                                                                        sid
                                                                        varbinary(85)
                                                                );

                                                                -- insert everyone user in the table, just in case even though it shouldn't
                                                                INSERT INTO #logintbl (sid)
                                                                        VALUES (@everyonesid);

                                                                INSERT INTO #logintbl
                                                                EXEC @err = [dbo].[isp_sqlsecure_getwindowsgroupparents] @snapshotid = @snapshotid,
                                                                                                                         @inputsid = @everyonesid;

                                                                CREATE TABLE #usertbl (
                                                                        dbid
                                                                        int,
                                                                        uid int
                                                                );

                                                                DECLARE @dbid int,
                                                                        @uid int;

                                                                DECLARE logincursor CURSOR FOR
                                                                SELECT DISTINCT
                                                                        a.dbid,
                                                                        a.uid
                                                                FROM databaseprincipal a,
                                                                     #logintbl b
                                                                WHERE a.snapshotid = @snapshotid
                                                                AND a.usersid = b.sid
                                                                -- select any object from master db to get system tables for now
                                                                AND a.dbid = 1;

                                                                OPEN logincursor;
                                                                FETCH NEXT FROM
                                                                logincursor INTO @dbid,
                                                                @uid;

                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        INSERT INTO #usertbl
                                                                        EXEC isp_sqlsecure_getdatabaseuserparents @snapshotid,
                                                                                                                  @dbid,
                                                                                                                  @uid;

                                                                        FETCH NEXT FROM
                                                                        logincursor INTO @dbid,
                                                                        @uid;

                                                                END;

                                                                CLOSE logincursor;
                                                                DEALLOCATE logincursor;

                                                                -- check if user 'guest' is valid. If so, then current login will have public database role even if there is
                                                                --	no database user mapped to it.
                                                                IF EXISTS (SELECT
                                                                                *
                                                                        FROM databaseprincipal a
                                                                        WHERE UPPER(a.name) = 'GUEST'
                                                                        AND UPPER(a.hasaccess) = 'Y'
                                                                        AND a.snapshotid = @snapshotid)
                                                                BEGIN
                                                                        -- public uid is always 0
                                                                        INSERT INTO #usertbl (dbid,
                                                                        uid)
                                                                                SELECT
                                                                                        dbid,
                                                                                        0
                                                                                FROM databaseprincipal a
                                                                                WHERE UPPER(a.name) = 'GUEST'
                                                                                AND UPPER(a.hasaccess) = 'Y'
                                                                                AND a.snapshotid = @snapshotid;

                                                                        -- insert guest user as well
                                                                        INSERT INTO #usertbl (dbid,
                                                                        uid)
                                                                                SELECT DISTINCT
                                                                                        dbid,
                                                                                        uid
                                                                                FROM databaseprincipal a
                                                                                WHERE UPPER(a.name) = 'GUEST'
                                                                                AND UPPER(a.hasaccess) = 'Y'
                                                                                AND snapshotid = @snapshotid;
                                                                END;

                                                                -- insert alias users
                                                                INSERT INTO #usertbl (dbid,
                                                                uid)
                                                                        SELECT DISTINCT
                                                                                dbid,
                                                                                altuid
                                                                        FROM databaseprincipal
                                                                        WHERE snapshotid = @snapshotid
                                                                        AND isalias = 'Y'
                                                                        AND altuid IS NOT NULL
                                                                        AND usersid IN (SELECT DISTINCT
                                                                                sid
                                                                        FROM #logintbl);

                                                                SELECT
                                                                        @intval = COUNT(*)
                                                                FROM vwdatabaseobjectpermission a,
                                                                     #usertbl b,
                                                                     databaseprincipal c
                                                                WHERE a.snapshotid = @snapshotid
                                                                AND a.dbid = b.dbid
                                                                AND a.grantee = b.uid
                                                                AND a.snapshotid = c.snapshotid
                                                                AND a.dbid = c.dbid
                                                                AND (b.uid = c.uid
                                                                OR (UPPER(c.isalias) = 'Y'
                                                                AND c.altuid = b.uid
                                                                )
                                                                );
                                                                IF (@intval = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'Everyone does not have access to any system tables.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Everyone has access to '
                                                                                + CONVERT(nvarchar, @intval)
                                                                                + N' system tables.';

                                                                DROP TABLE #usertbl;
                                                                DROP TABLE #logintbl;
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the Everyone Windows group has access to any system tables.';
                                                END;
                                                -- Startup Stored Procedures Enabled
                                                ELSE
                                                IF (@metricid = 20)
                                                BEGIN
                                                        SELECT
                                                                @strval = @startupprocs,
                                                                @severityvalues = N'N';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if scan for stored procedures at startup is enabled.';
                                                END;
                                                -- Startup Stored Procedures
                                                ELSE
                                                IF (@metricid = 21)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare proccursur cursor static for
													select [name]
														from vwdatabaseobject
														where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
															and [type] in (N''P'', N''X'')
															 and runatstartup = N''Y''';
                                                        IF (LEN(@severityvalues) > 0)
                                                                SELECT
                                                                        @sql = @sql
                                                                        + ' and [name] not in ('
                                                                        + @severityvalues
                                                                        + N')';
                                                        SELECT
                                                                @sql = @sql
                                                                + ' order by [name]';

                                                        EXEC (@sql);
                                                        OPEN proccursur;

                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        proccursur INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Unapproved stored procedures found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'P', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                proccursur INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Unapproved stored procedures found: '
                                                                        + @metricval;

                                                        CLOSE proccursur;
                                                        DEALLOCATE proccursur;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if startup stored procedures exist'
                                                                + CASE
                                                                        WHEN LEN(@severityvalues) > 0 THEN N' and are not in '
                                                                                + @severityvalues
                                                                                + N'.'
                                                                        ELSE N'.'
                                                                END;
                                                END;
                                                -- Stored Procedures Encrypted
                                                ELSE
                                                IF (@metricid = 22)
                                                BEGIN
                                                        DECLARE proccursur CURSOR STATIC FOR
                                                        SELECT
                                                                b.databasename,
                                                                COUNT(a.objectid)
                                                        FROM vwdatabaseobject a,
                                                             vwdatabases b
                                                        WHERE a.snapshotid = @snapshotid
                                                        AND a.snapshotid = b.snapshotid
                                                        AND a.dbid = b.dbid
                                                        AND a.[type] = N'P'
                                                        AND a.isencrypted = N'N'
                                                        GROUP BY b.databasename;

                                                        OPEN proccursur;

                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        proccursur INTO @strval,
                                                        @intval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                SELECT
                                                                        @strval = @strval
                                                                        + N' ('
                                                                        + CONVERT(nvarchar, @intval)
                                                                        + N')',
                                                                        @strval2 = 'Unencrypted stored procedures found in these databases: ';
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > (1010
                                                                        - LEN(@strval2))
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Unencrypted stored procedures found in the database: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                proccursur INTO @strval,
                                                                @intval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No unencrypted stored procedures were found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = @strval2
                                                                        + @metricval;

                                                        CLOSE proccursur;
                                                        DEALLOCATE proccursur;

                                                        SELECT
                                                                @metricthreshold = 'Server is vulnerable if unencrypted stored procedures exist.';
                                                END;
                                                -- User Defined Extended Stored Procedures (XPs)
                                                ELSE
                                                IF (@metricid = 23)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare proccursur cursor static for
													select [name]
														from vwdatabaseobject
														where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
															and [type] = N''X''
															and userdefined = N''Y''';
                                                        IF (LEN(@severityvalues) > 0)
                                                                SELECT
                                                                        @sql = @sql
                                                                        + ' and [name] not in ('
                                                                        + @severityvalues
                                                                        + N')';
                                                        SELECT
                                                                @sql = @sql
                                                                + ' order by [name]';

                                                        EXEC (@sql);
                                                        OPEN proccursur;

                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        proccursur INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Unapproved extended stored procedure found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'X', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                proccursur INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Unapproved extended stored procedures found: '
                                                                        + @metricval;

                                                        CLOSE proccursur;
                                                        DEALLOCATE proccursur;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if user defined extended stored procedures exist'
                                                                + CASE
                                                                        WHEN LEN(@severityvalues) > 0 THEN N' not in '
                                                                                + @severityvalues
                                                                        ELSE N''
                                                                END + N'.';
                                                END;
                                                -- Dangerous Extended Stored Procedures (XPs)
                                                ELSE
                                                IF (@metricid = 24)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare proccursur cursor static for
													select a.name as objectname, c.name as granteename, b.permission
														from databaseobject a,
															databaseobjectpermission b,
															databaseprincipal c
														where a.snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' 
															and a.type = N''X''
															and a.name in ('
                                                                        + @severityvalues
                                                                        + N')
															and a.snapshotid = b.snapshotid
															and a.dbid = b.dbid
															and a.objectid = b.objectid
															and b.snapshotid = c.snapshotid
															and b.dbid = c.dbid
															and (b.isgrant = N''Y'' or b.isgrantwith = N''Y'')
															and b.grantee = c.uid
														order by objectname, granteename';
                                                                EXEC (@sql);
                                                                OPEN proccursur;

                                                                SELECT
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                proccursur INTO @strval,
                                                                @strval2,
                                                                @strval3;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@intval2 = 1
                                                                                OR LEN(@metricval)
                                                                                + LEN(@strval) > 1010
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + @strval3
                                                                                        + N' granted to '''
                                                                                        + @strval2
                                                                                        + N''' on '''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Permission on extended stored procedures found: ''' + @strval3 + N' granted to ''' + @strval2 + N''' on ''' + @strval + N'''', NULL, -- database ID,
                                                                                        N'X', -- object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        proccursur INTO @strval,
                                                                        @strval2,
                                                                        @strval3;
                                                                END;
                                                                CLOSE proccursur;
                                                                DEALLOCATE proccursur;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No permissions found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Permissions on extended stored procedures found: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of dangerous extended stored procedures was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if permissions have been granted on any of these extended stored procedures: '
                                                                + @severityvalues;
                                                END;
                                                -- Remote Access
                                                ELSE
                                                IF (@metricid = 25)
                                                BEGIN
                                                        SELECT
                                                                @strval = @remoteaccess,
                                                                @severityvalues = N'N';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if remote access is enabled.';
                                                END;
                                                -- Protocols
                                                ELSE
                                                IF (@metricid = 26)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare protocolcursur cursor static for
												select protocolname
													from serverprotocol
													where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
														and protocolname not in ('
                                                                + @severityvalues
                                                                + N')
													order by protocolname';
                                                        EXEC (@sql);
                                                        OPEN protocolcursur;

                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        protocolcursur INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Unapproved protocol found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'PR', -- there is no type for protocols
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                protocolcursur INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Unapproved protocols found: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if using protocols other than: '
                                                                + @severityvalues;

                                                        CLOSE protocolcursur;
                                                        DEALLOCATE protocolcursur;
                                                END;
                                                -- Common TCP Port Used
                                                ELSE
                                                IF (@metricid = 27)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare portcursur cursor static for
												select case when dynamicport = N''Y'' then N''dynamic'' else isnull([port],'''') end as port
													from serverprotocol
													where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
														and protocolname = ''TCP/IP''
														and case when dynamicport = N''Y'' then N''dynamic'' else isnull([port],'''') end in ('''''
                                                                + CASE
                                                                        WHEN LEN(@severityvalues) > 0 THEN N','
                                                                                + @severityvalues
                                                                        ELSE N''
                                                                END + N')
													order by port';
                                                        --	Check for dynamic removed from where clause per PR 802421 02/05/2010
                                                        --	dynamic must now be entered in the list to be a finding
                                                        --	or dynamicport = N''Y'')
                                                        EXEC (@sql);
                                                        OPEN portcursur;

                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        portcursur INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Unapproved TCP/IP port found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'PR', -- there is no type for ports
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                portcursur INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Unapproved TCP/IP ports found: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if TCP/IP uses any of these ports: '
                                                                + @severityvalues;

                                                        CLOSE portcursur;
                                                        DEALLOCATE portcursur;
                                                END;
                                                -- Hidden From Browsing
                                                ELSE
                                                IF (@metricid = 28)
                                                BEGIN
                                                        SELECT
                                                                @strval = @hide,
                                                                @severityvalues = N'Y';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Hide from Browsing is not enabled.';
                                                END;
                                                -- Agent Job Execution
                                                ELSE
                                                IF (@metricid = 29)
                                                BEGIN
                                                        SELECT
                                                                @strval = @agentsysadmin,
                                                                @severityvalues = N'Y';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Agent CmdExec job execution is not restricted to system administrators.';
                                                END;
                                                -- Replication Enabled
                                                ELSE
                                                IF (@metricid = 30)
                                                BEGIN
                                                        SELECT
                                                                @strval = @replication,
                                                                @severityvalues = N'N';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if replication is enabled.';
                                                END;
                                                -- Unexpected Registry Key Owners
                                                ELSE
                                                IF (@metricid = 31)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare keycursor cursor static for
													select objectname, ownername
														from vwregistrykey
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' and lower(ownername) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';
                                                                IF (CHARINDEX('%',
                                                                        @severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @strval = LOWER(@severityvalues),
                                                                                @intval = CHARINDEX(''',''',
                                                                                @strval);
                                                                        WHILE (@intval > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(ownername) not like '
                                                                                                + SUBSTRING(@strval,
                                                                                                1, @intval);
                                                                                SELECT
                                                                                        @strval = SUBSTRING(@strval,
                                                                                        @intval + 2,
                                                                                        LEN(@strval)
                                                                                        - (@intval + 1));
                                                                                SELECT
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                        END;
                                                                        IF (LEN(@strval) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(ownername) not like '
                                                                                                + @strval;
                                                                        END;
                                                                END;
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N' order by objectname, ownername';

                                                                EXEC (@sql);
                                                                OPEN keycursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                keycursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        SELECT
                                                                                @intval = @intval
                                                                                + 1;
                                                                        IF (@intval2 = 1
                                                                                OR LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval
                                                                                        + N''' has owner '''
                                                                                        + @strval2
                                                                                        + '''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Registry key with unapproved owners found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                        N'RK', -- no registry key type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        keycursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE keycursor;
                                                                DEALLOCATE keycursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No keys found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @intval)
                                                                                + N' keys with unapproved owners found: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of approved owners was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if registry key owners are not these users: '
                                                                + @severityvalues;
                                                END;
                                                -- Unexpected Registry Key Permissions
                                                ELSE
                                                IF (@metricid = 32)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare filecursor cursor static for
													select objectname, grantee
														from vwregistrykeypermission
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' and accesstype is not null and lower(grantee) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';
                                                                IF (CHARINDEX('%',
                                                                        @severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @strval = LOWER(@severityvalues),
                                                                                @intval = CHARINDEX(''',''',
                                                                                @strval);
                                                                        WHILE (@intval > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(grantee) not like '
                                                                                                + SUBSTRING(@strval,
                                                                                                1, @intval);
                                                                                SELECT
                                                                                        @strval = SUBSTRING(@strval,
                                                                                        @intval + 2,
                                                                                        LEN(@strval)
                                                                                        - (@intval + 1));
                                                                                SELECT
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                        END;
                                                                        IF (LEN(@strval) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(grantee) not like '
                                                                                                + @strval;
                                                                        END;
                                                                END;
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N' order by objectname, grantee';

                                                                EXEC (@sql);
                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@strval <> @strval3)
                                                                                SELECT
                                                                                        @intval = @intval
                                                                                        + 1;
                                                                        IF (LEN(@metricval)
                                                                                +
                                                                                         CASE
                                                                                                 WHEN (@strval3 = @strval) THEN 13
                                                                                                 ELSE LEN(@strval)
                                                                                         END
                                                                                + LEN(@strval2) > 1400
                                                                                OR @intval2 = 1
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                        BEGIN
                                                                                IF (@strval = @strval3)
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N' and grantee '''
                                                                                                + @strval2
                                                                                                + '''';
                                                                                ELSE
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + CASE
                                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                        ELSE N''
                                                                                                END + N''''
                                                                                                + @strval
                                                                                                + N''' has grantee '''
                                                                                                + @strval2
                                                                                                + '''';
                                                                        END;

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Registry key with unapproved permissions found: ''' + @strval + N''' has grantee ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'RK', -- no registry key object type
                                                                                        NULL, @strval);

                                                                        SELECT
                                                                                @strval3 = @strval;

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No keys found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @intval)
                                                                                + N' keys with unapproved permissions found: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of approved users was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if registry key permissions are granted to users other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Files on NTFS Drives
                                                ELSE
                                                IF (@metricid = 33)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'NTFS,REFS';
                                                        DECLARE drivecursor CURSOR FOR
                                                        SELECT DISTINCT
                                                                LOWER(LEFT(objectname,
                                                                2)) AS drive,
                                                                disktype
                                                        FROM vwfilesystemobject
                                                        WHERE snapshotid = @snapshotid
                                                        AND UPPER(disktype) not in (select Value from splitbydelimiter(@severityvalues,','));

                                                        DECLARE @disktype nvarchar(16);

                                                        OPEN drivecursor;
                                                        FETCH NEXT FROM
                                                        drivecursor INTO @strval,
                                                        @disktype;
                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + @strval
                                                                                + N' is '
                                                                                + @disktype;

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Non-NTFS drive found: ' + @strval + N' is ' + @disktype, NULL, -- database ID,
                                                                                N'DR', -- no disk drive object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                drivecursor INTO @strval,
                                                                @disktype;
                                                        END;

                                                        CLOSE drivecursor;
                                                        DEALLOCATE drivecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'All files are on NTFS drives.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if files are found on drives that are not formatted as NTFS.';
                                                END;
                                                -- Unexpected Executable File Owners
                                                ELSE
                                                IF (@metricid = 34)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare filecursor cursor static for
													select distinct lower(objectname) as objectname, ownername
														from vwfilesystemobject
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' and lower(right(objectname,4)) = N''.exe'' and lower(ownername) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';
                                                                IF (CHARINDEX('%',
                                                                        @severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @strval = LOWER(@severityvalues),
                                                                                @intval = CHARINDEX(''',''',
                                                                                @strval);
                                                                        WHILE (@intval > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(ownername) not like '
                                                                                                + SUBSTRING(@strval,
                                                                                                1, @intval);
                                                                                SELECT
                                                                                        @strval = SUBSTRING(@strval,
                                                                                        @intval + 2,
                                                                                        LEN(@strval)
                                                                                        - (@intval + 1));
                                                                                SELECT
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                        END;
                                                                        IF (LEN(@strval) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(ownername) not like '
                                                                                                + @strval;
                                                                        END;
                                                                END;
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N' order by objectname, ownername';

                                                                EXEC (@sql);
                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        SELECT
                                                                                @intval = @intval
                                                                                + 1;
                                                                        IF (LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400)
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval
                                                                                        + N''' has owner '''
                                                                                        + @strval2
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'File with unapproved owner found: ''' + @strval + N''' has owner ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'FI', -- no file object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No files found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @intval)
                                                                                + N' files with unapproved owners found: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of approved owners was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if executable file owners are not these users: '
                                                                + @severityvalues;
                                                END;
                                                -- Unexpected Executable File Permissions
                                                ELSE
                                                IF (@metricid = 35)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare filecursor cursor static for
													select distinct lower(objectname) as objectname, grantee
														from vwfilesystemobjectpermission
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' and lower(right(objectname,4)) = N''.exe'' and accesstype is not null and lower(grantee) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';
                                                                IF (CHARINDEX('%',
                                                                        @severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @strval = LOWER(@severityvalues),
                                                                                @intval = CHARINDEX(''',''',
                                                                                @strval);
                                                                        WHILE (@intval > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(grantee) not like '
                                                                                                + SUBSTRING(@strval,
                                                                                                1, @intval);
                                                                                SELECT
                                                                                        @strval = SUBSTRING(@strval,
                                                                                        @intval + 2,
                                                                                        LEN(@strval)
                                                                                        - (@intval + 1));
                                                                                SELECT
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                        END;
                                                                        IF (LEN(@strval) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(grantee) not like '
                                                                                                + @strval;
                                                                        END;
                                                                END;
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N' order by objectname, grantee';

                                                                EXEC (@sql);
                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@strval <> @strval3)
                                                                                SELECT
                                                                                        @intval = @intval
                                                                                        + 1;
                                                                        IF (LEN(@metricval)
                                                                                +
                                                                                         CASE
                                                                                                 WHEN (@strval3 = @strval) THEN 13
                                                                                                 ELSE LEN(@strval)
                                                                                         END
                                                                                + LEN(@strval2) > 1400
                                                                                OR @intval2 = 1
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                        BEGIN
                                                                                IF (@strval = @strval3)
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N' and grantee '''
                                                                                                + @strval2
                                                                                                + '''';
                                                                                ELSE
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + CASE
                                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                        ELSE N''
                                                                                                END + N''''
                                                                                                + @strval
                                                                                                + N''' has grantee '''
                                                                                                + @strval2
                                                                                                + '''';
                                                                        END;

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'File with unapproved permission found: ''' + @strval + N''' has grantee ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'FI', -- no file object type
                                                                                        NULL, @strval);

                                                                        SELECT
                                                                                @strval3 = @strval;

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No files found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @intval)
                                                                                + N' files with unapproved permissions found: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of approved users was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if executable file permissions are granted to users other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Unexpected Database File Owners
                                                ELSE
                                                IF (@metricid = 36)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare filecursor cursor static for
													select distinct lower(objectname) as objectname, ownername
														from vwfilesystemobject
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' and objecttype = N''DB'' and lower(ownername) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';
                                                                IF (CHARINDEX('%',
                                                                        @severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @strval = LOWER(@severityvalues),
                                                                                @intval = CHARINDEX(''',''',
                                                                                @strval);
                                                                        WHILE (@intval > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(ownername) not like '
                                                                                                + SUBSTRING(@strval,
                                                                                                1, @intval);
                                                                                SELECT
                                                                                        @strval = SUBSTRING(@strval,
                                                                                        @intval + 2,
                                                                                        LEN(@strval)
                                                                                        - (@intval + 1));
                                                                                SELECT
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                        END;
                                                                        IF (LEN(@strval) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(ownername) not like '
                                                                                                + @strval;
                                                                        END;
                                                                END;
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N' order by objectname, ownername';

                                                                EXEC (@sql);
                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        SELECT
                                                                                @intval = @intval
                                                                                + 1;
                                                                        IF (LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400)
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval
                                                                                        + N''' has owner '''
                                                                                        + @strval2
                                                                                        + '''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'File with unapproved owner found: ''' + @strval + N''' has owner ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'FI', -- no file object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No files found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @intval)
                                                                                + N' files with unapproved owners found: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of approved owners was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if database file owners are not these users: '
                                                                + @severityvalues;
                                                END;
                                                -- Everyone Database File Access
                                                ELSE
                                                IF (@metricid = 37)
                                                BEGIN
                                                        IF NOT EXISTS (SELECT
                                                                        *
                                                                FROM serveroswindowsaccount
                                                                WHERE snapshotid = @snapshotid
                                                                AND sid = @everyonesid)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Everyone account not found in file permissions on server.';
                                                        ELSE
                                                        BEGIN
                                                                CREATE TABLE #oslogintbl (
                                                                        sid
                                                                        varbinary(85)
                                                                );

                                                                -- insert everyone user in the table
                                                                INSERT INTO #oslogintbl (sid)
                                                                        VALUES (@everyonesid);

                                                                INSERT INTO #oslogintbl
                                                                EXEC @err = [dbo].[isp_sqlsecure_getwindowsgroupparentsos] @snapshotid = @snapshotid,
                                                                                                                           @inputsid = @everyonesid;

                                                                --check for permissions
                                                                DECLARE filecursor CURSOR STATIC FOR
                                                                SELECT
                                                                        a.objectname,
                                                                        a.grantee AS perm,
                                                                        N'P' AS [type]
                                                                FROM vwfilesystemobjectpermission a
                                                                WHERE a.snapshotid = @snapshotid
                                                                AND a.objecttype = N'DB'
                                                                AND a.accesstype IS NOT NULL
                                                                AND a.sid IN (SELECT
                                                                        [sid]
                                                                FROM #oslogintbl)
                                                                UNION
                                                                --check for file owners of no permissions found
                                                                SELECT
                                                                        a.objectname,
                                                                        a.ownername AS perm,
                                                                        N'O' AS [type]
                                                                FROM vwfilesystemobject a
                                                                WHERE a.snapshotid = @snapshotid
                                                                AND a.objecttype = N'DB'
                                                                AND a.ownersid IN (SELECT
                                                                        [sid]
                                                                FROM #oslogintbl)
                                                                ORDER BY objectname,
                                                                [type],
                                                                perm;

                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                DECLARE @type char;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2, @type;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@strval <> @strval3)
                                                                                SELECT
                                                                                        @intval = @intval
                                                                                        + 1;
                                                                        IF (LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400
                                                                                OR @intval2 = 1
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                        IF (@strval = @strval3)
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N' and '
                                                                                        + CASE
                                                                                                WHEN @type = 'O' THEN 'owner'
                                                                                                ELSE 'grantee'
                                                                                        END + N' '''
                                                                                        + @strval2
                                                                                        + '''';
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval
                                                                                        + N''' has '
                                                                                        + CASE
                                                                                                WHEN @type = 'O' THEN 'owner'
                                                                                                ELSE 'grantee'
                                                                                        END + N' '''
                                                                                        + @strval2
                                                                                        + '''';

                                                                        SELECT
                                                                                @strval3 = @strval;

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'File with Everyone access found: ''' + @strval + N''' has ' + CASE WHEN @type = 'O' THEN 'owner' ELSE 'grantee' END + N' ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'FI', -- object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2, @type;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'Everyone does not have access to any database files.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @intval)
                                                                                + N' files with Everyone access found: '
                                                                                + @metricval;

                                                                DROP TABLE #oslogintbl;
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the Everyone Windows group has access to any database files.';
                                                END;
                                                -- Unexpected Database File Permissions
                                                ELSE
                                                IF (@metricid = 38)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare filecursor cursor static for
													select distinct lower(objectname) as objectname, grantee
														from vwfilesystemobjectpermission
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N' and objecttype = N''DB'' and accesstype is not null and lower(grantee) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';
                                                                IF (CHARINDEX('%',
                                                                        @severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @strval = LOWER(@severityvalues),
                                                                                @intval = CHARINDEX(''',''',
                                                                                @strval);
                                                                        WHILE (@intval > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(grantee) not like '
                                                                                                + SUBSTRING(@strval,
                                                                                                1, @intval);
                                                                                SELECT
                                                                                        @strval = SUBSTRING(@strval,
                                                                                        @intval + 2,
                                                                                        LEN(@strval)
                                                                                        - (@intval + 1));
                                                                                SELECT
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                        END;
                                                                        IF (LEN(@strval) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + ' and lower(grantee) not like '
                                                                                                + @strval;
                                                                        END;
                                                                END;
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N' order by objectname, grantee';

                                                                EXEC (@sql);
                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@strval <> @strval3)
                                                                                SELECT
                                                                                        @intval = @intval
                                                                                        + 1;
                                                                        IF (LEN(@metricval)
                                                                                +
                                                                                         CASE
                                                                                                 WHEN (@strval3 = @strval) THEN 13
                                                                                                 ELSE LEN(@strval)
                                                                                         END
                                                                                + LEN(@strval2) > 1400
                                                                                OR @intval2 = 1
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                        BEGIN
                                                                                IF (@strval = @strval3)
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N' and grantee '''
                                                                                                + @strval2
                                                                                                + '''';
                                                                                ELSE
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + CASE
                                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                        ELSE N''
                                                                                                END + N''''
                                                                                                + @strval
                                                                                                + N''' has grantee '''
                                                                                                + @strval2
                                                                                                + '''';
                                                                        END;

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'File with unapproved permission found: ''' + @strval + N''' has grantee ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'FI', -- object type
                                                                                        NULL, @strval);

                                                                        SELECT
                                                                                @strval3 = @strval;

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No files found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = CONVERT(nvarchar, @intval)
                                                                                + N' files with unapproved permissions found: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of approved users was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if database file permissions are granted to users other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Operating System Version
                                                ELSE
                                                IF (@metricid = 39)
                                                BEGIN
                                                        -- changing this to ignore beginning and ending spaces which are strangely included in some of the version strings
                                                        -- they will be trimmed from both the os version and the match list for consistency
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @intval = 1;
                                                                SELECT
                                                                        @intval2 = CHARINDEX(''',''',
                                                                        @severityvalues);
                                                                WHILE @intval2 > 0
                                                                BEGIN
                                                                        INSERT INTO @tblval
                                                                                VALUES (LTRIM(RTRIM(SUBSTRING(@severityvalues, @intval + 1, @intval2 - @intval - 1))));
                                                                        SELECT
                                                                                @intval = @intval2
                                                                                + 2,
                                                                                @intval2 = CHARINDEX(''',''',
                                                                                @severityvalues,
                                                                                @intval + 1);
                                                                END;
                                                                INSERT INTO @tblval
                                                                        VALUES (LTRIM(RTRIM(SUBSTRING(@severityvalues, @intval + 1, LEN(@severityvalues) - @intval - 1))));
                                                        END;
                                                        SELECT
                                                                @strval = LTRIM(RTRIM(@os));
                                                        IF EXISTS (SELECT
                                                                        1
                                                                FROM @tblval
                                                                WHERE val = @strval)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;
                                                        SELECT
                                                                @metricval = N'Current version is '
                                                                + CASE
                                                                        WHEN @strval IS NULL THEN N'unknown. Check the snapshot status and the activity log for possible causes.'
                                                                        ELSE @os + '.'
                                                                END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if OS version is not in '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- SQL Server Service Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 40)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype = 0;
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Server Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Reporting Services Enabled
                                                ELSE
                                                IF (@metricid = 41)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype = 6;
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Reporting Services are '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- Analysis Services Enabled
                                                ELSE
                                                IF (@metricid = 42)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype = 3;
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Analysis Services are '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- Analysis Services Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 43)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype = 3;
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Analysis Services Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Notification Services Enabled
                                                ELSE
                                                IF (@metricid = 44)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype IN (
                                                        9, 11);
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Notification Services are '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- Notification Services Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 45)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype IN (
                                                                9, 11);
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Notification Services Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Integration Services Enabled
                                                ELSE
                                                IF (@metricid = 46)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype IN (
                                                        5, 12, 15);
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Integration Services are '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- Integration Services Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 47)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype IN (
                                                                5, 12, 15);
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Integration Services Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- SQL Server Agent Enabled
                                                ELSE
                                                IF (@metricid = 48)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype = 1;
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Server Agent is '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- SQL Server Agent Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 49)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype = 1;
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Server Agent Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Full-Text Search Enabled
                                                ELSE
                                                IF (@metricid = 50)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype IN (
                                                        2, 10, 14);
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Full-Text Search is '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- Full-Text Search Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 51)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                -- process all FT services because collector can collect multiples in a snapshot if 2000 and 2005 or later are installed together
                                                                SELECT
                                                                        @sql = N'declare svclogincursor cursor for
													select displayname, loginname 
														from vwservice 
														where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N'
															and servicetype in (2,10,14)
															and lower(loginname) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';

                                                                EXEC (@sql);

                                                                OPEN svclogincursor;
                                                                FETCH NEXT FROM
                                                                svclogincursor INTO @strval,
                                                                @strval2;

                                                                SELECT
                                                                        @intval2 = 0;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@intval2 = 1
                                                                                OR LEN(@metricval)
                                                                                + LEN(@strval) > 1010
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval2
                                                                                        + N''' for '''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Login Account is ''' + @strval2 + N''' for ''' + @strval + N'''', NULL, -- database ID,
                                                                                        N'iLOGN', -- object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        svclogincursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE svclogincursor;
                                                                DEALLOCATE svclogincursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = 'The service login account is acceptable or the service is not installed.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Current login account is '
                                                                                + @metricval
                                                                                + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Full-Text Search Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- SQL Server Browser Enabled
                                                ELSE
                                                IF (@metricid = 52)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype = 4;
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Server Browser is '
                                                                + @severityvalues
                                                                + '.';
                                                END;
                                                -- SQL Server Browser Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 53)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype = 4;
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Server Browser Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Audited Servers
                                                ELSE
                                                IF (@metricid = 54)
                                                BEGIN
                                                        -- any server found is valid. See post server loop processing for findings.
                                                        SELECT
                                                                @sevcode = @sevcodeok;
                                                        SELECT
                                                                @metricval = N'Server has audit data.';

                                                        SELECT
                                                                @metricthreshold = N'Assessment may not be valid if all servers do not have audit data.';
                                                END;
                                                -- Complete Audits
                                                ELSE
                                                IF (@metricid = 55)
                                                BEGIN
                                                        SELECT
                                                                @strval = @status,
                                                                @severityvalues = N'S';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Snapshot was successful';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Snapshot has warnings';

                                                        -- Make sure snapshot is a 2.0 snapshot or issue finding
                                                        IF (@collectorversion IS NOT NULL
                                                                AND @collectorversion >= '2.'
                                                                )
                                                                -- don't set sevcode to ok because it may already be a finding for warnings
                                                                SELECT
                                                                        @metricval = @metricval
                                                                        + N'.';
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = @metricval
                                                                        + CASE
                                                                                WHEN RIGHT(@metricval,
                                                                                        10) = 'successful' THEN N', but'
                                                                                ELSE N' and'
                                                                        END
                                                                        + N' was created using SQLsecure version 1.2 or earlier.';
                                                        END;

                                                        --check to see if weak password detection was enabled during this snapshot
                                                        IF (@weakpasswordenabled != 'Y')
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = @metricval
                                                                        + N'   Password Health may have been omitted because Weak password detection was disabled during data collection.';
                                                        END;


                                                        -- Check that filters do not exclude anything
                                                        DECLARE @vermatch nvarchar(256),
                                                                @currule nvarchar(256),
                                                                @rule nvarchar(256),
                                                                @classname nvarchar(128),
                                                                @scope nvarchar(64);

                                                        DECLARE filtercursor CURSOR FOR
                                                        SELECT
                                                                rulename,
                                                                class,
                                                                classname,
                                                                scope,
                                                                matchstring
                                                        FROM SQLsecure.dbo.vwsnapshotfilterrules
                                                        WHERE snapshotid = @snapshotid
                                                        ORDER BY rulename,
                                                        classname;

                                                        OPEN filtercursor;
                                                        FETCH NEXT FROM
                                                        filtercursor INTO @rule,
                                                        @intval,
                                                        @classname,
                                                        @scope, @strval;

                                                        SELECT
                                                                @currule = N'';
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval <> 43)	-- skip checking extended stored procedures because they are system only and have no match strings
                                                                        IF (@scope <> N'A'
                                                                                OR LEN(@strval) > 0
                                                                                )	-- if not processing all or there is a match string then it is a finding
                                                                                SELECT
                                                                                        @sevcode = @severity;

                                                                -- add all filter rules to the output regardless of finding
                                                                SELECT
                                                                        @scope =
                                                                                        CASE @scope
                                                                                                WHEN N'A' THEN N'All'
                                                                                                WHEN N'S' THEN N'System'
                                                                                                ELSE N'User'
                                                                                        END;
                                                                SELECT
                                                                        @strval =
                                                                                         CASE
                                                                                                 WHEN @rule = @currule THEN N', '
                                                                                                 ELSE N'  Filter:'
                                                                                                         + @rule + N': '
                                                                                         END + @scope
                                                                        + N' '
                                                                        + @classname
                                                                        + CASE
                                                                                WHEN LEN(@strval) = 0 THEN N''
                                                                                ELSE N' matching '''
                                                                                        + @strval + ''''
                                                                        END;
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + @strval;

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Filter found: ' + @rule + N': ' + @scope + N' ' + @classname + CASE WHEN LEN(@strval) = 0 THEN N'' ELSE N' matching ''' + @strval END + N'''', NULL, -- database ID,
                                                                                N'RL', -- no filter rule object type
                                                                                NULL, @rule);

                                                                SELECT
                                                                        @currule = @rule;

                                                                FETCH NEXT FROM
                                                                filtercursor INTO @rule,
                                                                @intval,
                                                                @classname,
                                                                @scope, @strval;
                                                        END;

                                                        CLOSE filtercursor;
                                                        DEALLOCATE filtercursor;

                                                        -- if everything else is ok, then check and make sure all objects were included
                                                        IF (@sevcode < @severity)
                                                        BEGIN
                                                                SELECT
                                                                        @intval = COUNT(*)
                                                                FROM filterruleclass a
                                                                LEFT JOIN vwsnapshotfilterrules b
                                                                        ON (a.objectclass = b.class
                                                                        AND b.snapshotid = @snapshotid
                                                                        )
                                                                WHERE b.snapshotid IS NULL;
                                                                IF (@version > N'9.'
                                                                        OR @version < N'6.'
                                                                        )
                                                                BEGIN
                                                                        IF (@intval <> 6)
                                                                                SELECT
                                                                                        @sevcode = @severity,
                                                                                        @metricval = @metricval
                                                                                        + N'  Some objects may have been omitted by filtering during data collection.';
                                                                END;
                                                                ELSE
                                                                BEGIN
                                                                        IF (@intval <> 13)
                                                                                SELECT
                                                                                        @sevcode = @severity,
                                                                                        @metricval = @metricval
                                                                                        + N'  Some objects may have been omitted by filtering during data collection.';
                                                                END;
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server may be vulnerable if Snapshot status is not '
                                                                + dbo.getsnapshotstatus(@severityvalues)
                                                                + ' or data collection filters are excluding data.';
                                                END;
                                                -- Baseline Data
                                                ELSE
                                                IF (@metricid = 56)
                                                BEGIN
                                                        SELECT
                                                                @strval = ISNULL(@baseline,
                                                                N''),
                                                                @severityvalues = N'Y';
                                                        IF (@strval = @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Snapshot is marked as baseline.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Snapshot is not marked as baseline.'
                                                                        + @strval;

                                                        SELECT
                                                                @metricthreshold = N'Audit data may not be valid if snapshot is not marked as baseline.';
                                                END;
                                                -- Password Policy Enabled
                                                ELSE
                                                IF (@metricid = 57)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'N';
                                                        DECLARE logincursor CURSOR FOR
                                                        SELECT
                                                                name
                                                        FROM vwserverprincipal
                                                        WHERE snapshotid = @snapshotid
                                                        AND type = N'S'
                                                        AND ispolicychecked = @severityvalues;

                                                        OPEN logincursor;
                                                        FETCH NEXT FROM
                                                        logincursor INTO @strval;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Password policy not enforced on ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'iLOGN', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                logincursor INTO @strval;
                                                        END;

                                                        CLOSE logincursor;
                                                        DEALLOCATE logincursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'All SQL Logins have password policy enforced.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Password policy not enforced on '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if password policy is not enforced on all SQL Logins.';
                                                END;
                                                -- 'Public database role permissions
                                                ELSE
                                                IF (@metricid = 58)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        DECLARE databasecursor CURSOR FOR
                                                        SELECT DISTINCT
                                                                b.databasename
                                                        FROM databaseobjectpermission a,
                                                             sqldatabase b
                                                        WHERE a.snapshotid = @snapshotid
                                                        AND a.grantee = 0			--public uid is 0
                                                        AND a.snapshotid = b.snapshotid
                                                        AND a.dbid = b.dbid
                                                        UNION
                                                        SELECT DISTINCT
                                                                b.databasename
                                                        FROM databaserolemember a,
                                                             sqldatabase b
                                                        WHERE a.snapshotid = @snapshotid
                                                        AND a.rolememberuid = 0		--public uid is 0
                                                        AND a.snapshotid = b.snapshotid
                                                        AND a.dbid = b.dbid;
                                                        OPEN databasecursor;
                                                        FETCH NEXT FROM
                                                        databasecursor INTO @strval;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Public has permissions on ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                databasecursor INTO @strval;
                                                        END;

                                                        CLOSE databasecursor;
                                                        DEALLOCATE databasecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'No databases found with public permissions.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Public has permissions on '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the public role has been granted any permissions or is a role member.';
                                                END;
                                                -- 'Blank Passwords
                                                ELSE
                                                IF (@metricid = 59)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        DECLARE logincursor CURSOR FOR
                                                        SELECT
                                                                name
                                                        FROM vwserverprincipal
                                                        WHERE snapshotid = @snapshotid
                                                        AND type = N'S'
                                                        AND ispasswordnull = @severityvalues;

                                                        OPEN logincursor;
                                                        FETCH NEXT FROM
                                                        logincursor INTO @strval;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Login with blank password found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'iLOGN', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                logincursor INTO @strval;
                                                        END;

                                                        CLOSE logincursor;
                                                        DEALLOCATE logincursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No SQL Logins have blank passwords.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'These SQL Logins have blank passwords: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Logins are found that have a blank password.';
                                                END;
                                                -- 'Fixed roles assigned to public or guest
                                                ELSE
                                                IF (@metricid = 60)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        DECLARE databasecursor CURSOR FOR
                                                        SELECT DISTINCT
                                                                b.databasename
                                                        FROM databaserolemember a,
                                                             sqldatabase b
                                                        WHERE a.snapshotid = @snapshotid
                                                        AND a.rolememberuid IN (
                                                        0, 2)		--public uid is 0 and guest uid is 2
                                                        AND a.groupuid > 16383		--database fixed roles are 16384-16393
                                                        AND a.groupuid < 16394
                                                        AND a.snapshotid = b.snapshotid
                                                        AND a.dbid = b.dbid;
                                                        OPEN databasecursor;
                                                        FETCH NEXT FROM
                                                        databasecursor INTO @strval;
                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Public or guest is a member of a fixed role on ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                databasecursor INTO @strval;
                                                        END;

                                                        CLOSE databasecursor;
                                                        DEALLOCATE databasecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'No databases found with public or guest assigned to fixed database roles.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Public or guest is a member of a fixed role on '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the public role or the guest user is a member of any fixed database role.';
                                                END;
                                                -- Builtin/administrators
                                                ELSE
                                                IF (@metricid = 61)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        SELECT
                                                                @intval = 1
                                                        FROM serverrolemember a,
                                                             serverprincipal b,		-- Builtin\admin principal
                                                             serverprincipal c		-- sysadmin principal
                                                        WHERE a.snapshotid = @snapshotid
                                                        AND a.snapshotid = b.snapshotid
                                                        AND a.memberprincipalid = b.principalid
                                                        AND b.sid = @builtinadminsid
                                                        AND a.snapshotid = c.snapshotid
                                                        AND a.principalid = c.principalid
                                                        AND c.sid = @sysadminsid;

                                                        IF (@intval = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @strval = N'N';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @strval = N'Y';

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@strval);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if BUILTIN\Administrators is a member of the sysadmin server role.';
                                                END;
                                                --************************************************* version 2.5 security checks
                                                -- Password Expiration Enabled
                                                ELSE
                                                IF (@metricid = 62)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'N';
                                                        DECLARE logincursor CURSOR FOR
                                                        SELECT
                                                                name
                                                        FROM vwserverprincipal
                                                        WHERE snapshotid = @snapshotid
                                                        AND type = N'S'
                                                        AND isexpirationchecked = @severityvalues;

                                                        OPEN logincursor;
                                                        FETCH NEXT FROM
                                                        logincursor INTO @strval;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Password expiration not enabled for ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'iLOGN', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                logincursor INTO @strval;
                                                        END;

                                                        CLOSE logincursor;
                                                        DEALLOCATE logincursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'All SQL Logins have password expiration enabled.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Password expiration not enabled for '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Logins are found that do not implement password expiration.';
                                                END;

                                                -- Server is Domain Controller
                                                ELSE
                                                IF (@metricid = 63)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        IF (@dc <> @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity;

                                                        SELECT
                                                                @metricval = dbo.getyesnotext(@dc);
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if it is a primary or backup domain controller.';
                                                END;

                                                --************************************************* version 2.6 security checks
                                                -- Active Directory Helper Service Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 67)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype IN (
                                                                8, 13);
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Active Directory Helper Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Reporting Services Service Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 68)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype = 6;
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Reporting Services Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- Volume Shadow Copy Service (VSS) Writer Login Account Acceptable
                                                ELSE
                                                IF (@metricid = 69)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @strval = loginname
                                                                FROM vwservice
                                                                WHERE snapshotid = @snapshotid
                                                                AND servicetype = 7;
                                                                IF (LEN(@strval) > 0)
                                                                BEGIN
                                                                        IF (CHARINDEX(''''
                                                                                + @strval + '''',
                                                                                @severityvalues) > 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok;
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity;
                                                                        SELECT
                                                                                @metricval = N'Current login account is '
                                                                                + @strval + '.';
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No login account or service not found.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No approved login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if VSS Writer Service Login Account is a user other than: '
                                                                + @severityvalues;
                                                END;
                                                -- VSS Writer Enabled
                                                ELSE
                                                IF (@metricid = 70)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Running';
                                                        SELECT
                                                                @strval = [state]
                                                        FROM vwservice
                                                        WHERE snapshotid = @snapshotid
                                                        AND servicetype = 7;
                                                        IF (LEN(@strval) > 0)
                                                        BEGIN
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Current state is '
                                                                        + @strval + '.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Service not found or state undetermined.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if VSS Writer is '
                                                                + @severityvalues
                                                                + '.';
                                                END;
					-- Unauthorized Accounts Check
											ELSE IF (@metricid = 71)
											BEGIN
												IF(LEN(@severityvalues) > 0)
													BEGIN
														IF OBJECT_ID('tempdb..#usersWithExtendedPermissions') IS NOT NULL
															DROP TABLE #usersWithExtendedPermissions;
														CREATE TABLE #usersWithExtendedPermissions
														(name           NVARCHAR(128),
														 permissionName NVARCHAR(128),
														 isSysadmin     BIT
														);
														SELECT @sql = N'INSERT INTO #usersWithExtendedPermissions
																											SELECT name, permissionName, isSysadmin FROM
																													(
																														select distinct name, ''sysadmin'' as permissionName, 1 as isSysadmin 
																														from #sysadminstbl 
																														UNION
																														select distinct sprinc.name, permission as permissionName, 0 as isSysadmin from serverprincipal sprinc
																														left outer join [dbo].[serverpermission] as spermis on spermis.grantee = sprinc.principalid
																														where permission in (''IMPERSONATE ANY LOGIN'', ''SELECT ALL USER SECURABLES'', ''CONNECT ANY DATABASE'')
																														and sprinc.snapshotid = '+CONVERT( NVARCHAR, @snapshotid)+'
																														UNION
																														select distinct dprinc.name, permission as permissionName, 0 as isSysadmin from databaseprincipal dprinc
																														left outer join [dbo].[databaseobjectpermission] as dop on dop.grantee = dprinc.uid and dop.dbid = dprinc.dbid
																														where permission in (''ALTER ANY COLUMN MASTER KEY'', ''ALTER ANY COLUMN ENCRYPTION KEY'', ''VIEW ANY COLUMN MASTER KEY DEFINITION'', ''VIEW ANY COLUMN ENCRYPTION KEY DEFINITION'', ''ALTER ANY SECURITY POLICY'', ''ALTER ANY MASK'', ''UNMASK'')
																														and dprinc.snapshotid = '+CONVERT(NVARCHAR, @snapshotid)+'
																													) result
																											where lower(name) not in ('+LOWER(@severityvalues)+N')';
														IF(CHARINDEX('%', @severityvalues) > 0)
															BEGIN
																SELECT @strval = LOWER(@severityvalues),
																	   @intval = CHARINDEX(''',''', @strval);
																WHILE(@intval > 0)
																	BEGIN
																		SELECT @intval2 = CHARINDEX('%', @strval);
																		IF(@intval2 < @intval)		-- this item contains a wildcard
																			SELECT @sql = @sql+' and lower(name) not like '+SUBSTRING(@strval, 1, @intval);
																		SELECT @strval = SUBSTRING(@strval, @intval+2, LEN(@strval)-(@intval+1));
																		SELECT @intval = CHARINDEX(''',''', @strval);
																	END;
																IF(LEN(@strval) > 0)
																	BEGIN
																		SELECT @intval2 = CHARINDEX('%', @strval);
																		IF(@intval2 > 0)		-- this item contains a wildcard
																			SELECT @sql = @sql+' and lower(name) not like '+@strval;
																	END;
															END;
														SELECT @sql = @sql+N' order by name';
														SELECT @sql = @sql+'
																							declare sysadmincursor cursor for
																							SELECT name from #usersWithExtendedPermissions 
																							GROUP BY name 
																							ORDER BY name';
														EXEC (@sql);
														OPEN sysadmincursor;
														SELECT @intval = 0,
															   @intval2 = 0;
														DECLARE @unauthorizedUserName AS NVARCHAR(128);
														FETCH NEXT FROM sysadmincursor INTO @unauthorizedUserName;
														WHILE @@fetch_status = 0
															BEGIN
																DECLARE @currentRoleText AS NVARCHAR(MAX);
																SET @currentRoleText = '';
																IF(EXISTS
																  (
																	  SELECT 1
																	  FROM #usersWithExtendedPermissions
																	  WHERE name = @unauthorizedUserName
																  ))
																	BEGIN
																		DECLARE @unautorizedPermissionsList VARCHAR(MAX);
																		SET @unautorizedPermissionsList = '';
																		SELECT @unautorizedPermissionsList = @unautorizedPermissionsList+permissionName+', '
																		FROM #usersWithExtendedPermissions
																		WHERE name = @unauthorizedUserName;
																		SET @unautorizedPermissionsList = SUBSTRING(@unautorizedPermissionsList, 1, LEN(@unautorizedPermissionsList)-1);
																		SET @currentRoleText = ''''+@unauthorizedUserName+''' ('+@unautorizedPermissionsList+') ';
																	END;
																SELECT @intval = @intval + 1;
																IF(LEN(@metricval) + LEN(@currentRoleText) + LEN(@strval2) > 1400)
																	BEGIN
																		IF @intval2 = 0
																			SELECT @metricval = @metricval+N', more...',
																				   @intval2 = 1;
																	END;
																ELSE
																SELECT @metricval = @metricval+CASE
																								   WHEN LEN(@metricval) > 0
																								   THEN N', '
																								   ELSE N''
																							   END+N''+@currentRoleText+N'';
																IF(@isadmin = 1)
																	INSERT INTO policyassessmentdetail
																	(policyid,
																	 assessmentid,
																	 metricid,
																	 snapshotid,
																	 detailfinding,
																	 databaseid,
																	 objecttype,
																	 objectid,
																	 objectname
																	)
																	VALUES
																	(@policyid,
																	 @assessmentid,
																	 @metricid,
																	 @snapshotid,
																	 N'Unauthorized member found: '+@currentRoleText+N'',
																	 NULL, -- database ID,
																	 N'iLOGN', -- object type
																	 NULL,
																	 @strval
																	);
																FETCH NEXT FROM sysadmincursor INTO @unauthorizedUserName;
															END;
														CLOSE sysadmincursor;
														DEALLOCATE sysadmincursor;
														IF(LEN(@metricval) = 0)
															SELECT @sevcode = @sevcodeok,
																   @metricval = N'No logins found.';
														ELSE
														SELECT @sevcode = @severity,
															   @metricval = N'Unauthorized member found: '+@metricval;
													END;
												ELSE
												SELECT @sevcode = @sevcodeok,
													   @metricval = N'No list of unapproved logins was provided.';
												SELECT @metricthreshold = N'Server is vulnerable if not authorized logins are sysadmins or they have extended permissions. Authorized logins are: '+@severityvalues;
											END;
                                                -- sa Account disabled  (this is a subset of metric 16)
                                                ELSE
                                                IF (@metricid = 72)
                                                BEGIN
                                                        -- only apply this check if the version is 2005 or greater
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                        BEGIN
                                                                -- check to make sure the sa account is either disabled or renamed
                                                                SELECT
                                                                        @severityvalues = N'N';
                                                                SELECT
                                                                        @metricval = [name],
                                                                        @strval = [disabled]
                                                                FROM serverprincipal
                                                                WHERE snapshotid = @snapshotid
                                                                AND sid = 0x01;

                                                                IF (LOWER(@metricval) = N'sa'
                                                                        AND @strval = @severityvalues
                                                                        )
                                                                        SELECT
                                                                                @sevcode = @severity;
                                                                ELSE
                                                                IF (LOWER(@metricval) <> N'sa'
                                                                        AND @strval = @severityvalues
                                                                        )
                                                                        SELECT
                                                                                @sevcode = 2;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;

                                                                SELECT
                                                                        @metricval = N'The sa account is enabled.';
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The sa account is always enabled on SQL Server 2000.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the sa account is enabled.';
                                                END;
                                                -- 'ALTER TRACE permissions
                                                ELSE
                                                IF (@metricid = 73)
                                                BEGIN
                                                        -- only apply this check if the version is 2005 or greater
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                        BEGIN
                                                                IF (LEN(@severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @sql = N'declare altertracecursor cursor for
														select b.name 
															from serverpermission a, serverprincipal b
															where a.snapshotid='
                                                                                + CONVERT(nvarchar, @snapshotid)
                                                                                + N' 
																and a.classid=100 
																and a.permission = ''ALTER TRACE''
																and a.snapshotid = b.snapshotid
																and a.grantee = b.principalid
																and a.grantee not in (select id from #sysadminstbl)
																and lower(b.name) not in ('
                                                                                + LOWER(@severityvalues)
                                                                                + N')';
                                                                        IF (CHARINDEX('%',
                                                                                @severityvalues) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @strval = LOWER(@severityvalues),
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                                WHILE (@intval > 0)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @intval2 = CHARINDEX('%',
                                                                                                @strval);
                                                                                        IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                                SELECT
                                                                                                        @sql = @sql
                                                                                                        + ' and lower(b.name) not like '
                                                                                                        + SUBSTRING(@strval,
                                                                                                        1, @intval);
                                                                                        SELECT
                                                                                                @strval = SUBSTRING(@strval,
                                                                                                @intval + 2,
                                                                                                LEN(@strval)
                                                                                                - (@intval + 1));
                                                                                        SELECT
                                                                                                @intval = CHARINDEX(''',''',
                                                                                                @strval);
                                                                                END;
                                                                                IF (LEN(@strval) > 0)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @intval2 = CHARINDEX('%',
                                                                                                @strval);
                                                                                        IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                                SELECT
                                                                                                        @sql = @sql
                                                                                                        + ' and lower(b.name) not like '
                                                                                                        + @strval;
                                                                                END;
                                                                        END;
                                                                        SELECT
                                                                                @sql = @sql
                                                                                + N' order by a.permission';

                                                                        EXEC (@sql);
                                                                        OPEN altertracecursor;
                                                                        FETCH NEXT FROM
                                                                        altertracecursor INTO @strval;

                                                                        SELECT
                                                                                @intval2 = 0;
                                                                        WHILE @@fetch_status = 0
                                                                        BEGIN
                                                                                IF (@intval2 = 1
                                                                                        OR LEN(@metricval)
                                                                                        + LEN(@strval) > 1400
                                                                                        )
                                                                                BEGIN
                                                                                        IF @intval2 = 0
                                                                                                SELECT
                                                                                                        @metricval = @metricval
                                                                                                        + N', more...',
                                                                                                        @intval2 = 1;
                                                                                END;
                                                                                ELSE
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + CASE
                                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                        ELSE N''
                                                                                                END + N''''
                                                                                                + @strval
                                                                                                + N'''';

                                                                                IF (@isadmin = 1)
                                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                                        assessmentid,
                                                                                        metricid,
                                                                                        snapshotid,
                                                                                        detailfinding,
                                                                                        databaseid,
                                                                                        objecttype,
                                                                                        objectid,
                                                                                        objectname)
                                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'ALTER TRACE permission granted to ''' + @strval + N'''', NULL, -- database ID,
                                                                                                N'iSRV', -- object type
                                                                                                NULL, @strval);

                                                                                FETCH NEXT FROM
                                                                                altertracecursor INTO @strval;
                                                                        END;

                                                                        CLOSE altertracecursor;
                                                                        DEALLOCATE altertracecursor;

                                                                        IF (LEN(@metricval) = 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok,
                                                                                        @metricval = 'No ALTER TRACE permissions found.';
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity,
                                                                                        @metricval = N'Unauthorized logins found: '
                                                                                        + @metricval;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No list of approved logins was provided.';
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The ALTER TRACE permission does not exist on SQL Server 2000.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the ALTER TRACE permission has been granted to a login that is not a sysadmin and is not: '
                                                                + @severityvalues;
                                                END;
                                                -- CONTROL SERVER permissions
                                                ELSE
                                                IF (@metricid = 74)
                                                BEGIN
                                                        -- only apply this check if the version is 2005 or greater
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                        BEGIN
                                                                IF (LEN(@severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @sql = N'declare controlcursor cursor for
														select b.name 
															from serverpermission a, serverprincipal b
															where a.snapshotid='
                                                                                + CONVERT(nvarchar, @snapshotid)
                                                                                + N' 
																and a.classid=100 
																and a.permission = ''CONTROL SERVER''
																and a.snapshotid = b.snapshotid
																and a.grantee = b.principalid
																and a.grantee not in (select id from #sysadminstbl)
																and lower(b.name) not in ('
                                                                                + LOWER(@severityvalues)
                                                                                + N')';
                                                                        IF (CHARINDEX('%',
                                                                                @severityvalues) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @strval = LOWER(@severityvalues),
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                                WHILE (@intval > 0)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @intval2 = CHARINDEX('%',
                                                                                                @strval);
                                                                                        IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                                SELECT
                                                                                                        @sql = @sql
                                                                                                        + ' and lower(b.name) not like '
                                                                                                        + SUBSTRING(@strval,
                                                                                                        1, @intval);
                                                                                        SELECT
                                                                                                @strval = SUBSTRING(@strval,
                                                                                                @intval + 2,
                                                                                                LEN(@strval)
                                                                                                - (@intval + 1));
                                                                                        SELECT
                                                                                                @intval = CHARINDEX(''',''',
                                                                                                @strval);
                                                                                END;
                                                                                IF (LEN(@strval) > 0)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @intval2 = CHARINDEX('%',
                                                                                                @strval);
                                                                                        IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                                SELECT
                                                                                                        @sql = @sql
                                                                                                        + ' and lower(b.name) not like '
                                                                                                        + @strval;
                                                                                END;
                                                                        END;
                                                                        SELECT
                                                                                @sql = @sql
                                                                                + N' order by a.permission';

                                                                        EXEC (@sql);
                                                                        OPEN controlcursor;
                                                                        FETCH NEXT FROM
                                                                        controlcursor INTO @strval;

                                                                        SELECT
                                                                                @intval2 = 0;
                                                                        WHILE @@fetch_status = 0
                                                                        BEGIN
                                                                                IF (@intval2 = 1
                                                                                        OR LEN(@metricval)
                                                                                        + LEN(@strval) > 1400
                                                                                        )
                                                                                BEGIN
                                                                                        IF @intval2 = 0
                                                                                                SELECT
                                                                                                        @metricval = @metricval
                                                                                                        + N', more...',
                                                                                                        @intval2 = 1;
                                                                                END;
                                                                                ELSE
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + CASE
                                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                        ELSE N''
                                                                                                END + N''''
                                                                                                + @strval
                                                                                                + N'''';

                                                                                IF (@isadmin = 1)
                                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                                        assessmentid,
                                                                                        metricid,
                                                                                        snapshotid,
                                                                                        detailfinding,
                                                                                        databaseid,
                                                                                        objecttype,
                                                                                        objectid,
                                                                                        objectname)
                                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'CONTROL SERVER permission granted to ''' + @strval + N'''', NULL, -- database ID,
                                                                                                N'iSRV', -- object type
                                                                                                NULL, @strval);

                                                                                FETCH NEXT FROM
                                                                                controlcursor INTO @strval;
                                                                        END;

                                                                        CLOSE controlcursor;
                                                                        DEALLOCATE controlcursor;

                                                                        IF (LEN(@metricval) = 0)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok,
                                                                                        @metricval = 'No CONTROL SERVER permissions found.';
                                                                        ELSE
                                                                                SELECT
                                                                                        @sevcode = @severity,
                                                                                        @metricval = N'Unauthorized logins found: '
                                                                                        + @metricval;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No list of approved logins was provided.';
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The CONTROL SERVER permission does not exist on SQL Server 2000.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the CONTROL SERVER permission has been granted to a login that is not a sysadmin and is not: '
                                                                + @severityvalues;
                                                END;
                                                -- xp_cmdshell Enabled
                                                ELSE
                                                IF (@metricid = 75)
                                                BEGIN
                                                        -- only apply this check if the version is 2005 or greater
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                        BEGIN
                                                                SELECT
                                                                        @strval = @xp_cmdshell,
                                                                        @severityvalues = N'N';
                                                                IF (@strval = @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;

                                                                SELECT
                                                                        @metricval = dbo.getyesnotext(@strval);
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The ability to disable xp_cmdshell does not exist on SQL Server 2000.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the xp_cmdshell extended stored procedure is enabled.';
                                                END;

                                                -- Required Admin Accounts
                                                ELSE
                                                IF (@metricid = 76)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                -- convert the severityvalues into a table for reverse selection
                                                                SELECT
                                                                        @intval = 1;
                                                                SELECT
                                                                        @intval2 = CHARINDEX(''',''',
                                                                        @severityvalues);
                                                                WHILE @intval2 > 0
                                                                BEGIN
                                                                        INSERT INTO @tblval
                                                                                VALUES (SUBSTRING(@severityvalues, @intval + 1, @intval2 - @intval - 1));
                                                                        SELECT
                                                                                @intval = @intval2
                                                                                + 2,
                                                                                @intval2 = CHARINDEX(''',''',
                                                                                @severityvalues,
                                                                                @intval + 1);
                                                                END;
                                                                INSERT INTO @tblval
                                                                        VALUES (SUBSTRING(@severityvalues, @intval + 1, LEN(@severityvalues) - @intval - 1));

                                                                DECLARE reqadmincursor CURSOR FOR
                                                                SELECT
                                                                        val
                                                                FROM @tblval
                                                                WHERE LOWER(val) NOT IN (SELECT
                                                                        LOWER(name)
                                                                FROM #sysadminstbl)
                                                                ORDER BY val;

                                                                OPEN reqadmincursor;
                                                                FETCH NEXT FROM
                                                                reqadmincursor INTO @strval;

                                                                SELECT
                                                                        @intval2 = 0;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@intval2 = 1
                                                                                OR LEN(@metricval)
                                                                                + LEN(@strval) > 1400
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Required administrative login not found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                        N'iSRV', -- object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        reqadmincursor INTO @strval;
                                                                END;

                                                                CLOSE reqadmincursor;
                                                                DEALLOCATE reqadmincursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = 'All required administrative logins were found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'These administrative logins are missing or are not sysadmin members:  '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No required administrative login account was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is not standardized if the sysadmin server role does not include these accounts: '
                                                                + @severityvalues;
                                                END;

                                                -- Password Policy Enabled for sa
                                                ELSE
                                                IF (@metricid = 77)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'N';
                                                        SELECT
                                                                @strval = ispolicychecked
                                                        FROM serverprincipal
                                                        WHERE snapshotid = @snapshotid
                                                        AND sid = 0x01;

                                                        IF (@strval <> @severityvalues)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'The password policy is enforced on the sa account.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Password policy not enforced on the sa account.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if password policy is not enforced on the sa account.';
                                                END;

                                                -- Database files missing required administrative permissions
                                                ELSE
                                                IF (@metricid = 78)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @intval = 1;
                                                                SELECT
                                                                        @intval2 = CHARINDEX(''',''',
                                                                        @severityvalues);
                                                                WHILE @intval2 > 0
                                                                BEGIN
                                                                        INSERT INTO @tblval
                                                                                VALUES (SUBSTRING(@severityvalues, @intval + 1, @intval2 - @intval - 1));
                                                                        SELECT
                                                                                @intval = @intval2
                                                                                + 2,
                                                                                @intval2 = CHARINDEX(''',''',
                                                                                @severityvalues,
                                                                                @intval + 1);
                                                                END;
                                                                INSERT INTO @tblval
                                                                        VALUES (SUBSTRING(@severityvalues, @intval + 1, LEN(@severityvalues) - @intval - 1));

                                                                DECLARE filecursor CURSOR STATIC FOR
                                                                SELECT
                                                                        o.objectname,
                                                                        a.val
                                                                FROM (vwfilesystemobject o
                                                                CROSS JOIN @tblval a
                                                                )
                                                                WHERE o.snapshotid = @snapshotid
                                                                AND o.objecttype = N'DB'
                                                                AND NOT EXISTS (SELECT
                                                                        1
                                                                FROM vwfilesystemobjectpermission p
                                                                WHERE p.snapshotid = @snapshotid
                                                                AND p.osobjectid = o.osobjectid
                                                                AND LOWER(p.grantee) LIKE LOWER(a.val)
                                                                AND p.filesystemrights = 2032127)	-- make sure they have full control
                                                                ORDER BY o.objectname,
                                                                a.val;

                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        SELECT
                                                                                @intval = @intval
                                                                                + 1;
                                                                        IF (LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400)
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval2
                                                                                        + N''' on '''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Database file missing required permission found: ''' + @strval + N''' is missing Full Control for ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'FI', -- no file object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = 'All database files have the required administrative account permissions.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Administrative accounts are missing Full Control permission on database files: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of required administrative accounts was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is not standardized if database files do not include Full Control permission for '
                                                                + @severityvalues;
                                                END;

                                                -- Executable files missing required administrative permissions
                                                ELSE
                                                IF (@metricid = 79)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @intval = 1;
                                                                SELECT
                                                                        @intval2 = CHARINDEX(''',''',
                                                                        @severityvalues);
                                                                WHILE @intval2 > 0
                                                                BEGIN
                                                                        INSERT INTO @tblval
                                                                                VALUES (SUBSTRING(@severityvalues, @intval + 1, @intval2 - @intval - 1));
                                                                        SELECT
                                                                                @intval = @intval2
                                                                                + 2,
                                                                                @intval2 = CHARINDEX(''',''',
                                                                                @severityvalues,
                                                                                @intval + 1);
                                                                END;
                                                                INSERT INTO @tblval
                                                                        VALUES (SUBSTRING(@severityvalues, @intval + 1, LEN(@severityvalues) - @intval - 1));

                                                                DECLARE filecursor CURSOR STATIC FOR
                                                                SELECT
                                                                        o.objectname,
                                                                        a.val
                                                                FROM (vwfilesystemobject o
                                                                CROSS JOIN @tblval a
                                                                )
                                                                WHERE o.snapshotid = @snapshotid
                                                                AND o.objecttype = N'File'
                                                                AND (o.objectname LIKE '%.exe'
                                                                OR o.objectname LIKE '%.dll'
                                                                )
                                                                AND NOT EXISTS (SELECT
                                                                        1
                                                                FROM vwfilesystemobjectpermission p
                                                                WHERE p.snapshotid = @snapshotid
                                                                AND p.osobjectid = o.osobjectid
                                                                AND LOWER(p.grantee) LIKE LOWER(a.val)
                                                                AND p.filesystemrights = 2032127)	-- make sure they have full control
                                                                ORDER BY o.objectname,
                                                                a.val;

                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        SELECT
                                                                                @intval = @intval
                                                                                + 1;
                                                                        IF (LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400)
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval2
                                                                                        + N''' on '''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Executable file missing required permission found: ''' + @strval + N''' is missing Full Control for ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'FI', -- no file object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = 'All executable files have the required administrative account permissions.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Administrative accounts are missing Full Control permission on executable files: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of required administrative accounts was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is not standardized if executable files do not include Full Control permissions for '
                                                                + @severityvalues;
                                                END;

                                                -- Registry Keys missing required administrative permissions
                                                ELSE
                                                IF (@metricid = 80)
                                                BEGIN
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @intval = 1;
                                                                SELECT
                                                                        @intval2 = CHARINDEX(''',''',
                                                                        @severityvalues);
                                                                WHILE @intval2 > 0
                                                                BEGIN
                                                                        INSERT INTO @tblval
                                                                                VALUES (SUBSTRING(@severityvalues, @intval + 1, @intval2 - @intval - 1));
                                                                        SELECT
                                                                                @intval = @intval2
                                                                                + 2,
                                                                                @intval2 = CHARINDEX(''',''',
                                                                                @severityvalues,
                                                                                @intval + 1);
                                                                END;
                                                                INSERT INTO @tblval
                                                                        VALUES (SUBSTRING(@severityvalues, @intval + 1, LEN(@severityvalues) - @intval - 1));

                                                                DECLARE filecursor CURSOR STATIC FOR
                                                                SELECT
                                                                        o.objectname,
                                                                        a.val
                                                                FROM (vwregistrykey o
                                                                CROSS JOIN @tblval a
                                                                )
                                                                WHERE o.snapshotid = @snapshotid
                                                                AND NOT EXISTS (SELECT
                                                                        1
                                                                FROM vwregistrykeypermission p
                                                                WHERE p.snapshotid = @snapshotid
                                                                AND p.osobjectid = o.osobjectid
                                                                AND LOWER(p.grantee) LIKE LOWER(a.val)
                                                                AND p.filesystemrights = 983103)	-- make sure they have registry rights full control
                                                                ORDER BY o.objectname,
                                                                a.val;

                                                                OPEN filecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval,
                                                                @strval2;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        SELECT
                                                                                @intval = @intval
                                                                                + 1;
                                                                        IF (LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400)
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval2
                                                                                        + N''' on '''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Registry key missing required administrative permission found: ''' + @strval + N''' is missing Full Control for ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'Reg', -- no registry object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        filecursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE filecursor;
                                                                DEALLOCATE filecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = 'All registry keys have the required administrative account permissions.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Administrative accounts are missing Full Control permission on registry keys: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'No list of required administrative accounts was provided.';

                                                        SELECT
                                                                @metricthreshold = N'Server is not standardized if registry keys do not include Full Control permission for '
                                                                + @severityvalues;
                                                END;

                                                -- Data Files on System Drive
                                                ELSE
                                                IF (@metricid = 81)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare filecursor cursor static for
												select objectname
														from vwfilesystemobject
															where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
																and objecttype= N''DB''
																and lower(left(objectname,2)) = '''
                                                                + LOWER(@systemdrive)
                                                                + N'''';
                                                        -- This one is ok to process with no values although there isn't really a way to configure it like that
                                                        -- It will just produce findings on any data file
                                                        IF (LEN(@severityvalues) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N'				and lower(objectname) not in ('
                                                                        + LOWER(@severityvalues)
                                                                        + N')';
                                                                IF (CHARINDEX('%',
                                                                        @severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @strval = LOWER(@severityvalues),
                                                                                @intval = CHARINDEX(''',''',
                                                                                @strval);
                                                                        WHILE (@intval > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + N' and lower(objectname) not like '
                                                                                                + SUBSTRING(@strval,
                                                                                                1, @intval);
                                                                                SELECT
                                                                                        @strval = SUBSTRING(@strval,
                                                                                        @intval + 2,
                                                                                        LEN(@strval)
                                                                                        - (@intval + 1));
                                                                                SELECT
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                        END;
                                                                        IF (LEN(@strval) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @intval2 = CHARINDEX('%',
                                                                                        @strval);
                                                                                IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                        SELECT
                                                                                                @sql = @sql
                                                                                                + N' and lower(objectname) not like '
                                                                                                + @strval;
                                                                        END;
                                                                END;
                                                        END;

                                                        SELECT
                                                                @sql = @sql
                                                                + N' order by objectname';

                                                        EXEC (@sql);

                                                        OPEN filecursor;

                                                        SELECT
                                                                @intval = 0,
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        filecursor INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                SELECT
                                                                        @intval = @intval
                                                                        + 1;
                                                                IF (LEN(@metricval)
                                                                        + LEN(@strval)
                                                                        + LEN(@strval2) > 1400)
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Data file found on system drive: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'FI', -- no file object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                filecursor INTO @strval;
                                                        END;

                                                        CLOSE filecursor;
                                                        DEALLOCATE filecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'There are no data files on the system drive.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Data files found on the system drive: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if any data files are located on the '
                                                                + @systemdrive
                                                                + N' system drive and are not in '
                                                                + @severityvalues;
                                                END;

                                                -- SQL Server Installation on System Drive
                                                ELSE
                                                IF (@metricid = 82)
                                                BEGIN
                                                        IF (LEN(RTRIM(@systemdrive)) > 0)
                                                        BEGIN
                                                                SELECT
                                                                        @sql = N'declare sysfilecursor cursor static for
													select objectname
														from vwfilesystemobject
															where snapshotid = '
                                                                        + CONVERT(nvarchar, @snapshotid)
                                                                        + N'
																and objecttype= N''IDir''
																and lower(left(objectname,2)) = '''
                                                                        + LOWER(@systemdrive)
                                                                        + N'''';
                                                                -- This one is ok to process with no values although there isn't really a way to configure it like that
                                                                -- It will just produce findings on any data file
                                                                IF (LEN(@severityvalues) > 0)
                                                                BEGIN
                                                                        SELECT
                                                                                @sql = @sql
                                                                                + N'				and lower(objectname) not in ('
                                                                                + LOWER(@severityvalues)
                                                                                + N')';
                                                                        IF (CHARINDEX('%',
                                                                                @severityvalues) > 0)
                                                                        BEGIN
                                                                                SELECT
                                                                                        @strval = LOWER(@severityvalues),
                                                                                        @intval = CHARINDEX(''',''',
                                                                                        @strval);
                                                                                WHILE (@intval > 0)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @intval2 = CHARINDEX('%',
                                                                                                @strval);
                                                                                        IF (@intval2 < @intval)		-- this item contains a wildcard
                                                                                                SELECT
                                                                                                        @sql = @sql
                                                                                                        + N' and lower(objectname) not like '
                                                                                                        + SUBSTRING(@strval,
                                                                                                        1, @intval);
                                                                                        SELECT
                                                                                                @strval = SUBSTRING(@strval,
                                                                                                @intval + 2,
                                                                                                LEN(@strval)
                                                                                                - (@intval + 1));
                                                                                        SELECT
                                                                                                @intval = CHARINDEX(''',''',
                                                                                                @strval);
                                                                                END;
                                                                                IF (LEN(@strval) > 0)
                                                                                BEGIN
                                                                                        SELECT
                                                                                                @intval2 = CHARINDEX('%',
                                                                                                @strval);
                                                                                        IF (@intval2 > 0)		-- this item contains a wildcard
                                                                                                SELECT
                                                                                                        @sql = @sql
                                                                                                        + N' and lower(objectname) not like '
                                                                                                        + @strval;
                                                                                END;
                                                                        END;
                                                                END;

                                                                SELECT
                                                                        @sql = @sql
                                                                        + N' order by objectname';

                                                                EXEC (@sql);

                                                                OPEN sysfilecursor;

                                                                SELECT
                                                                        @intval = 0,
                                                                        @intval2 = 0;
                                                                FETCH NEXT FROM
                                                                sysfilecursor INTO @strval;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        SELECT
                                                                                @intval = @intval
                                                                                + 1;
                                                                        IF (LEN(@metricval)
                                                                                + LEN(@strval)
                                                                                + LEN(@strval2) > 1400)
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''''
                                                                                        + @strval
                                                                                        + N'''';

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Installation directory found on system drive: ''' + @strval + N'''', NULL, -- database ID,
                                                                                        N'IDir', -- no file object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        sysfilecursor INTO @strval;
                                                                END;

                                                                CLOSE sysfilecursor;
                                                                DEALLOCATE sysfilecursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No unapproved SQL Server installation directories found on the system drive.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Unapproved SQL Server installation directories found on the system drive: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The system drive is not known. No check is performed.';

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the '
                                                                + CASE
                                                                        WHEN LEN(RTRIM(@systemdrive)) = 0 THEN N''
                                                                        ELSE @systemdrive
                                                                                + N' '
                                                                END
                                                                + N' system drive hosts SQL Server installation directories other than: '
                                                                + @severityvalues;
                                                END;

                                                -- Ad Hoc Distributed Queries Enabled
                                                ELSE
                                                IF (@metricid = 83)
                                                BEGIN
                                                        -- only apply this check if the version is 2005 or greater
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                        BEGIN
                                                                SELECT
                                                                        @strval = @adhocqueries,
                                                                        @severityvalues = N'Y';
                                                                IF (@strval <> @severityvalues)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'Ad Hoc Distributed Queries are not enabled.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Ad Hoc Distributed Queries are enabled.';
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The ability to disable Ad Hoc Distributed Queries does not exist on SQL Server 2000.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if Ad Hoc Distributed Queries are enabled.';
                                                END;

                                                -- Unauthorized SQL Logins exist
                                                ELSE
                                                IF (@metricid = 84)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare logincursor cursor for
												select name
													from vwserverprincipal
													where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
														and type = N''S''';
                                                        -- This is ok to process with no values even though there is no way to configure it that way
                                                        -- It will just produce findings on anything although I guess there will always be an sa account and a finding.
                                                        IF (LEN(@severityvalues) > 0)
                                                                SELECT
                                                                        @sql = @sql
                                                                        + N'		and name not in ('
                                                                        + @severityvalues
                                                                        + N')';

                                                        SELECT
                                                                @sql = @sql
                                                                + N' order by name';

                                                        EXEC (@sql);

                                                        OPEN logincursor;
                                                        FETCH NEXT FROM
                                                        logincursor INTO @strval;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Unauthorized SQL Login found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'iLOGN', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                logincursor INTO @strval;
                                                        END;

                                                        CLOSE logincursor;
                                                        DEALLOCATE logincursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'No unauthorized SQL Logins exist.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Unauthorized SQL Logins exist: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Logins exist that are not '
                                                                + @severityvalues;
                                                END;

                                                -- Public Server Role Has Permissions
                                                ELSE
                                                IF (@metricid = 85)
                                                BEGIN
                                                        -- only apply this check if the version is 2005 or greater
                                                        IF (@version > N'9.'
                                                                OR @version < N'6.'
                                                                )
                                                        BEGIN
                                                                DECLARE permissioncursor CURSOR FOR
                                                                SELECT
                                                                        a.permission,
                                                                        -- note this matches the functionality of isp_sqlsecure_getserverprincipalpermission for returning the object name
                                                                        CASE
                                                                                WHEN classid = 101 THEN dbo.getclasstype(a.classid)
                                                                                        + N' '''
                                                                                        + (SELECT
                                                                                                name
                                                                                        FROM serverprincipal
                                                                                        WHERE snapshotid = @snapshotid
                                                                                        AND principalid = a.majorid)
                                                                                        + N''''
                                                                                WHEN classid = 105 THEN dbo.getclasstype(a.classid)
                                                                                        + N' '''
                                                                                        + (SELECT
                                                                                                name
                                                                                        FROM endpoint
                                                                                        WHERE snapshotid = @snapshotid
                                                                                        AND endpointid = a.majorid)
                                                                                        + N''''
                                                                                ELSE 'Server'
                                                                        END
                                                                FROM serverpermission a,
                                                                     serverprincipal b
                                                                WHERE a.snapshotid = @snapshotid
                                                                AND a.snapshotid = b.snapshotid
                                                                AND a.grantee = b.principalid
                                                                AND a.grantee = 2		--	principalid of public server role is 2
                                                                ORDER BY a.permission;

                                                                EXEC (@sql);
                                                                OPEN permissioncursor;
                                                                FETCH NEXT FROM
                                                                permissioncursor INTO @strval,
                                                                @strval2;

                                                                SELECT
                                                                        @intval2 = 0;
                                                                WHILE @@fetch_status = 0
                                                                BEGIN
                                                                        IF (@intval2 = 1
                                                                                OR LEN(@metricval)
                                                                                + LEN(@strval) > 1400
                                                                                )
                                                                        BEGIN
                                                                                IF @intval2 = 0
                                                                                        SELECT
                                                                                                @metricval = @metricval
                                                                                                + N', more...',
                                                                                                @intval2 = 1;
                                                                        END;
                                                                        ELSE
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + CASE
                                                                                                WHEN LEN(@metricval) > 0 THEN N', '
                                                                                                ELSE N''
                                                                                        END + N''
                                                                                        + @strval
                                                                                        + N' on '
                                                                                        + @strval2;

                                                                        IF (@isadmin = 1)
                                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname)
                                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Public Permission found: ''' + @strval + N''' on ''' + @strval2 + N'''', NULL, -- database ID,
                                                                                        N'iSRV', -- object type
                                                                                        NULL, @strval);

                                                                        FETCH NEXT FROM
                                                                        permissioncursor INTO @strval,
                                                                        @strval2;
                                                                END;

                                                                CLOSE permissioncursor;
                                                                DEALLOCATE permissioncursor;

                                                                IF (LEN(@metricval) = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = 'No permissions found.';
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Public has permissions: '
                                                                                + @metricval;
                                                        END;
                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'The public server role does not exist on SQL Server 2000.';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the public server role has been granted permissions.';
                                                END;

                                                -- Databases Are Trustworthy
                                                ELSE
                                                IF (@metricid = 86)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare dbcursor cursor static for
												select databasename
													from sqldatabase
													where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
														and trustworthy = ''Y''
														and databasename not in ('
                                                                + @severityvalues
                                                                + N')
													order by databasename';
                                                        EXEC (@sql);
                                                        OPEN dbcursor;
                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        dbcursor INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Database with Trustworthy bit enabled: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, -- object id
                                                                                @strval);

                                                                FETCH NEXT FROM
                                                                dbcursor INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Trustworthy databases: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if any SQL Server 2005 or later databases are trustworthy other than: '
                                                                + @severityvalues;

                                                        CLOSE dbcursor;
                                                        DEALLOCATE dbcursor;
                                                END;

                                                -- Sysadmins Own Databases
                                                ELSE
                                                IF (@metricid = 87)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare dbcursor cursor static for
												select databasename
													from sqldatabase
													where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
														and owner in (select name from #sysadminstbl)
														and databasename not in ('
                                                                + @severityvalues
                                                                + N')
													order by databasename';
                                                        EXEC (@sql);
                                                        OPEN dbcursor;
                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        dbcursor INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Database owned by sysadmin: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, -- object id
                                                                                @strval);

                                                                FETCH NEXT FROM
                                                                dbcursor INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Databases owned by system administrators: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if a login who is a member of sysadmin or has the CONTROL SERVER permission owns any databases other than: '
                                                                + @severityvalues;

                                                        CLOSE dbcursor;
                                                        DEALLOCATE dbcursor;
                                                END;

                                                -- Sysadmins Own Trustworthy Databases
                                                ELSE
                                                IF (@metricid = 88)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare dbcursor cursor static for
												select databasename
													from sqldatabase
													where snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N'
														and trustworthy = ''Y''
														and owner in (select name from #sysadminstbl)
														and databasename not in ('
                                                                + @severityvalues
                                                                + N')
													order by databasename';
                                                        EXEC (@sql);
                                                        OPEN dbcursor;
                                                        SELECT
                                                                @intval2 = 0;
                                                        FETCH NEXT FROM
                                                        dbcursor INTO @strval;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Trustworthy Database owned by sysadmin: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, -- object id
                                                                                @strval);

                                                                FETCH NEXT FROM
                                                                dbcursor INTO @strval;
                                                        END;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Databases owned by system administrators: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if a login who is a member of sysadmin or has the CONTROL SERVER permission owns any trustworthy databases other than: '
                                                                + @severityvalues;

                                                        CLOSE dbcursor;
                                                        DEALLOCATE dbcursor;
                                                END;

                                                -- Public Roles Have Permissions on User Databases
                                                ELSE
                                                IF (@metricid = 89)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        DECLARE databasecursor CURSOR FOR
                                                        SELECT DISTINCT
                                                                b.databasename
                                                        FROM vwdatabaseobjectpermission a
                                                        INNER JOIN sqldatabase b
                                                                ON ((a.dbid = b.dbid)
                                                                AND (a.snapshotid = b.snapshotid)
                                                                )
                                                                INNER JOIN databaseschema c
                                                                        ON ((a.schemaid = c.schemaid)
                                                                        AND (a.dbid = c.dbid)
                                                                        AND (a.snapshotid = c.snapshotid)
                                                                        )
                                                        WHERE a.snapshotid = @snapshotid
                                                        AND a.grantee = 0			--public uid is 0
                                                        AND (a.isgrant = N'Y'
                                                        OR a.isgrantwith = N'Y'
                                                        )
                                                        AND (b.databasename NOT IN (
                                                        N'master',
                                                        N'msdb',
                                                        N'distribution',
                                                        N'tempdb'))
                                                        AND (c.schemaname <> N'sys');
                                                        OPEN databasecursor;
                                                        FETCH NEXT FROM
                                                        databasecursor INTO @strval;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Public has permissions on ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                databasecursor INTO @strval;
                                                        END;

                                                        CLOSE databasecursor;
                                                        DEALLOCATE databasecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'No user databases found with public permissions.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Public has permissions on '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if the public role has been granted permissions on user databases.';
                                                END;

                                                -- Dangerous Security Principals
                                                ELSE
                                                IF (@metricid = 90)
                                                BEGIN
                                                        DECLARE @memberid int;
                                                        SELECT
                                                                @sql = N'declare databasecursor cursor for
								select dpmember.uid, dpmember.name, dpgroup.name
								from databaserolemember drm
								inner join databaseprincipal dpgroup 
									on ((dpgroup.snapshotid = drm.snapshotid) and (dpgroup.uid = drm.groupuid) and (dpgroup.dbid = drm.dbid))
								inner join databaseprincipal dpmember 
									on ((dpmember.snapshotid = drm.snapshotid) and (dpmember.uid = drm.rolememberuid) and (dpmember.dbid = drm.dbid))
								where 
								(
									drm.snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N' 
									and drm.dbid = 4				-- 4 = msdb
									and dpgroup.name in (''db_ssisadmin'', ''db_ssisltduser'', ''db_ssisoperator'', ''db_dtsadmin'', ''db_dtsltduser'', ''db_dtsoperator'')
									and dpmember.name in (' + @severityvalues
                                                                + N')
								) 
								order by dpgroup.name';
                                                        EXEC (@sql);
                                                        OPEN databasecursor;
                                                        FETCH NEXT FROM
                                                        databasecursor INTO @memberid,
                                                        @strval2,
                                                        @strval3;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                SELECT
                                                                        @strval = @strval2
                                                                        + ' in '
                                                                        + @strval3;
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Dangerous security principals found in SSIS database roles: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'iDUSR', -- object type
                                                                                @memberid, @strval);

                                                                FETCH NEXT FROM
                                                                databasecursor INTO @memberid,
                                                                @strval2,
                                                                @strval3;
                                                        END;

                                                        CLOSE databasecursor;
                                                        DEALLOCATE databasecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'No dangerous members found in SSIS security roles.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Dangerous security principals found in SSIS database roles: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if dangerous security principals have been added to SSIS database roles.';
                                                END;

                                                -- Integration Services Roles Permissions Not Acceptable
                                                ELSE
                                                IF (@metricid = 91)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare databasecursor cursor for
											select vdop.objectname, dp.name
											from [dbo].[vwdatabaseobjectpermission] vdop
											inner join databaseprincipal dp 
												on ((vdop.snapshotid = dp.snapshotid) and (vdop.dbid = dp.dbid) and (vdop.grantee = dp.uid))
											where 
											(
												(vdop.snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N') 
												and ((vdop.isgrant = N''Y'') or (vdop.isgrantwith = N''Y''))
												and (vdop.objectname in ('
                                                                + @severityvalues
                                                                + N'))
												and dp.type IN (''R'', ''A'')
												and (dp.name not in (''db_dtsadmin'', ''db_dtsltduser'', ''db_dtsoperator'', ''db_ssisadmin'', ''db_ssisltduser'', ''db_ssisoperator''))
											)';
                                                        EXEC (@sql);
                                                        OPEN databasecursor;
                                                        FETCH NEXT FROM
                                                        databasecursor INTO @strval2,
                                                        @strval3;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                SELECT
                                                                        @strval = @strval3
                                                                        + ' on '
                                                                        + @strval2;
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Permissions on stored procedures found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                databasecursor INTO @strval2,
                                                                @strval3;
                                                        END;

                                                        CLOSE databasecursor;
                                                        DEALLOCATE databasecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'No unacceptable permissions found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Permissions on stored procedures found: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if users other than the default SSIS database roles have been granted permissions on an Integration Services stored procedure.';
                                                END;
                                                --Weak Passwords
                                                ELSE
                                                IF (@metricid = 92)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        DECLARE logincursor CURSOR FOR
                                                        SELECT
                                                                name
                                                        FROM vwserverprincipal
                                                        WHERE snapshotid = @snapshotid
                                                        AND type = N'S'
                                                        AND passwordstatus > 0;

                                                        OPEN logincursor;
                                                        FETCH NEXT FROM
                                                        logincursor INTO @strval;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Login with weak password found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'iLOGN', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                logincursor INTO @strval;
                                                        END;

                                                        CLOSE logincursor;
                                                        DEALLOCATE logincursor;

                                                        IF (LEN(@metricval) = 0)
                                                        BEGIN
                                                                IF (@weakpasswordenabled = 'N')
                                                                BEGIN
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = @metricval
                                                                                + N'   Weak password detection was disabled during data collection.';
                                                                END;
                                                                ELSE
                                                                BEGIN
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'No SQL Logins have weak passwords.';
                                                                END;
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'These SQL Logins have weak passwords: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL Logins are found that have a weak password.';
                                                END;
                                                IF (@metricid = 93)
                                                BEGIN
                                                        TRUNCATE TABLE #tempdetails;

                                                        IF (@isadmin = 1)
                                                        BEGIN
                                                                INSERT INTO #tempdetails
                                                                        SELECT
                                                                                @policyid,
                                                                                @assessmentid,
                                                                                @metricid,
                                                                                @snapshotid,
                                                                                N'Symmetric key '''
                                                                                + db.name
                                                                                + N''' was found in system database ',
                                                                                db.dbid,
                                                                                db.type,
                                                                                db.objectid,
                                                                                db.name
                                                                        FROM dbo.databaseobject db
                                                                        JOIN dbo.sqldatabase sd
                                                                                ON db.snapshotid = sd.snapshotid
                                                                                AND db.dbid = sd.dbid
                                                                        WHERE db.type = 'isk'
                                                                        AND db.snapshotid = @snapshotid
                                                                        AND sd.databasename IN (
                                                                        'msdb', 'master',
                                                                        'model',
                                                                        'tempdb');

                                                                IF NOT EXISTS (SELECT
                                                                                *
                                                                        FROM #tempdetails)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'None found.';
                                                                ELSE
                                                                BEGIN
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + objectname
                                                                                + ', '
                                                                        FROM #tempdetails;

                                                                        SET @metricval = SUBSTRING(@metricval,
                                                                        0,
                                                                        LEN(@metricval));

                                                                        INSERT INTO policyassessmentdetail
                                                                                SELECT
                                                                                        policyid,
                                                                                        assessmentid,
                                                                                        metricid,
                                                                                        snapshotid,
                                                                                        detailfinding,
                                                                                        databaseid,
                                                                                        objecttype,
                                                                                        objectid,
                                                                                        objectname
                                                                                FROM #tempdetails;

                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Next symmetric keys found in system databases : '
                                                                                + @metricval;
                                                                END;
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if system database have symmetric key ';
                                                END;

                                                ELSE
                                                IF (@metricid = 94)
                                                BEGIN

                                                        TRUNCATE TABLE #tempdetails;

                                                        IF (@isadmin = 1)
                                                        BEGIN
                                                                INSERT INTO #tempdetails
                                                                        SELECT
                                                                                @policyid,
                                                                                @assessmentid,
                                                                                @metricid,
                                                                                @snapshotid,
                                                                                N'User defined assembly with unsafe access  '''
                                                                                + db.name
                                                                                + N''' was found in '
                                                                                + sd.databasename,
                                                                                db.dbid,
                                                                                db.type,
                                                                                db.objectid,
                                                                                db.name
                                                                        FROM dbo.databaseobject db
                                                                        JOIN dbo.sqldatabase sd
                                                                                ON db.snapshotid = sd.snapshotid
                                                                                AND db.dbid = sd.dbid
                                                                        WHERE db.type = 'iasm'
                                                                        AND db.snapshotid = @snapshotid
                                                                        AND db.userdefined = 'y'
                                                                        AND permission_set <> 1;

                                                                IF NOT EXISTS (SELECT
                                                                                *
                                                                        FROM #tempdetails)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'None found.';
                                                                ELSE
                                                                BEGIN
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + objectname
                                                                                + ', '
                                                                        FROM #tempdetails;

                                                                        SET @metricval = SUBSTRING(@metricval,
                                                                        0,
                                                                        LEN(@metricval));

                                                                        INSERT INTO policyassessmentdetail
                                                                                SELECT
                                                                                        policyid,
                                                                                        assessmentid,
                                                                                        metricid,
                                                                                        snapshotid,
                                                                                        detailfinding,
                                                                                        databaseid,
                                                                                        objecttype,
                                                                                        objectid,
                                                                                        objectname
                                                                                FROM #tempdetails;

                                                                        SELECT
                                                                                @sevcode = @severity,
                                                                                @metricval = N'Next user defined assemblies with host policy other then safe was found : '
                                                                                + @metricval;
                                                                END;
                                                        END;


                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if there are user defined assemblies with host policy other than SAFE ';
                                                END;

                                                ELSE
                                                IF (@metricid = 95)
                                                BEGIN

                                                        TRUNCATE TABLE #tempdetails;

                                                        IF (@isadmin = 1)
                                                        BEGIN

                                                                DECLARE @currServerAuthMode nvarchar(1);

                                                                SELECT
                                                                        @currServerAuthMode = authenticationmode
                                                                FROM dbo.registeredserver
                                                                WHERE registeredserverid = @registeredserverid;

                                                                INSERT INTO #tempdetails
                                                                        SELECT
                                                                                @policyid,
                                                                                @assessmentid,
                                                                                @metricid,
                                                                                @snapshotid,
                                                                                N'Next contained databases was found  '''
                                                                                + db.name,
                                                                                db.dbid,
                                                                                db.type,
                                                                                db.objectid,
                                                                                db.name
                                                                        FROM dbo.databaseobject db
                                                                        JOIN dbo.sqldatabase sd
                                                                                ON db.snapshotid = sd.snapshotid
                                                                                AND db.dbid = sd.dbid
                                                                        WHERE @currServerAuthMode = 'M'
                                                                        AND db.type = 'DB'
                                                                        AND db.snapshotid = @snapshotid
                                                                        AND ISNULL(sd.IsContained,
                                                                        0) = 1;

                                                                IF NOT EXISTS (SELECT
                                                                                *
                                                                        FROM #tempdetails)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'None found.';
                                                                ELSE
                                                                BEGIN
                                                                        SET @metricval = 'Sql server authentication mode set to Mixed but contained databases exist on instance';

                                                                        INSERT INTO policyassessmentdetail
                                                                                SELECT
                                                                                        policyid,
                                                                                        assessmentid,
                                                                                        metricid,
                                                                                        snapshotid,
                                                                                        detailfinding,
                                                                                        databaseid,
                                                                                        objecttype,
                                                                                        objectid,
                                                                                        objectname
                                                                                FROM #tempdetails;

                                                                        SELECT
                                                                                @sevcode = @severity;


                                                                END;
                                                        END;


                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if there are contained databases and authentication mode set to Mixed ';
                                                END;


                                                ELSE
                                                IF (@metricid = 96)
                                                BEGIN

                                                        TRUNCATE TABLE #tempdetails;

                                                        IF (@isadmin = 1)
                                                        BEGIN

                                                                ;
                                                                WITH users (objectid, name, isOwner, snapshotid, userid, dbid, type)
                                                                AS (SELECT
                                                                        db.objectid,
                                                                        db.name,
                                                                        0 AS IsOwner,
                                                                        db.snapshotid,
                                                                        dp.grantee,
                                                                        db.dbid,
                                                                        db.type
                                                                FROM dbo.databaseobject db
                                                                JOIN dbo.databaseobjectpermission dp
                                                                        ON db.snapshotid = dp.snapshotid
                                                                        AND db.dbid = dp.dbid
                                                                        AND db.classid = dp.classid
                                                                        AND db.parentobjectid = dp.parentobjectid
                                                                        AND db.objectid = dp.objectid
                                                                        AND dp.permission = 'EXECUTE'
                                                                WHERE db.type IN ('P',
                                                                'X')
                                                                AND runatstartup IS NOT NULL
                                                                AND runatstartup = 'y'
                                                                AND db.snapshotid = @snapshotid
                                                                UNION
                                                                SELECT
                                                                        db.objectid,
                                                                        db.name,
                                                                        1 AS IsOwner,
                                                                        db.snapshotid,
                                                                        db.owner,
                                                                        db.dbid,
                                                                        db.type
                                                                FROM dbo.databaseobject db
                                                                WHERE db.type IN ('P',
                                                                'X')
                                                                AND runatstartup IS NOT NULL
                                                                AND runatstartup = 'y'
                                                                AND db.snapshotid = @snapshotid),
                                                                UserRoles (userId, dbid, userDBname, userDBRole, userLogin, userServerRole, snapshotid)
                                                                AS (SELECT
                                                                        m.uid,
                                                                        m.dbid,
                                                                        m.name,
                                                                        r.name,
                                                                        sm.name,
                                                                        sr.name,
                                                                        m.snapshotid
                                                                FROM databaseprincipal m
                                                                JOIN databaserolemember
                                                                AS rm
                                                                        ON m.snapshotid = rm.snapshotid
                                                                        AND m.dbid = rm.dbid
                                                                        AND m.uid = rm.rolememberuid
                                                                        JOIN databaseprincipal
                                                                        AS r
                                                                                ON rm.snapshotid = r.snapshotid
                                                                                AND rm.dbid = r.dbid
                                                                                AND rm.groupuid = r.uid
                                                                        JOIN dbo.serverprincipal sm
                                                                                ON m.snapshotid = sm.snapshotid
                                                                                AND m.usersid = sm.sid
                                                                        JOIN dbo.serverrolemember srm
                                                                                ON sm.snapshotid = srm.snapshotid
                                                                                AND sm.principalid = srm.memberprincipalid
                                                                        JOIN dbo.serverprincipal sr
                                                                                ON rm.snapshotid = sr.snapshotid
                                                                                AND srm.principalid = sr.principalid
                                                                WHERE sr.sid = 0x03
                                                                AND m.snapshotid = @snapshotid)
                                                                INSERT INTO #tempdetails
                                                                        SELECT
                                                                                @policyid,
                                                                                @assessmentid,
                                                                                @metricid,
                                                                                @snapshotid,
                                                                                CASE u.isOwner
                                                                                        WHEN 1 THEN N'Startup stored procedure '
                                                                                                + u.name
                                                                                                + 'are owned by user without sysadmin permissions '
                                                                                        WHEN 0 THEN N'Startup stored procedure '
                                                                                                + u.name
                                                                                                + 'can be executed by user without sysadmin permissions '
                                                                                END,
                                                                                u.dbid,
                                                                                u.type,
                                                                                u.objectid,
                                                                                u.name
                                                                        FROM users u
                                                                        WHERE u.userid NOT IN (SELECT
                                                                                userId
                                                                        FROM UserRoles us
                                                                        WHERE us.dbid = u.dbid)
                                                                        GROUP BY u.isOwner,
                                                                                 u.dbid,
                                                                                 u.type,
                                                                                 u.objectid,
                                                                                 u.name;



                                                                IF NOT EXISTS (SELECT
                                                                                *
                                                                        FROM #tempdetails)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'None found.';
                                                                ELSE
                                                                BEGIN
                                                                        SET @metricval = 'Next stored procedure can be run or are owned by accounts without sysadmin permissions ';

                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + objectname
                                                                                + ', '
                                                                        FROM #tempdetails;

                                                                        SET @metricval = SUBSTRING(@metricval,
                                                                        0,
                                                                        LEN(@metricval));

                                                                        INSERT INTO policyassessmentdetail
                                                                                SELECT
                                                                                        policyid,
                                                                                        assessmentid,
                                                                                        metricid,
                                                                                        snapshotid,
                                                                                        detailfinding,
                                                                                        databaseid,
                                                                                        objecttype,
                                                                                        objectid,
                                                                                        objectname
                                                                                FROM #tempdetails;
                                                                        SELECT
                                                                                @sevcode = @severity;


                                                                END;
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if startup stored procedures can be run or are owned by accounts without sysadmin permissions ';
                                                END;


                                                ELSE
                                                IF (@metricid = 97)
                                                BEGIN

                                                        TRUNCATE TABLE #tempdetails;
                                                        IF OBJECT_ID('tempdb..#sevrVals') IS NOT NULL
                                                        BEGIN
                                                                DROP TABLE #sevrVals;
                                                        END;

                                                        SELECT
                                                                Value INTO #sevrVals
                                                        FROM dbo.splitbydelimiter(@severityvalues,
                                                        ',');

                                                        IF EXISTS (SELECT
                                                                        1
                                                                FROM dbo.sqljob
                                                                WHERE SubSystem IN (SELECT
                                                                        Value
                                                                FROM #sevrVals)
                                                                AND SnapshotId = @snapshotid)
                                                        BEGIN
                                                                IF (@isadmin = 1)
                                                                BEGIN
                                                                        DECLARE @lname AS varchar(200);

                                                                        SELECT
                                                                                @lname = (SELECT
                                                                                        loginname
                                                                                FROM dbo.serverservice
                                                                                WHERE snapshotid = @snapshotid
                                                                                AND servicename = 'SQLSERVERAGENT');

                                                                        INSERT INTO #tempdetails
                                                                                SELECT
                                                                                        @policyid,
                                                                                        @assessmentid,
                                                                                        @metricid,
                                                                                        @snapshotid,
                                                                                        N'SQL Server Agent account '
                                                                                        + swa.name
                                                                                        + ' is a member of '
                                                                                        + smm.name ' group',
                                                                                        NULL,
                                                                                        'Acc',
                                                                                        NULL,
                                                                                        swa.name
                                                                                FROM dbo.serveroswindowsaccount swa
                                                                                JOIN dbo.serveroswindowsgroupmember ss
                                                                                        ON swa.snapshotid = ss.snapshotid
                                                                                        AND swa.sid = ss.groupmember
                                                                                        JOIN dbo.serveroswindowsaccount smm
                                                                                                ON ss.snapshotid = smm.snapshotid
                                                                                                AND ss.groupsid = smm.sid
                                                                                WHERE SUBSTRING(swa.name,
                                                                                CHARINDEX('\',
                                                                                swa.name) + 1,
                                                                                LEN(swa.name)) = SUBSTRING(@lname,
                                                                                CHARINDEX('\',
                                                                                @lname) + 1,
                                                                                LEN(@lname))
                                                                                AND swa.snapshotid = @snapshotid
                                                                                AND smm.name LIKE '%\Administrators';


                                                                        INSERT INTO #tempdetails
                                                                                SELECT
                                                                                        @policyid,
                                                                                        @assessmentid,
                                                                                        @metricid,
                                                                                        @snapshotid,
                                                                                        N'SQL Server Job proxy  '
                                                                                        + swa.name
                                                                                        + ' is a member of '
                                                                                        + smm.name ' group',
                                                                                        NULL,
                                                                                        'Acc',
                                                                                        NULL,
                                                                                        swa.name
                                                                                FROM dbo.sqljobproxy p
                                                                                JOIN dbo.serveroswindowsaccount swa
                                                                                        ON p.snapshotid = swa.snapshotid
                                                                                        AND swa.sid = p.usersid
                                                                                        JOIN dbo.serveroswindowsgroupmember ss
                                                                                                ON swa.snapshotid = ss.snapshotid
                                                                                                AND swa.sid = ss.groupmember
                                                                                        JOIN dbo.serveroswindowsaccount smm
                                                                                                ON ss.snapshotid = smm.snapshotid
                                                                                                AND ss.groupsid = smm.sid
                                                                                WHERE p.subsystem IN (SELECT
                                                                                        Value
                                                                                FROM #sevrVals)
                                                                                AND p.snapshotid = @snapshotid
                                                                                AND smm.name LIKE '%\Administrators'
                                                                                GROUP BY swa.name,
                                                                                         smm.name;


                                                                        IF NOT EXISTS (SELECT
                                                                                        *
                                                                                FROM #tempdetails)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok,
                                                                                        @metricval = N'None found.';
                                                                        ELSE
                                                                        BEGIN
                                                                                SET @metricval = 'Next accounts are in Administrators role  ';

                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + objectname
                                                                                        + ', '
                                                                                FROM #tempdetails
                                                                                GROUP BY objectname;

                                                                                SET @metricval = SUBSTRING(@metricval,
                                                                                0,
                                                                                LEN(@metricval));

                                                                                SET @metricval = @metricval
                                                                                + ' and can run sql job steps in '
                                                                                + @severityvalues
                                                                                + ' subsystems';

                                                                                INSERT INTO policyassessmentdetail
                                                                                        SELECT
                                                                                                policyid,
                                                                                                assessmentid,
                                                                                                metricid,
                                                                                                snapshotid,
                                                                                                detailfinding,
                                                                                                databaseid,
                                                                                                objecttype,
                                                                                                objectid,
                                                                                                objectname
                                                                                        FROM #tempdetails
                                                                                        GROUP BY policyid,
                                                                                                 assessmentid,
                                                                                                 metricid,
                                                                                                 snapshotid,
                                                                                                 detailfinding,
                                                                                                 databaseid,
                                                                                                 objecttype,
                                                                                                 objectid,
                                                                                                 objectname;
                                                                                SELECT
                                                                                        @sevcode = @severity;


                                                                        END;
                                                                END;
                                                        END;

                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        END;
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if sql job steps in  '
                                                                + @severityvalues
                                                                + ' subsystems are run by Administrators role members';
                                                END;

                                                --  DISTRIBUTOR_ADMIN account
                                                ELSE
                                                IF (@metricid = 98)
                                                BEGIN
                                                        SET @metricval = N'None found.';
                                                        SET @metricthreshold = N'Server is vulnerable if DISTRIBUTOR_ADMIN account exists when server is not distributor or DISTRIBUTOR_ADMIN account doesn''t follow password control standards when distributor server has a remote publisher.';
                                                        SET @sevcode = @sevcodeok;
                                                        IF EXISTS (SELECT
                                                                        SPU.name
                                                                FROM dbo.serverrolemember
                                                                AS SRM
                                                                INNER JOIN dbo.serverprincipal
                                                                AS SPU
                                                                        ON SRM.snapshotid = SPU.snapshotid
                                                                        AND SRM.memberprincipalid = SPU.principalid
                                                                        AND SPU.type <> 'R'
                                                                        INNER JOIN dbo.serverprincipal
                                                                        AS SPR
                                                                                ON SRM.snapshotid = SPR.snapshotid
                                                                                AND SRM.principalid = SPR.principalid
                                                                                AND SPR.type = 'R'
                                                                                AND SPR.name = 'sysadmin'
                                                                WHERE SRM.snapshotid = @snapshotid
                                                                AND SPU.name = 'distributor_admin')
                                                        BEGIN

                                                                DECLARE @IsDistributer nchar(1);
                                                                DECLARE @IsPublisher nchar(1);
                                                                DECLARE @HasRemotePublisher nchar(1);

                                                                SELECT
                                                                        @IsDistributer = SS.isdistributor,
                                                                        @IsPublisher = SS.ispublisher,
                                                                        @HasRemotePublisher = SS.hasremotepublisher
                                                                FROM dbo.serversnapshot
                                                                AS SS
                                                                WHERE SS.snapshotid = @snapshotid;

                                                                IF (@IsDistributer = 'N')
                                                                BEGIN
                                                                        SET @sevcode = @severity;
                                                                        SET @metricval = N'The DISTRIBUTOR_ADMIN account should be deleted as it is only needed at the distributor.';
                                                                END;
                                                                ELSE
                                                                IF (@IsPublisher = 'N'
                                                                        AND @HasRemotePublisher = 'Y'
                                                                        )
                                                                BEGIN
                                                                        SET @sevcode = @severity;
                                                                        SET @metricval = N'The password of DISTRIBUTOR_ADMIN login must be set according to password control standards using the "sp_changedistributor_password" stored procedure.';
                                                                END;
                                                        END;
                                                END;

                                                -- sysadmin accounts with local administrator role
                                                ELSE
                                                IF (@metricid = 99)
                                                BEGIN
                                                        DECLARE @output varchar(max);
                                                        DECLARE @output_delim varchar(2);
                                                        DECLARE @max_output_str_length int;
                                                        DECLARE @char_index_for_trim int;
                                                        SET @max_output_str_length = 1010;
                                                        SET @output = NULL;
                                                        SET @output_delim = ', ';
                                                        SET @char_index_for_trim = 0;

                                                        WITH SuppressedAccounts
                                                        AS (SELECT
                                                                Value
                                                        FROM dbo.splitbydelimiter(@severityvalues,
                                                        ','))
                                                        SELECT
                                                                @output = ISNULL(@output
                                                                + @output_delim,
                                                                '') + ''''
                                                                + SPU.name
                                                                + '''',
                                                                @char_index_for_trim =
                                                                                              CASE
                                                                                                      WHEN LEN(@output) < @max_output_str_length THEN LEN(@output)
                                                                                                      ELSE @char_index_for_trim
                                                                                              END
                                                        FROM dbo.serverrolemember
                                                        AS SRM
                                                        INNER JOIN dbo.serverprincipal
                                                        AS SPU
                                                                ON SRM.snapshotid = SPU.snapshotid
                                                                AND SRM.snapshotid = @snapshotid
                                                                AND SRM.memberprincipalid = SPU.principalid
                                                                AND SPU.type <> 'R'
                                                                INNER JOIN dbo.serverprincipal
                                                                AS SPR
                                                                        ON SRM.snapshotid = SPR.snapshotid
                                                                        AND SRM.principalid = SPR.principalid
                                                                        AND SPR.type = 'R'
                                                                        AND SPR.name = 'sysadmin'
                                                                INNER JOIN dbo.serveroswindowsgroupmember
                                                                AS WGM
                                                                        ON SPU.snapshotid = WGM.snapshotid
                                                                        AND SPU.sid = WGM.groupmember
                                                                INNER JOIN dbo.serveroswindowsaccount
                                                                AS WG
                                                                        ON WGM.snapshotid = WG.snapshotid
                                                                        AND WGM.groupsid = WG.sid
                                                                        AND WG.name LIKE '%\Administrators'
                                                        WHERE NOT EXISTS (SELECT
                                                                1
                                                        FROM SuppressedAccounts
                                                        AS sa
                                                        WHERE SPU.name LIKE sa.Value);

                                                        IF (LEN(@output) > @max_output_str_length)
                                                                SELECT
                                                                        @output = SUBSTRING(@output,
                                                                        1,
                                                                        @char_index_for_trim)
                                                                        + N', more...';


                                                        IF (@isadmin = 1)
                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        SELECT
                                                                                @policyid,
                                                                                @assessmentid,
                                                                                @metricid,
                                                                                @snapshotid,
                                                                                N'SQL SYSADMIN accounts that are in the local Administrator role: '''
                                                                                + Value + N'''',
                                                                                NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, -- object id
                                                                                Value
                                                                        FROM dbo.splitbydelimiter(@output,
                                                                        @output_delim);

                                                        IF (@output IS NULL)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'None found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'SQL SYSADMIN accounts that are in the local Administrator role: '
                                                                        + @output;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if SQL SYSADMIN accounts that are in the local Administrator role for the physical server other than: '
                                                                + @severityvalues;
                                                END;

                                                --information about database roles
                                                ELSE
                                                IF (@metricid = 100)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        DECLARE @RolePermissions TABLE (
                                                                rolename
                                                                nvarchar(256)
                                                                NULL,
                                                                rolepermission
                                                                nvarchar(max)
                                                                NULL
                                                        );

                                                        WITH RolePermisions
                                                        AS (SELECT
                                                                rolename,
                                                                (SELECT
                                                                        T1.rolepermission
                                                                        + ', ' AS [text()]
                                                                FROM dbo.fixedrolepermission
                                                                AS T1
                                                                WHERE T1.rolename = T2.rolename
                                                                ORDER BY T1.rolename
                                                                FOR
                                                                xml PATH (''))
                                                                AS rolepermissions
                                                        FROM (SELECT
                                                                rolename
                                                        FROM dbo.fixedrolepermission
                                                        GROUP BY rolename) AS T2)
                                                        INSERT INTO @RolePermissions
                                                                SELECT
                                                                        rolename,
                                                                        LEFT(rolepermissions,
                                                                        LEN(rolepermissions)
                                                                        - 1) AS rolepermissions
                                                                FROM RolePermisions;


                                                        DECLARE @DatabaseRoleUsers TABLE (
                                                                snapshotid int
                                                                NOT NULL,
                                                                dbid int
                                                                NOT NULL,
                                                                roleid
                                                                varbinary(85)
                                                                NULL,
                                                                username
                                                                nvarchar(128)
                                                                NOT NULL,
                                                                usertype
                                                                nvarchar(20)
                                                                NOT NULL,
                                                                groupname
                                                                nvarchar(200)
                                                                NULL,
                                                                rolepermissions
                                                                nvarchar(max)
                                                        );

                                                        INSERT INTO @DatabaseRoleUsers
                                                                SELECT
                                                                        DRM.snapshotid,
                                                                        DRM.dbid,
                                                                        DPR.uid AS roleid,
                                                                        DPU.name AS username,
                                                                        CASE
                                                                                WHEN DPU.type = 'U' THEN 'Windows User'
                                                                                WHEN DPU.type = 'G' THEN 'Windows Group'
                                                                                WHEN DPU.type = 'S' THEN 'SQL login'
                                                                        END AS usertype,
                                                                        WG.name AS groupname,
                                                                        RP.rolepermission
                                                                FROM dbo.databaserolemember
                                                                AS DRM
                                                                INNER JOIN dbo.databaseprincipal
                                                                AS DPU
                                                                        ON DRM.snapshotid = DPU.snapshotid
                                                                        AND DRM.dbid = DPU.dbid
                                                                        AND DRM.rolememberuid = DPU.uid
                                                                        AND DPU.type <> 'R'
                                                                        INNER JOIN dbo.databaseprincipal
                                                                        AS DPR
                                                                                ON DRM.snapshotid = DPR.snapshotid
                                                                                AND DRM.dbid = DPR.dbid
                                                                                AND DRM.groupuid = DPR.uid
                                                                                AND DPR.type = 'R'
                                                                        LEFT JOIN dbo.serveroswindowsgroupmember
                                                                        AS WGM
                                                                                ON DPU.snapshotid = WGM.snapshotid
                                                                                AND DPU.usersid = WGM.groupmember
                                                                        LEFT JOIN dbo.serveroswindowsaccount
                                                                        AS WG
                                                                                ON WGM.snapshotid = WG.snapshotid
                                                                                AND WGM.groupsid = WG.sid
                                                                        LEFT JOIN @RolePermissions
                                                                        AS RP
                                                                                ON DPR.name = RP.rolename
                                                                ORDER BY DRM.snapshotid,
                                                                DRM.dbid;

                                                        DECLARE @DatabaseRolesInfo TABLE (
                                                                databasename
                                                                nvarchar(128),
                                                                rolename
                                                                nvarchar(128),
                                                                username
                                                                nvarchar(128),
                                                                usertype
                                                                nvarchar(20),
                                                                groupname
                                                                nvarchar(200),
                                                                rolepermissions
                                                                nvarchar(max)
                                                        );

                                                        INSERT INTO @DatabaseRolesInfo
                                                                SELECT
                                                                        DB.databasename,
                                                                        DPR.name,
                                                                        DRU.username,
                                                                        DRU.usertype,
                                                                        DRU.groupname,
                                                                        rolepermissions
                                                                FROM dbo.databaseprincipal
                                                                AS DPR
                                                                INNER JOIN dbo.sqldatabase
                                                                AS DB
                                                                        ON DPR.snapshotid = DB.snapshotid
                                                                        AND DPR.dbid = DB.dbid
                                                                        AND DPR.type = 'R'
                                                                        LEFT JOIN @DatabaseRoleUsers
                                                                        AS DRU
                                                                                ON DPR.snapshotid = DRU.snapshotid
                                                                                AND DPR.dbid = DRU.dbid
                                                                                AND DPR.uid = DRU.roleid
                                                                WHERE DPR.snapshotid = @snapshotid
                                                                ORDER BY DB.databasename,
                                                                DPR.name;

                                                        DECLARE @databasename nvarchar(128);
                                                        DECLARE @rolename nvarchar(128);
                                                        DECLARE @username nvarchar(128);
                                                        DECLARE @usertype nvarchar(20);
                                                        DECLARE @groupname nvarchar(200);
                                                        DECLARE @permissions nvarchar(max);
                                                        DECLARE @Delimiter nvarchar(10);

                                                        SELECT
                                                                @Delimiter = ', ';

                                                        DECLARE DatabaseRolesInfoCursor CURSOR FOR
                                                        SELECT
                                                                DRI.databasename,
                                                                DRI.rolename,
                                                                DRI.username,
                                                                DRI.usertype,
                                                                DRI.groupname,
                                                                DRI.rolepermissions
                                                        FROM @DatabaseRolesInfo
                                                        AS DRI;

                                                        OPEN DatabaseRolesInfoCursor;
                                                        FETCH NEXT FROM
                                                        DatabaseRolesInfoCursor INTO @databasename,
                                                        @rolename,
                                                        @username,
                                                        @usertype,
                                                        @groupname,
                                                        @permissions;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN

                                                                SET @strval = 'Database: '
                                                                + @databasename
                                                                + '; Role: '
                                                                + @rolename;

                                                                IF LEN(ISNULL(@username,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; User: '
                                                                        + @username;
                                                                END;

                                                                IF LEN(ISNULL(@usertype,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; Type: '
                                                                        + @usertype;
                                                                END;

                                                                IF LEN(ISNULL(@groupname,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; Windows Group: '
                                                                        + @groupname;
                                                                END;

                                                                IF LEN(ISNULL(@permissions,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; Permissions: '
                                                                        + @permissions;
                                                                END;

                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Database Role Info found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, N'Database Role Metric details');

                                                                FETCH NEXT FROM
                                                                DatabaseRolesInfoCursor INTO @databasename,
                                                                @rolename,
                                                                @username,
                                                                @usertype,
                                                                @groupname,
                                                                @permissions;
                                                        END;

                                                        CLOSE DatabaseRolesInfoCursor;
                                                        DEALLOCATE DatabaseRolesInfoCursor;
                                                        SELECT
                                                                @sevcode = @severity,
                                                                @metricval = N'The following database roles were found: '
                                                                + @metricval;
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if database role info hasn''t been checked.';
                                                END;
                                                --						--information about server roles
                                                ELSE
                                                IF (@metricid = 101)
                                                BEGIN
                                                        SELECT
                                                                @severityvalues = N'Y';
                                                        DECLARE @ServerRoleUsers TABLE (
                                                                snapshotid int
                                                                NOT NULL,
                                                                roleprincipalid
                                                                varbinary(85)
                                                                NULL,
                                                                username
                                                                nvarchar(128)
                                                                NOT NULL,
                                                                usertype
                                                                nvarchar(20)
                                                                NOT NULL,
                                                                groupname
                                                                nvarchar(200)
                                                                NULL,
                                                                disabled
                                                                nvarchar(3)
                                                        );

                                                        INSERT INTO @ServerRoleUsers
                                                                SELECT
                                                                        --*
                                                                        SRM.snapshotid,
                                                                        SPR.principalid,
                                                                        SPU.name AS username,
                                                                        CASE
                                                                                WHEN SPU.type = 'U' THEN 'Windows User'
                                                                                WHEN SPU.type = 'G' THEN 'Windows Group'
                                                                                WHEN SPU.type = 'S' THEN 'SQL login'
                                                                        END AS usertype,
                                                                        WG.name AS groupname,
                                                                        CASE
                                                                                WHEN SPU.disabled = 'Y' THEN 'Yes'
                                                                                ELSE 'No'
                                                                        END AS disabled
                                                                FROM dbo.serverrolemember
                                                                AS SRM
                                                                INNER JOIN dbo.serverprincipal
                                                                AS SPU
                                                                        ON SRM.snapshotid = SPU.snapshotid
                                                                        AND SRM.memberprincipalid = SPU.principalid
                                                                        AND SPU.type <> 'R'
                                                                        INNER JOIN dbo.serverprincipal
                                                                        AS SPR
                                                                                ON SRM.snapshotid = SPR.snapshotid
                                                                                AND SRM.principalid = SPR.principalid
                                                                                AND SPR.type = 'R'
                                                                        LEFT JOIN dbo.serveroswindowsgroupmember
                                                                        AS WGM
                                                                                ON SPU.snapshotid = WGM.snapshotid
                                                                                AND SPU.sid = WGM.groupmember
                                                                        LEFT JOIN dbo.serveroswindowsaccount
                                                                        AS WG
                                                                                ON WGM.snapshotid = WG.snapshotid
                                                                                AND WGM.groupsid = WG.sid
                                                                WHERE SRM.snapshotid = @snapshotid
                                                                ORDER BY SRM.snapshotid;

                                                        DECLARE @ServerRolesInfo TABLE (
                                                                instancename
                                                                nvarchar(400),
                                                                rolename
                                                                nvarchar(128),
                                                                username
                                                                nvarchar(128),
                                                                usertype
                                                                nvarchar(20),
                                                                groupname
                                                                nvarchar(200),
                                                                disabled
                                                                nvarchar(3)
                                                        );

                                                        INSERT INTO @ServerRolesInfo
                                                                SELECT
                                                                        CASE
                                                                                WHEN LEN(ISNULL(ST.instancename,
                                                                                        '')) <> 0 THEN ST.instancename
                                                                                WHEN LEN(ISNULL(ST.servername,
                                                                                        '')) <> 0 THEN ST.servername
                                                                                ELSE ST.connectionname
                                                                        END AS instancename,
                                                                        SP.name AS rolename,
                                                                        SRU.username,
                                                                        SRU.usertype,
                                                                        SRU.groupname,
                                                                        SRU.disabled
                                                                FROM dbo.serverprincipal
                                                                AS SP
                                                                INNER JOIN dbo.serversnapshot
                                                                AS ST
                                                                        ON SP.snapshotid = ST.snapshotid
                                                                        AND SP.type = 'R'
                                                                        LEFT JOIN @ServerRoleUsers
                                                                        AS SRU
                                                                                ON SP.snapshotid = SRU.snapshotid
                                                                                AND SP.principalid = SRU.roleprincipalid
                                                                WHERE SP.snapshotid = @snapshotid
                                                                ORDER BY instancename,
                                                                rolename;

                                                        DECLARE @Instancename nvarchar(400);
                                                        DECLARE @ServerRolename nvarchar(128);
                                                        DECLARE @ServerUsername nvarchar(128);
                                                        DECLARE @ServerUserType nvarchar(20);
                                                        DECLARE @WindowsGroupname nvarchar(200);
                                                        DECLARE @ServerUserDisabled nvarchar(3);

                                                        DECLARE ServerRolesInfoCursor CURSOR FOR
                                                        SELECT
                                                                SRI.instancename,
                                                                SRI.rolename,
                                                                SRI.username,
                                                                SRI.usertype,
                                                                SRI.groupname,
                                                                SRI.disabled
                                                        FROM @ServerRolesInfo
                                                        AS SRI;

                                                        OPEN ServerRolesInfoCursor;
                                                        FETCH NEXT FROM
                                                        ServerRolesInfoCursor INTO @Instancename,
                                                        @ServerRolename,
                                                        @ServerUsername,
                                                        @ServerUserType,
                                                        @WindowsGroupname,
                                                        @ServerUserDisabled;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN

                                                                SET @strval = 'SQL Instance: '
                                                                + @Instancename
                                                                + '; Server Role: '
                                                                + @ServerRolename;

                                                                IF LEN(ISNULL(@ServerUsername,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; User: '
                                                                        + @ServerUsername;
                                                                END;

                                                                IF LEN(ISNULL(@ServerUserType,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; Type: '
                                                                        + @ServerUserType;
                                                                END;

                                                                IF LEN(ISNULL(@WindowsGroupname,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; Windows Group: '
                                                                        + @WindowsGroupname;
                                                                END;

                                                                IF LEN(ISNULL(@ServerUserDisabled,
                                                                        '')) <> 0
                                                                BEGIN
                                                                        SET @strval = @strval
                                                                        + '; Disabled: '
                                                                        + @ServerUserDisabled;
                                                                END;

                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Server Role Info found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, N'Server Role Metric details');

                                                                FETCH NEXT FROM
                                                                ServerRolesInfoCursor INTO @Instancename,
                                                                @ServerRolename,
                                                                @ServerUsername,
                                                                @ServerUserType,
                                                                @WindowsGroupname,
                                                                @ServerUserDisabled;
                                                        END;

                                                        CLOSE ServerRolesInfoCursor;
                                                        DEALLOCATE ServerRolesInfoCursor;
                                                        SELECT
                                                                @sevcode = @severity,
                                                                @metricval = N'The following server roles were found: '
                                                                + @metricval;
                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if server roles haven''t been checked.';
                                                END;
                                                ELSE
                                                IF (@metricid = 102)
                                                BEGIN

                                                        TRUNCATE TABLE #tempdetails;

                                                        IF EXISTS (SELECT
                                                                        1
                                                                FROM dbo.splitbydelimiter(@severityvalues,
                                                                ','))
                                                        BEGIN
                                                                IF (@isadmin = 1)
                                                                BEGIN

                                                                        INSERT INTO #tempdetails
                                                                                SELECT
                                                                                        @policyid,
                                                                                        @assessmentid,
                                                                                        @metricid,
                                                                                        @snapshotid,
                                                                                        N'Database   '
                                                                                        + sdb.databasename
                                                                                        + 'has next unacceptable  '
                                                                                        + sdb.owner,
                                                                                        sdb.dbid,
                                                                                        'DB',
                                                                                        sdb.dbid,
                                                                                        sdb.databasename
                                                                                FROM dbo.sqldatabase sdb
                                                                                JOIN dbo.splitbydelimiter(@severityvalues,
                                                                                ',') sp
                                                                                        ON sdb.owner LIKE '%'
                                                                                        + sp.Value
                                                                                WHERE sdb.snapshotid = @snapshotid;




                                                                        IF NOT EXISTS (SELECT
                                                                                        *
                                                                                FROM #tempdetails)
                                                                                SELECT
                                                                                        @sevcode = @sevcodeok,
                                                                                        @metricval = N'None found.';
                                                                        ELSE
                                                                        BEGIN
                                                                                SET @metricval = 'Next databases are owned by unacceptable accounts :';

                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + objectname
                                                                                        + ', '
                                                                                FROM #tempdetails
                                                                                GROUP BY objectname;

                                                                                SET @metricval = SUBSTRING(@metricval,
                                                                                0,
                                                                                LEN(@metricval));



                                                                                INSERT INTO policyassessmentdetail
                                                                                        SELECT
                                                                                                policyid,
                                                                                                assessmentid,
                                                                                                metricid,
                                                                                                snapshotid,
                                                                                                detailfinding,
                                                                                                databaseid,
                                                                                                objecttype,
                                                                                                objectid,
                                                                                                objectname
                                                                                        FROM #tempdetails
                                                                                        GROUP BY policyid,
                                                                                                 assessmentid,
                                                                                                 metricid,
                                                                                                 snapshotid,
                                                                                                 detailfinding,
                                                                                                 databaseid,
                                                                                                 objecttype,
                                                                                                 objectid,
                                                                                                 objectname;
                                                                                SELECT
                                                                                        @sevcode = @severity;


                                                                        END;
                                                                END;
                                                        END;

                                                        ELSE
                                                        BEGIN
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Blacklist of database ownership was not provided';
                                                        END;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if  databases are owned by one of the next accounts:  '
                                                                + @severityvalues;
                                                END;

                                                ELSE
                                                IF (@metricid = 103)
                                                BEGIN

                                                        TRUNCATE TABLE #tempdetails;

                                                        IF (@isadmin = 1)
                                                        BEGIN

                                                                INSERT INTO #tempdetails
                                                                        SELECT
                                                                                @policyid,
                                                                                @assessmentid,
                                                                                @metricid,
                                                                                @snapshotid,
                                                                                N'Public role has access to  '
                                                                                + dd.name
                                                                                + ' object ',
                                                                                dd.dbid,
                                                                                dd.type,
                                                                                dd.objectid,
                                                                                dd.name
                                                                        FROM dbo.databaseobject dd
                                                                        JOIN dbo.sqldatabase sdb
                                                                                ON dd.snapshotid = sdb.snapshotid
                                                                                AND dd.dbid = sdb.dbid
                                                                                JOIN dbo.databaseschema ds
                                                                                        ON dd.snapshotid = ds.snapshotid
                                                                                        AND dd.dbid = ds.dbid
                                                                                        AND dd.schemaid = ds.schemaid
                                                                                JOIN dbo.databaseobjectpermission dp
                                                                                        ON dd.snapshotid = dp.snapshotid
                                                                                        AND dd.dbid = dp.dbid
                                                                                        AND dd.classid = dp.classid
                                                                                        AND dd.parentobjectid = dp.parentobjectid
                                                                                        AND dd.objectid = dp.objectid
                                                                        WHERE dp.grantee = 0
                                                                        AND ds.schemaname <> 'sys'
                                                                        AND sdb.databasename NOT IN (
                                                                        'master', 'msdb',
                                                                        'tempdb')
                                                                        AND dp.isdeny = 'N'
                                                                        AND dd.snapshotid = @snapshotid
                                                                        GROUP BY dd.name,
                                                                                 dd.dbid,
                                                                                 dd.type,
                                                                                 dd.objectid,
                                                                                 sdb.databasename;




                                                                IF NOT EXISTS (SELECT
                                                                                *
                                                                        FROM #tempdetails)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'None found.';
                                                                ELSE
                                                                BEGIN
                                                                        SET @metricval = 'Public roles have access to next objects :';

                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + objectname
                                                                                + ', '
                                                                        FROM #tempdetails
                                                                        GROUP BY objectname;

                                                                        SET @metricval = SUBSTRING(@metricval,
                                                                        0,
                                                                        LEN(@metricval));



                                                                        INSERT INTO policyassessmentdetail
                                                                                SELECT
                                                                                        policyid,
                                                                                        assessmentid,
                                                                                        metricid,
                                                                                        snapshotid,
                                                                                        detailfinding,
                                                                                        databaseid,
                                                                                        objecttype,
                                                                                        objectid,
                                                                                        objectname
                                                                                FROM #tempdetails
                                                                                GROUP BY policyid,
                                                                                         assessmentid,
                                                                                         metricid,
                                                                                         snapshotid,
                                                                                         detailfinding,
                                                                                         databaseid,
                                                                                         objecttype,
                                                                                         objectid,
                                                                                         objectname;
                                                                        SELECT
                                                                                @sevcode = @severity;


                                                                END;
                                                        END;


                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if public roles has access to user defined objects';

                                                END;

                                                ELSE
                                                IF (@metricid = 104)
                                                BEGIN

                                                        IF NOT EXISTS (SELECT
                                                                        *
                                                                FROM serversnapshot
                                                                WHERE snapshotid = @snapshotid
                                                                AND isclrenabled = N'Y')
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'CLR is turned off.';
                                                        ELSE
                                                        BEGIN
                                                                SET @metricval = 'CLR is turned on.';

                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'iSRV', -- object type
                                                                        NULL, @strval);
                                                                SET @sevcode = @severity;


                                                        END;
                                                END;


                                                ELSE
                                                IF (@metricid = 105)
                                                BEGIN

                                                        IF EXISTS (SELECT
                                                                        *
                                                                FROM serversnapshot
                                                                WHERE snapshotid = @snapshotid
                                                                AND isdefaulttraceenabled = N'Y')
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Default Trace is enabled.';
                                                        ELSE
                                                        BEGIN
                                                                SET @metricval = N'Default Trace is disabled.';

                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'iSRV', -- object type
                                                                        NULL, @strval);
                                                                SET @sevcode = @severity;


                                                        END;
                                                END;

                                                ELSE
                                                IF (@metricid = 106)
                                                BEGIN
                                                        DECLARE @numerrorlogs smallint;
                                                        SELECT
                                                                @numerrorlogs = ISNULL(numerrorlogs,
                                                                0)
                                                        FROM serversnapshot
                                                        WHERE snapshotid = @snapshotid;
                                                        IF (@numerrorlogs > 11)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Maximum number of error log files is '
                                                                        + CONVERT(varchar, @numerrorlogs)
                                                                        + '.';
                                                        ELSE
                                                        BEGIN
                                                                SET @metricval = N'Maximum number of error log files is less than recommended (12+). Current value is '
                                                                + CONVERT(varchar, @numerrorlogs)
                                                                + '.';

                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'iSRV', -- object type
                                                                        NULL, @strval);
                                                                SET @sevcode = @severity;


                                                        END;
                                                END;

                                                ELSE
                                                IF (@metricid = 107)
                                                BEGIN
                                                        TRUNCATE TABLE #tempdetails;

                                                        IF OBJECT_ID('tempdb..#sevrVal') IS NOT NULL
                                                        BEGIN
                                                                DROP TABLE #sevrVal;
                                                        END;

                                                        SELECT
                                                                Value INTO #sevrVal
                                                        FROM dbo.splitbydelimiter(@severityvalues,
                                                        ',');

                                                        DECLARE @orphanedUsersCount AS int;
                                                        DECLARE @orphanedUsersnames AS varchar(max);
                                                        WITH OrphanedUsers (dbid, name, uid, type)
                                                        AS (SELECT
                                                                dbid,
                                                                name,
                                                                uid,
                                                                type
                                                        FROM dbo.databaseprincipal
                                                        WHERE usersid NOT IN (SELECT
                                                                sid
                                                        FROM dbo.serverprincipal
                                                        WHERE sid IS NOT NULL
                                                        AND snapshotid = @snapshotid)
                                                        AND type = N'S'
                                                        AND usersid <> 0x00
                                                        AND usersid IS NOT NULL
                                                        AND IsContainedUser = 0
                                                        AND snapshotid = @snapshotid
                                                        AND NOT EXISTS (SELECT
                                                                *
                                                        FROM #sevrVal
                                                        WHERE Value = name))
                                                        INSERT INTO #tempdetails
                                                                SELECT
                                                                        @policyid,
                                                                        @assessmentid,
                                                                        @metricid,
                                                                        @snapshotid,
                                                                        N'Orphaned user found - '
                                                                        + name,
                                                                        dbid,
                                                                        type,
                                                                        uid,
                                                                        name
                                                                FROM OrphanedUsers;
                                                        WITH OrphanedUsersForDb (orphanedUsersCountForDb, orphanedUsersnamesForDb, dbname, dbid)
                                                        AS (SELECT
                                                                COUNT(*) AS orphanedUsersCount,
                                                                STUFF((SELECT
                                                                        N', '
                                                                        + objectname
                                                                FROM #tempdetails c2
                                                                WHERE c.databaseid = c2.databaseid
                                                                FOR
                                                                xml PATH (N'')), 1, 2, N'') AS orphanedUsersnamesForDb,
                                                                sdb.databasename,
                                                                c.databaseid
                                                        FROM #tempdetails c
                                                        JOIN dbo.sqldatabase sdb
                                                                ON c.databaseid = sdb.dbid
                                                                AND c.snapshotid = sdb.snapshotid
                                                        GROUP BY c.databaseid,
                                                                 sdb.databasename)
                                                        SELECT
                                                                @orphanedUsersCount = SUM(orphanedUsersCountForDb),
                                                                @orphanedUsersnames = STUFF((SELECT
                                                                        N'; '
                                                                        + orphanedUsersnamesForDb
                                                                        + N' in '
                                                                        + dbname
                                                                FROM OrphanedUsersForDb
                                                                FOR
                                                                xml PATH (N'')), 1, 2, N'')
                                                        FROM OrphanedUsersForDb;

                                                        IF (@orphanedUsersCount IS NULL
                                                                OR @orphanedUsersCount = 0
                                                                )
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'There is no Orphaned users.';
                                                        ELSE
                                                        BEGIN
                                                                SET @metricval = CAST(@orphanedUsersCount AS nvarchar)
                                                                + N' orphaned users found: '
                                                                + @orphanedUsersnames
                                                                + '.';
                                                                INSERT INTO policyassessmentdetail
                                                                        SELECT
                                                                                policyid,
                                                                                assessmentid,
                                                                                metricid,
                                                                                snapshotid,
                                                                                detailfinding,
                                                                                databaseid,
                                                                                objecttype,
                                                                                objectid,
                                                                                objectname
                                                                        FROM #tempdetails;

                                                                SET @sevcode = @severity;
                                                        END;
                                                END;

                                                ELSE
                                                IF (@metricid = 108)
                                                BEGIN
                                                        IF NOT EXISTS (SELECT
                                                                        *
                                                                FROM serversnapshot
                                                                WHERE snapshotid = @snapshotid
                                                                AND oleautomationproceduresenabled = N'Y')
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Ole automation procedures are disabled.';
                                                        ELSE
                                                        BEGIN
                                                                SET @metricval = N'Ole automation procedures are enabled.';

                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'DB', -- object type
                                                                        NULL, @strval);
                                                                SET @sevcode = @severity;
                                                        END;
                                                END;

                                                ELSE
                                                IF (@metricid = 109)
                                                BEGIN

                                                        IF EXISTS (SELECT
                                                                        1
                                                                FROM serversnapshot
                                                                WHERE snapshotid = @snapshotid
                                                                AND iscommoncriteriacomplianceenabled = N'Y')
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'Common criteria compliance is enabled.';
                                                        ELSE
                                                        BEGIN
                                                                SET @metricval = 'Common criteria compliance is disabled.';

                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'DB', -- object type
                                                                        NULL, @strval);
                                                                SET @sevcode = @severity;


                                                        END;
                                                END;

                                                -- Integration Services Users Permissions Not Acceptable
                                                ELSE
                                                IF (@metricid = 110)
                                                BEGIN
                                                        SELECT
                                                                @sql = N'declare databasecursor cursor for
											select vdop.objectname, dp.name
											from [dbo].[vwdatabaseobjectpermission] vdop
											inner join databaseprincipal dp 
												on ((vdop.snapshotid = dp.snapshotid) and (vdop.dbid = dp.dbid) and (vdop.grantee = dp.uid))
											where 
											(
												(vdop.snapshotid = '
                                                                + CONVERT(nvarchar, @snapshotid)
                                                                + N') 
												and ((vdop.isgrant = N''Y'') or (vdop.isgrantwith = N''Y''))
												and (vdop.objectname in ('
                                                                + @severityvalues
                                                                + N'))
												and dp.type IN (''S'', ''U'', ''G'')
											)';
                                                        EXEC (@sql);
                                                        OPEN databasecursor;
                                                        FETCH NEXT FROM
                                                        databasecursor INTO @strval2,
                                                        @strval3;

                                                        SELECT
                                                                @intval2 = 0;
                                                        WHILE @@fetch_status = 0
                                                        BEGIN
                                                                SELECT
                                                                        @strval = @strval3
                                                                        + ' on '
                                                                        + @strval2;
                                                                IF (@intval2 = 1
                                                                        OR LEN(@metricval)
                                                                        + LEN(@strval) > 1010
                                                                        )
                                                                BEGIN
                                                                        IF @intval2 = 0
                                                                                SELECT
                                                                                        @metricval = @metricval
                                                                                        + N', more...',
                                                                                        @intval2 = 1;
                                                                END;
                                                                ELSE
                                                                        SELECT
                                                                                @metricval = @metricval
                                                                                + CASE
                                                                                        WHEN LEN(@metricval) > 0 THEN N', '
                                                                                        ELSE N''
                                                                                END + N''''
                                                                                + @strval
                                                                                + N'''';

                                                                IF (@isadmin = 1)
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, N'Permissions on stored procedures found: ''' + @strval + N'''', NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, @strval);

                                                                FETCH NEXT FROM
                                                                databasecursor INTO @strval2,
                                                                @strval3;
                                                        END;

                                                        CLOSE databasecursor;
                                                        DEALLOCATE databasecursor;

                                                        IF (LEN(@metricval) = 0)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = 'No unacceptable permissions found.';
                                                        ELSE
                                                                SELECT
                                                                        @sevcode = @severity,
                                                                        @metricval = N'Permissions on stored procedures found: '
                                                                        + @metricval;

                                                        SELECT
                                                                @metricthreshold = N'Server is vulnerable if users other than the default SSIS database roles have been granted permissions on an Integration Services stored procedure.';
                                                END;

                                                -- Other General Domain Accounts Check
                                                ELSE
                                                IF (@metricid = 111)
                                                BEGIN

                                                        -- Well-known security identifiers in Windows operating systems: https://support.microsoft.com/en-us/kb/243330
                                                        DECLARE @domainUsersSidPattern AS nvarchar(35);
                                                        DECLARE @everyoneSidString AS nvarchar(27);
                                                        DECLARE @authenticatedUsersSidString AS nvarchar(27);

                                                        SET @domainUsersSidPattern = '0x010500000000000515000000%01020000';
                                                        SET @everyoneSidString = '0x010100000000000100000000';
                                                        SET @authenticatedUsersSidString = '0x01010000000000050b000000';

                                                        DECLARE @generalUserPrincipals TABLE (
                                                                name
                                                                nvarchar(128)
                                                                NOT NULL
                                                        );

                                                        ;
                                                        WITH ConvertedSidsForCurrentSnapshot ([sid], name)
                                                        AS (SELECT
                                                                CONVERT([VARCHAR](512), sid, 1) AS [sid],
                                                                [name]
                                                        FROM [serverprincipal]
                                                        WHERE snapshotid = @snapshotid)
                                                        INSERT INTO @generalUserPrincipals
                                                                SELECT
                                                                        [name]
                                                                FROM ConvertedSidsForCurrentSnapshot
                                                                WHERE [sid] LIKE @domainUsersSidPattern
                                                                OR [sid] IN (
                                                                @everyoneSidString,
                                                                @authenticatedUsersSidString);

                                                        IF NOT EXISTS (SELECT
                                                                        1
                                                                FROM @generalUserPrincipals)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'There is no general domain accounts on the instance.';
                                                        ELSE
                                                        BEGIN

                                                                DECLARE @userNamesList varchar(max);
                                                                SET @userNamesList = '';
                                                                SELECT
                                                                        @userNamesList = @userNamesList
                                                                        + name + ','
                                                                FROM @generalUserPrincipals;
                                                                SET @userNamesList = SUBSTRING(@userNamesList,
                                                                1,
                                                                LEN(@userNamesList)
                                                                - 1);

                                                                SET @metricval = 'General domain accounts are added to the instance: '
                                                                + @userNamesList
                                                                + '.';

                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'iSRV', -- object type
                                                                        NULL, @strval);
                                                                SET @sevcode = @severity;

                                                        END;
                                                END;

                                                -- SQL Jobs and Agent Check
                                                ELSE
                                                IF (@metricid = 112)
                                                BEGIN

                                                        DECLARE @jobsStepsWithoutProxy TABLE (
                                                                name
                                                                nvarchar(128)
                                                                NOT NULL,
                                                                step
                                                                nvarchar(128)
                                                                NULL
                                                        );

                                                        INSERT INTO @jobsStepsWithoutProxy
                                                                SELECT
																	j.Name,
																	j.Step
                                                                FROM [dbo].[sqljob] j
																JOIN serversnapshot ss ON ss.snapshotid =  j.SnapshotId
                                                                WHERE 
																	j.ProxyId IS NULL AND 
																	j.SnapshotId = @snapshotid
                                                                ORDER BY 
																	j.Name,
																	j.JobId;

                                                        IF NOT EXISTS (SELECT
                                                                        1
                                                                FROM @jobsStepsWithoutProxy)
                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'There is no job step without proxy account.';
														ELSE IF(dbo.fn_getversionasdecimal(dbo.fn_normalizeversion(@version)) < dbo.fn_getversionasdecimal(dbo.fn_normalizeversion(N'9.')))
																SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'SQL server 2000 does not support proxies.';
                                                        ELSE
                                                        BEGIN

                                                                DECLARE @jobStepsList varchar(max);
                                                                SET @jobStepsList = '';
                                                                SELECT
                                                                        @jobStepsList = @jobStepsList
                                                                        + 'Job: "' + name + '" Step: "'
                                                                        + step + '"; '
                                                                FROM @jobsStepsWithoutProxy;

                                                                SET @metricval = 'There are jobs that have no proxy account: '
                                                                + CHAR(13)
                                                                + CHAR(10)
                                                                + @jobStepsList
                                                                + '';

                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'iSRV', -- object type
                                                                        NULL, @strval);
                                                                SET @sevcode = @severity;

                                                        END;
														DELETE FROM @jobsStepsWithoutProxy
                                                END;

                                                ---Encryption methods 
                                                ELSE
                                                IF (@metricid = 113)
                                                BEGIN

												IF(dbo.fn_getversionasdecimal(dbo.fn_normalizeversion(@version)) < dbo.fn_getversionasdecimal(dbo.fn_normalizeversion(N'9.')))
													BEGIN
															SELECT  @sevcode = @sevcodeok, @metricval = N'Check can''t be applied to SQL Server 2000.';
													END
													ELSE
													BEGIN
                                                        SELECT
                                                                e.name,
                                                                e.algorithmdesc,
                                                                s.databasename INTO #keys
                                                        FROM dbo.encryptionkey e
                                                        JOIN dbo.sqldatabase s
                                                                ON s.dbid = e.databaseid
                                                                AND e.snapshotid = s.snapshotid
                                                        WHERE e.snapshotid = @snapshotid
                                                        AND e.algorithmdesc NOT IN (SELECT
                                                                Value
                                                        FROM dbo.splitbydelimiter(@severityvalues,
                                                        ','));
														set @metricthreshold = 'Server is vulnerable if there are encryption methods other than : '+@severityvalues;
                                                        IF NOT EXISTS (SELECT
                                                                        1
                                                                FROM #keys)

                                                                SELECT
                                                                        @sevcode = @sevcodeok,
                                                                        @metricval = N'There is no keys with not allowed encryption methods.';
																		
                                                        ELSE
                                                        BEGIN

                                                                DECLARE @foundKeys varchar(max);
                                                                SET @foundKeys = '';
                                                                SELECT
                                                                        @foundKeys = @foundKeys
                                                                        + name + '( '
                                                                        + algorithmdesc
                                                                        + ') - '
                                                                        + databasename
                                                                        + ',' + CHAR(13)
                                                                        + CHAR(10)
                                                                FROM #keys;
                                                                SET @foundKeys = SUBSTRING(@foundKeys,1,LEN(@foundKeys)- 1);
                                                                SET @metricval = 'There are keys that have not supported encryption method: '+ CHAR(13)+ CHAR(10)+ @foundKeys+ '';
																
																 SET @sevcode = @severity;
														END;
                                                                INSERT INTO policyassessmentdetail (policyid,
                                                                assessmentid,
                                                                metricid,
                                                                snapshotid,
                                                                detailfinding,
                                                                databaseid,
                                                                objecttype,
                                                                objectid,
                                                                objectname)
                                                                        VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                        N'DB', -- object type
                                                                        NULL, @strval);
                                                               

                                                        
														IF OBJECT_ID('tempdb..#keys') IS NOT NULL DROP TABLE #keys;
														END;
                                                END;
                                                ELSE
                                                IF (@metricid = 114)
                                                BEGIN
                                                        IF(dbo.fn_getversionasdecimal(dbo.fn_normalizeversion(@version)) > dbo.fn_getversionasdecimal(dbo.fn_normalizeversion(N'9.')))
                                                        BEGIN
                                                                SELECT
                                                                        c.name,
                                                                        s.databasename INTO #certs
                                                                FROM dbo.databasecertificates c
                                                                JOIN dbo.sqldatabase s
                                                                        ON s.dbid = c.dbid
                                                                        AND c.snapshotid = s.snapshotid
                                                                WHERE c.snapshotid = @snapshotid
                                                                AND c.pvt_key_last_backup_date IS NULL


                                                                IF NOT EXISTS (SELECT
                                                                                1
                                                                        FROM #certs)
																		BEGIN
                                                                        SELECT
                                                                                @sevcode = @sevcodeok,
                                                                                @metricval = N'All certificate private keys were exported.';
																				END
                                                                ELSE
                                                                BEGIN

                                                                        DECLARE @foundCerts varchar(max);
                                                                        SET @foundCerts = '';
                                                                        SELECT
                                                                                @foundCerts = @foundCerts
                                                                                + name + ' - '
                                                                                + databasename
                                                                                + ', ' + CHAR(13)
                                                                                + CHAR(10)
                                                                        FROM #certs;
                                                                        SET @foundCerts = SUBSTRING(@foundCerts,1,LEN(@foundCerts)- 2);
                                                                        SET @metricval = 'There are certificate private keys that have not being exported: '+ CHAR(13)+ CHAR(10)+ @foundCerts+ '';
																		 SET @sevcode = @severity;
																END;
                                                                        INSERT INTO policyassessmentdetail (policyid,
                                                                        assessmentid,
                                                                        metricid,
                                                                        snapshotid,
                                                                        detailfinding,
                                                                        databaseid,
                                                                        objecttype,
                                                                        objectid,
                                                                        objectname)
                                                                                VALUES (@policyid, @assessmentid, @metricid, @snapshotid, @metricval, NULL, -- database ID,
                                                                                N'DB', -- object type
                                                                                NULL, @strval);
                                                                       

                                                              IF OBJECT_ID('tempdb..#certs') IS NOT NULL DROP TABLE #certs;  
                                                        END;
														
                                                END;
												ELSE
                                              IF ( @metricid = 115 )
													BEGIN

													--Check if LinkedServers Used
													SELECT servername 
													INTO #linkedsrv
													FROM linkedserver ls
													WHERE ls.snapshotid = @snapshotid

													IF NOT EXISTS (SELECT 1 FROM #linkedsrv)
														BEGIN
														--Linked servers not used

														SELECT
																		@sevcode = @sevcodeok ,
																		@metricval = N'Linked Servers are not configured.';
														END
													ELSE
														BEGIN
														--Linked servers used add warning
														DECLARE @foundLinkedServer VARCHAR(MAX);
																SET @foundLinkedServer = '';
																SELECT
																	@foundLinkedServer = @foundLinkedServer + servername
																	+ ', ' + CHAR(13) + CHAR(10)
																FROM
																	#linkedsrv;
																SET @foundLinkedServer = SUBSTRING(@foundLinkedServer, 1,
																							LEN(@foundLinkedServer) - 2);
																SET @metricval = 'Thre are linked servers configured: '
																	+ CHAR(13) + CHAR(10) + @foundLinkedServer + '';
																SET @sevcode = @severity;
														END;

													INSERT  INTO policyassessmentdetail
																		(
																		  policyid ,
																		  assessmentid ,
																		  metricid ,
																		  snapshotid ,
																		  detailfinding ,
																		  databaseid ,
																		  objecttype ,
																		  objectid ,
																		  objectname
																		)
																VALUES
																		(
																		  @policyid ,
																		  @assessmentid ,
																		  @metricid ,
																		  @snapshotid ,
																		  @metricval ,
																		  NULL , -- database ID,
																		  N'iLOGN' , -- object type
																		  NULL ,
																		  @strval
																		);

													IF OBJECT_ID('tempdb..#linkedsrv') IS NOT NULL DROP TABLE #linkedsrv;
													
													--End Check if Linked Servers Used

													END
													ELSE
													--Check if configured linked servers has security holes
													 IF ( @metricid = 116 )
													BEGIN
                                                        
														SELECT
															ls.servername ,
															lsp.principal
														INTO
															#linksrvusr
														FROM
															dbo.linkedserver ls
														JOIN dbo.linkedserverprincipal lsp
														ON  ls.serverid = lsp.serverid
															AND ls.snapshotid = lsp.snapshotid
														WHERE
															ls.snapshotid = @snapshotid
            


														IF NOT EXISTS ( SELECT
																			1
																		FROM
																			#linksrvusr )
															BEGIN
																SELECT
																	@sevcode = @sevcodeok ,
																	@metricval = N'There are no linked servers that are running as a member of sysadmin group.';
															END
														ELSE
															BEGIN

																DECLARE @foundLinkedServerUser VARCHAR(MAX);
																SET @foundLinkedServerUser = '';
																SELECT
																	@foundLinkedServerUser = @foundLinkedServerUser + servername + ' - ' + principal
																	+ ', ' + CHAR(13) + CHAR(10)
																FROM
																	#linksrvusr;
																SET @foundLinkedServerUser = SUBSTRING(@foundLinkedServerUser, 1,
																							LEN(@foundLinkedServerUser) - 2);
																SET @metricval = 'Thre are linked servers that are runnung as a member of sysadmin group: '
																	+ CHAR(13) + CHAR(10) + @foundLinkedServerUser + '';
																SET @sevcode = @severity;
																	
															END
																INSERT  INTO policyassessmentdetail
																		(
																		  policyid ,
																		  assessmentid ,
																		  metricid ,
																		  snapshotid ,
																		  detailfinding ,
																		  databaseid ,
																		  objecttype ,
																		  objectid ,
																		  objectname
																		)
																VALUES
																		(
																		  @policyid ,
																		  @assessmentid ,
																		  @metricid ,
																		  @snapshotid ,
																		  @metricval ,
																		  NULL , -- database ID,
																		  N'iLOGN' , -- object type
																		  NULL ,
																		  @strval
																		);
																
																   IF OBJECT_ID('tempdb..#linksrvusr') IS NOT NULL DROP TABLE #linksrvusr;
																  
															END;
                                                        
     
                                                
                                                --**************************** code added to handle user defined security checks, but never used (first added in version 2.5)
                                                -- User implemented
                                                ELSE
                                                IF (@metricid >= 1000)
                                                BEGIN
                                                        IF EXISTS (SELECT
                                                                        *
                                                                FROM dbo.sysobjects
                                                                WHERE name = @severityvalues
                                                                AND type = N'P')
                                                        BEGIN
                                                                SELECT
                                                                        @strval = @severityvalues;
                                                        -- this currently will accept no parameters and cannot return any list of exceptions
                                                        -- it should read the sysobjects table to find predefined output parameters and process them appropriately
                                                        --
                                                        BEGIN TRY
                                                                EXEC @intval = @strval;

                                                                IF (@intval = 0)
                                                                        SELECT
                                                                                @sevcode = @sevcodeok;
                                                                ELSE
                                                                        SELECT
                                                                                @sevcode = @severity;

                                                                SELECT
                                                                        @metricval = dbo.getyesnotext(N'U');
                                                        END TRY
                                                        BEGIN CATCH
                                                                SELECT
                                                                        @sevcode = @severity;
                                                                SELECT
                                                                        @metricval = N'Error '
                                                                        + CAST(ERROR_NUMBER() AS nvarchar)
                                                                        + N' encountered while executing custom stored procedure '
                                                                        + @severityvalues
                                                                        + N': '
                                                                        + ERROR_MESSAGE();
                                                                SELECT
                                                                        @metricthreshold = N'The security check could not be verified.';
                                                        END CATCH;

                                                                SELECT
                                                                        @metricthreshold = N'Server is vulnerable if the stored procedure '
                                                                        + @severityvalues
                                                                        + ' returns true.';
                                                        END;
                                                        ELSE
                                                                SELECT
                                                                        @metricval = dbo.getyesnotext(N'U');
                                                        SELECT
                                                                @metricthreshold = N'The stored procedure '
                                                                + @severityvalues
                                                                + ' was not found in the SQLsecure database.';
                                                END;
                                        END TRY
                                        BEGIN CATCH
                                                SELECT
                                                        @sevcode = @severity;
                                                SELECT
                                                        @metricval = N'Error '
                                                        + CAST(ERROR_NUMBER() AS nvarchar)
                                                        + N' encountered on line '
                                                        + CAST(ERROR_LINE() AS nvarchar)
                                                        + N' while processing security check: '
                                                        + ERROR_MESSAGE();
                                                SELECT
                                                        @metricthreshold = N'The security check could not be verified.';
                                        END CATCH;

                                                --****************************** done processing the security check. Now write out the valid metric data ***********************************
                                                IF (@err = 0
                                                        AND (@alertsonly = 0
                                                        OR @sevcode > 0
                                                        )
                                                        )
                                                BEGIN
                                                        -- handle unexpected null values more gracefully
                                                        SELECT
                                                                @metricval = ISNULL(@metricval,
                                                                'The selected snapshot does not contain a value. Check the snapshot status and the activity log for possible causes.');
                                                        IF (EXISTS (SELECT
                                                                        *
                                                                FROM @returnservertbl
                                                                WHERE registeredserverid = @registeredserverid)
                                                                )
                                                                INSERT INTO @outtbl (snapshotid,
                                                                registeredserverid,
                                                                connectionname,
                                                                collectiontime,
                                                                metricid,
                                                                metricname,
                                                                metrictype,
                                                                metricseveritycode,
                                                                metricseverity,
                                                                metricseverityvalues,
                                                                metricdescription,
                                                                metricreportkey,
                                                                metricreporttext,
                                                                severitycode,
                                                                severity,
                                                                currentvalue,
                                                                thresholdvalue)
                                                                        VALUES (@snapshotid, @registeredserverid, @connection, @snapshottime, @metricid, @metricname, @metrictype, @severity, dbo.getpolicyseverityname(@severity), @configuredvalues, @metricdescription, @metricreportkey, @metricreporttext, @sevcode, dbo.getpolicyseverityname(@sevcode), @metricval, @metricthreshold);
                                                        IF (@isadmin = 1)
                                                                INSERT INTO policyassessment (policyid,
                                                                assessmentid,
                                                                snapshotid,
                                                                registeredserverid,
                                                                connectionname,
                                                                collectiontime,
                                                                metricid,
                                                                metricname,
                                                                metrictype,
                                                                metricseveritycode,
                                                                metricseverity,
                                                                metricseverityvalues,
                                                                metricdescription,
                                                                metricreportkey,
                                                                metricreporttext,
                                                                severitycode,
                                                                severity,
                                                                currentvalue,
                                                                thresholdvalue)
                                                                        VALUES (@policyid, @assessmentid, @snapshotid, @registeredserverid, @connection, @snapshottime, @metricid, @metricname, @metrictype, @severity, dbo.getpolicyseverityname(@severity), @configuredvalues, @metricdescription, @metricreportkey, @metricreporttext, @sevcode, dbo.getpolicyseverityname(@sevcode), @metricval, @metricthreshold);
                                                END;

                                                IF (@debug = 1)
                                                        PRINT 'metric execution took '
                                                        + CONVERT(nvarchar, DATEDIFF(SECOND,
                                                        @runtime,
                                                        GETDATE()))
                                                        + ' seconds';

                                                FETCH NEXT FROM metriccursor INTO @metricid,
                                                @metricname, @metrictype,
                                                @metricdescription, @metricreportkey,
                                                @metricreporttext, @severity,
                                                @severityvalues;
                                        END;

                                        -- delete from the server table after processing
                                        DELETE #servertbl
                                        WHERE registeredserverid = @registeredserverid;

                                        IF (@debug = 1)
                                                PRINT 'server execution took '
                                                + CONVERT(nvarchar, DATEDIFF(SECOND,
                                                @serverruntime,
                                                GETDATE()))
                                                + ' seconds';

                                        FETCH NEXT FROM snapcursor INTO @snapshotid,
                                        @registeredserverid, @connection,
                                        @snapshottime, @status, @baseline,
                                        @collectorversion, @version, @os,
                                        @authentication, @loginauditmode,
                                        @c2audittrace, @crossdb, @proxy, @remotedac,
                                        @remoteaccess, @startupprocs, @sqlmail,
                                        @databasemail, @ole, @webassistant,
                                        @xp_cmdshell, @agentmailprofile, @hide,
                                        @agentsysadmin, @dc, @replication, @sapassword,
                                        @systemtables, @systemdrive, @adhocqueries,
                                        @weakpasswordenabled;
                                END;

                                -- drop saved temp table after all snapshot processing is done
                                DROP TABLE #sysadminstbl;

                                CLOSE snapcursor;
                                DEALLOCATE snapcursor;

                                --			-- now process the non-server related metrics
                                --			fetch first from metriccursor into @metricid, @metricname, @metrictype,
                                --												@metricdescription, @metricreportkey, @metricreporttext,
                                --												@severity, @severityvalues
                                --			while (@@fetch_status = 0)
                                --			begin
                                --				-- This sets the metric so it will not be displayed if no value is found
                                --				--     each metric should handle this situation appropriately
                                --				select @err=0, @sevcode=-1, @metricval=N'', @metricthreshold=N'', @configuredvalues=@severityvalues
                                --				-- clean up old values
                                --				select @intval=0, @intval2=0, @strval=N'', @strval2=N'', @strval3=N'', @sql=N''
                                --				delete from @tblval
                                --
                                --	--************************************************* version 2.5 security checks
                                --				-- Security Check Settings are different (Assessment Comparison)
                                --				if (@metricid = 64)
                                --				begin
                                --					select @severityvalues = N'Y'
                                --					if (N'Y' <> @severityvalues)
                                --						select @sevcode=@sevcodeok
                                --					else
                                --						select @sevcode=@severity
                                --
                                --					select @metricval = dbo.getyesnotext(@severityvalues)
                                --					select @metricthreshold = N'Servers are vulnerable if security check settings are different from the most recent ' + dbo.getassessmentstatename(@severityvalues) + N' assessment.'
                                --				end
                                --
                                --				-- Assessment Findings are different (Assessment Comparison)
                                --				else if (@metricid = 65)
                                --				begin
                                --					select @severityvalues = N'Y'
                                --					if (N'Y' <> @severityvalues)
                                --						select @sevcode=@sevcodeok
                                --					else
                                --						select @sevcode=@severity
                                --
                                --					select @metricval = dbo.getyesnotext(@severityvalues)
                                --					select @metricthreshold = N'Servers are vulnerable if assessment results are different from the most recent ' + dbo.getassessmentstatename(@severityvalues) + N' assessment.'
                                --				end
                                --
                                --				-- Policy Servers are different (Assessment Comparison)
                                --				else if (@metricid = 66)
                                --				begin
                                --					-- get the assessmentid of the selected policy for comparison
                                --					select @strval = N'declare assessmentcursor cursor for 
                                --											select top 1 assessmentid 
                                --												from assessment 
                                --												where policyid = ' + convert(nvarchar,@policyid) + N'
                                --													and assessmentstate in (' + @severityvalues + N') 
                                --												order by assessmentid desc'
                                --					exec (@strval)
                                --
                                --					open assessmentcursor
                                --					fetch next from assessmentcursor into @intval
                                --					close assessmentcursor
                                --					deallocate assessmentcursor	
                                --
                                --					-- get the list of servers for the selected policy
                                --					if (@intval is not null and @intval > 0)
                                --					begin
                                --						declare policyservercursor cursor for
                                --							select a1.registeredserverid, b1.connectionname + N' added'
                                --								from (policymember a1 left join registeredserver b1 on a1.registeredserverid = b1.registeredserverid)
                                --										left join (policymember a2 left join registeredserver b2 on a2.registeredserverid = b2.registeredserverid)
                                --											on a2.policyid = @policyid and a2.assessmentid = @intval and a1.registeredserverid = a2.registeredserverid
                                --								where a1.policyid = @policyid and a1.assessmentid = @assessmentid and a2.registeredserverid is null
                                --							union
                                --							select a1.registeredserverid, b1.connectionname + N' missing'
                                --								from (policymember a1 left join registeredserver b1 on a1.registeredserverid = b1.registeredserverid)
                                --										left join (policymember a2 left join registeredserver b2 on a2.registeredserverid = b2.registeredserverid)
                                --											on a2.policyid = @policyid and a2.assessmentid = @assessmentid and a1.registeredserverid = a2.registeredserverid
                                --								where a1.policyid = @policyid and a1.assessmentid = @intval and a2.registeredserverid is null
                                --
                                --						open policyservercursor
                                --						fetch next from policyservercursor into @intval, @strval
                                --						select @intval2 = 0
                                --						while @@fetch_status = 0
                                --						begin
                                --							if (@intval2 = 1 or len(@metricval) + len(@strval) > 1010)
                                --							begin
                                --								if @intval2 = 0
                                --									select @metricval = @metricval + N', more...',
                                --											@intval2 = 1
                                --							end
                                --							else
                                --								select @metricval = @metricval + case when len(@metricval) > 0 then N', ' else N'' end + N'''' + @strval + N''''
                                --
                                --							if (@isadmin = 1)
                                --							insert into policyassessmentdetail ( policyid,
                                --																 assessmentid,
                                --																 metricid,
                                --																 snapshotid,
                                --																 detailfinding,
                                --																 databaseid,
                                --																 objecttype,
                                --																 objectid,
                                --																 objectname )
                                --														values ( @policyid,
                                --																 @assessmentid,
                                --																 @metricid,
                                --																 @snapshotid,
                                --																 @strval,
                                --																 null, -- database ID,
                                --																 N'SVR', -- object type
                                --																 @intval,
                                --																 @strval )
                                --
                                --							fetch next from policyservercursor into @intval, @strval
                                --						end
                                --
                                --						close policyservercursor
                                --						deallocate policyservercursor	
                                --
                                --						if (len(@metricval) = 0)
                                --							select @sevcode=@sevcodeok,
                                --									@metricval = 'No servers are different on the compared assessments.'
                                --						else
                                --							select @sevcode=@severity,
                                --									@metricval = N'These servers are different: ' + @metricval
                                --					end
                                --					else
                                --					begin
                                --						select @sevcode=@severity,
                                --									@metricval = N'The selected assessment was not found and all servers are different'
                                --					end
                                --
                                --					select @metricthreshold = N'Servers are vulnerable if the policy server list is different from the most recent ' + dbo.getassessmentstatename(substring(@severityvalues,2,1)) + N' assessment.'
                                --				end
                                --
                                --				-- write out the valid metric data
                                --				if (@err = 0 and (@alertsonly = 0 or @sevcode > 0))
                                --				begin
                                --					-- handle unexpected null values more gracefully
                                --					if (exists (select * from @returnservertbl where registeredserverid = @registeredserverid))
                                --						insert into @outtbl (
                                --									snapshotid,
                                --									registeredserverid,
                                --									connectionname,
                                --									collectiontime,
                                --									metricid,
                                --									metricname,
                                --									metrictype,
                                --									metricseveritycode,
                                --									metricseverity,
                                --									metricseverityvalues,
                                --									metricdescription,
                                --									metricreportkey,
                                --									metricreporttext,
                                --									severitycode,
                                --									severity,
                                --									currentvalue,
                                --									thresholdvalue)
                                --							values (
                                --									null,
                                --									null,
                                --									N'',
                                --									null,
                                --									@metricid,
                                --									@metricname,
                                --									@metrictype,
                                --									@severity,
                                --									dbo.getpolicyseverityname(@severity),
                                --									@configuredvalues,
                                --									@metricdescription,
                                --									@metricreportkey,
                                --									@metricreporttext,
                                --									@sevcode,
                                --									dbo.getpolicyseverityname(@sevcode),
                                --									@metricval,
                                --									@metricthreshold
                                --									)
                                --					if (@isadmin = 1)
                                --					insert into policyassessment (
                                --									policyid,
                                --									assessmentid,
                                --									snapshotid,
                                --									registeredserverid,
                                --									connectionname,
                                --									collectiontime,
                                --									metricid,
                                --									metricname,
                                --									metrictype,
                                --									metricseveritycode,
                                --									metricseverity,
                                --									metricseverityvalues,
                                --									metricdescription,
                                --									metricreportkey,
                                --									metricreporttext,
                                --									severitycode,
                                --									severity,
                                --									currentvalue,
                                --									thresholdvalue)
                                --							values (
                                --									@policyid,
                                --									@assessmentid,
                                --									null,
                                --									null,
                                --									N'',
                                --									null,
                                --									@metricid,
                                --									@metricname,
                                --									@metrictype,
                                --									@severity,
                                --									dbo.getpolicyseverityname(@severity),
                                --									@configuredvalues,
                                --									@metricdescription,
                                --									@metricreportkey,
                                --									@metricreporttext,
                                --									@sevcode,
                                --									dbo.getpolicyseverityname(@sevcode),
                                --									@metricval, 
                                --									@metricthreshold
                                --									)
                                --				end
                                --
                                --				fetch next from metriccursor into @metricid, @metricname, @metrictype,
                                --													@metricdescription, @metricreportkey, @metricreporttext,
                                --													@severity, @severityvalues
                                --			end

                                CLOSE metriccursor;
                                DEALLOCATE metriccursor;

                                -- if any servers are left in the server table, there was no audit data and this is a finding
                                IF EXISTS (SELECT
                                                *
                                        FROM #servertbl)
                                BEGIN
                                        -- Audited Servers
                                        SELECT
                                                @metricid = metricid,
                                                @metricname = metricname,
                                                @metrictype = metrictype,
                                                @severity = severity,
                                                @metricdescription = metricdescription,
                                                @metricreportkey = reportkey,
                                                @metricreporttext = reporttext
                                        FROM vwpolicymetric
                                        WHERE policyid = @policyid
                                        AND assessmentid = @assessmentid
                                        AND metricid = 54
                                        AND isenabled = 1;

                                        IF (@metricid = 54)	--	only process if the metric was enabled
                                        BEGIN
                                                DECLARE servercursor CURSOR STATIC FOR
                                                SELECT
                                                        registeredserverid,
                                                        connectionname
                                                FROM registeredserver
                                                WHERE registeredserverid IN (SELECT
                                                        registeredserverid
                                                FROM #servertbl);
                                                OPEN servercursor;

                                                FETCH NEXT FROM servercursor INTO @registeredserverid,
                                                @connection;
                                                WHILE (@@fetch_status = 0)
                                                BEGIN
                                                        SELECT
                                                                @metricval = N'Server has no audit data for the selections.';

                                                        SELECT
                                                                @metricthreshold = N'Assessment may not be valid if all servers do not have audit data.';

                                                        IF (EXISTS (SELECT
                                                                        *
                                                                FROM @returnservertbl
                                                                WHERE registeredserverid = @registeredserverid)
                                                                )
                                                                INSERT INTO @outtbl (registeredserverid,
                                                                connectionname,
                                                                metricid,
                                                                metricname,
                                                                metrictype,
                                                                metricseveritycode,
                                                                metricseverity,
                                                                metricseverityvalues,
                                                                metricdescription,
                                                                metricreportkey,
                                                                metricreporttext,
                                                                severitycode,
                                                                severity,
                                                                currentvalue,
                                                                thresholdvalue)
                                                                        VALUES (@registeredserverid, @connection, @metricid, @metricname, @metrictype, @severity, dbo.getpolicyseverityname(@severity), N'', @metricdescription, @metricreportkey, @metricreporttext, @severity, dbo.getpolicyseverityname(@severity), @metricval, @metricthreshold);

                                                        IF (@isadmin = 1)
                                                                INSERT INTO policyassessment (policyid,
                                                                assessmentid,
                                                                snapshotid,
                                                                registeredserverid,
                                                                connectionname,
                                                                collectiontime,
                                                                metricid,
                                                                metricname,
                                                                metrictype,
                                                                metricseveritycode,
                                                                metricseverity,
                                                                metricseverityvalues,
                                                                metricdescription,
                                                                metricreportkey,
                                                                metricreporttext,
                                                                severitycode,
                                                                severity,
                                                                currentvalue,
                                                                thresholdvalue)
                                                                        VALUES (@policyid, @assessmentid, NULL, @registeredserverid, @connection, NULL, @metricid, @metricname, @metrictype, @severity, dbo.getpolicyseverityname(@severity), N'', @metricdescription, @metricreportkey, @metricreporttext, @severity, dbo.getpolicyseverityname(@severity), @metricval, @metricthreshold);
                                                        FETCH NEXT FROM servercursor INTO @registeredserverid,
                                                        @connection;
                                                END;

                                                CLOSE servercursor;
                                                DEALLOCATE servercursor;
                                        END;
                                END;
                        END;

                        DROP TABLE #servertbl;

                        IF (@isadmin = 1)
                        BEGIN
                                -- log the changes
                                DECLARE @msg nvarchar(128),
                                        @assessmentstate nchar(1);
                                SELECT
                                        @assessmentstate = assessmentstate,
                                        @msg = N'Refreshed assessment findings from audit data'
                                FROM assessment
                                WHERE policyid = @policyid
                                AND assessmentid = @assessmentid;
                                EXEC isp_sqlsecure_addpolicychangelog @policyid = @policyid,
                                                                      @assessmentid = @assessmentid,
                                                                      @state = @assessmentstate,
                                                                      @description = @msg;
                        END;

                COMMIT TRANSACTION;
        END;

        -- return the results and add the explanations and the updated severitycode with an explanation
        -- severity codes will have 10 added if they are findings otherwise, if ok, then they are < 10
        SELECT
                a.*,
                isexplained = ISNULL(b.isexplained, 0),
                severitycodeexplained = severitycode
                + CASE
                        WHEN severitycode > 0 AND
                                ISNULL(b.isexplained, 0) = 0 THEN 10
                        ELSE 0
                END,
                notes = ISNULL(b.notes, N'')
        FROM @outtbl a
        LEFT JOIN policyassessmentnotes b
                ON b.policyid = @policyid
                AND b.assessmentid = @assessmentid
                AND a.metricid = b.metricid
                AND a.snapshotid = b.snapshotid
        ORDER BY a.snapshotid,
        a.metricid;

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getpolicyassessment] TO [SQLSecureView];

GO
SET QUOTED_IDENTIFIER OFF;
GO
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getpolicyassessmentnotes]'))
drop procedure [dbo].[isp_sqlsecure_getpolicyassessmentnotes]
GO

CREATE procedure [dbo].[isp_sqlsecure_getpolicyassessmentnotes]
(
	@policyid int, 
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@metricid int
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with all of the servers in a policy and any assessment notes on the server or null values if none

	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	create table #tmpservers (registeredserverid int)
	insert #tmpservers
		exec [dbo].[isp_sqlsecure_getpolicymemberlist]
			@policyid = @policyid,
			@assessmentid = @assessmentid

	-- use variables to work around sql 2000 syntax limitations
	declare @assessmentdate datetime, @usebaseline bit
	select @assessmentdate=assessmentdate, @usebaseline=usebaseline 
		from assessment 
		where policyid = @policyid
			and assessmentid = @assessmentid
			and assessmentdate is not null

	select	a.connectionname, b.policyid, b.assessmentid, @metricid, a.snapshotid, isnull(d.isexplained,0) as isexplained, isnull(d.notes,N'') as notes, isnull(c.severitycode,0) as severitycode, e.metricname
	from	serversnapshot a 
				inner join assessment b on a.snapshotid in (select snapshotid from dbo.getsnapshotlist(@assessmentdate, @usebaseline))
				left join policyassessment c on b.policyid = c.policyid and b.assessmentid = c.assessmentid and c.metricid = @metricid and c.snapshotid = a.snapshotid
				left join policyassessmentnotes d on b.policyid = d.policyid and b.assessmentid = d.assessmentid and d.metricid = @metricid and d.snapshotid = a.snapshotid
				inner join metric e on e.metricid = @metricid
	where	a.registeredserverid in (select registeredserverid from #tmpservers) 
			and b.policyid = @policyid
			and b.assessmentid = @assessmentid
			and b.assessmentdate is not null

	drop table #tmpservers


GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getpolicyassessmentnotes] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getpolicymemberlist]'))
drop procedure [dbo].[isp_sqlsecure_getpolicymemberlist]
GO


CREATE procedure [dbo].[isp_sqlsecure_getpolicymemberlist]
(
	@policyid int,
	@assessmentid int = null		-- default to policy settings for backward compatibility
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with a list of all policy members of a group whether explicit or dynamic
   --			   Note this works like a function, but cannot be a function because of the constructed select for dynamic groups
   -- 	           
   -- Usages:
   --		create table #servers (registeredserverid int)
   --		insert #servers
   --			EXEC	@return_value = [dbo].[isp_sqlsecure_getpolicymemberlist]
   --				@policyid = @policyid
   --				@assessmentid = @assessmentid
   --		...
   --		select * from registeredserver where registeredserverid in (select registeredserverid from #servers)
   --		drop table #servers
   -- 	           
   -- 	    or, to prevent the insert exec limitation, it can be called as follows and will fill this temporary table if it exists     
   -- 	           
   --		create table #tmp_sqlsecure_getpolicymemberlist (registeredserverid int)
   --		EXEC	@return_value = [dbo].[isp_sqlsecure_getpolicymemberlist]
   --			@policyid = @policyid
   --			@assessmentid = @assessmentid
   --		...
   --		select * from registeredserver where registeredserverid in (select registeredserverid from #tmp_sqlsecure_getpolicymemberlist)
   --		drop table #tmp_sqlsecure_getpolicymemberlist

	declare @isdynamic bit, 
		@str nvarchar(4000) 
	declare @memberstable table (registeredserverid int)

	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))

	select @isdynamic=isdynamic, @str=rtrim(isnull(dynamicselection,N''))
		from assessment 
		where policyid = @policyid 
			and assessmentid = @assessmentid

	if (@isdynamic = 1)
	begin
		if (len(@str) = 0)
		begin
			insert into @memberstable
				select registeredserverid
					from registeredserver
					order by connectionname
		end
		else
		begin
			create table #memberstable (registeredserverid int)
			select @str = 'insert into #memberstable' + 
							' select registeredserverid' + 
							'	from registeredserver' + 
							'	where (' + @str + ')' + 
							'	order by connectionname;'
			exec (@str)
			if (object_id('tempdb..#tmp_sqlsecure_getpolicymemberlist') is not null)
			begin
				insert into #tmp_sqlsecure_getpolicymemberlist
					select registeredserverid from #memberstable
			end
			else
				select * from #memberstable

			drop table #memberstable

			return
		end
	end
	else
	begin
		insert into @memberstable
			select m.registeredserverid
				from policymember m inner join registeredserver s on m.registeredserverid = s.registeredserverid
				where policyid = @policyid
					and assessmentid = @assessmentid
				order by s.connectionname
	end

	if (object_id('tempdb..#tmp_sqlsecure_getpolicymemberlist') is not null)
	begin
		insert into #tmp_sqlsecure_getpolicymemberlist
			select registeredserverid from @memberstable
	end
	else
		select * from @memberstable

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getpolicymemberlist] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getpolicyserver]'))
drop procedure [dbo].[isp_sqlsecure_getpolicyserver]
GO

CREATE procedure [dbo].[isp_sqlsecure_getpolicyserver]
(
	@policyid int, 
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@registeredserverid int=0, 
	@usebaseline bit, 
	@rundate datetime = null
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with the server metrics of all policy members for the run date
   --				If the assessment is current then the passed parameters for usebaseline and rundate are used
   --				If it is a saved assessment then those values are pulled from the assessment table

SELECT @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
	EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
		@policyid = @policyid,
		@assessmentid = @assessmentid

SELECT @usebaseline = case when assessmentstate in (N'C', N'S') then @usebaseline else usebaseline end,
		@rundate = case when assessmentstate in (N'C', N'S') then @rundate else assessmentdate end
	FROM assessment
	WHERE
		policyid = @policyid
		and assessmentid = @assessmentid

SELECT	* 
FROM	vwserversnapshot
WHERE	snapshotid IN (SELECT snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline))
		AND registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND registeredserverid = case when @registeredserverid = 0 then registeredserverid else @registeredserverid end

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getpolicyserver] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getpolicyserverlist]'))
drop procedure [dbo].[isp_sqlsecure_getpolicyserverlist]
GO


CREATE procedure [dbo].[isp_sqlsecure_getpolicyserverlist]
(
	@policyid int, 
	@assessmentid int = null		-- default to policy settings for backward compatibility
)
AS

   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with the server name and id of all policy members

	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	create table #tmpservers (registeredserverid int)
	insert #tmpservers
		EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
			@policyid = @policyid,
			@assessmentid = @assessmentid

	select registeredserverid, connectionname from vwregisteredserver
		where registeredserverid in (select registeredserverid from #tmpservers)

	drop table #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getpolicyserverlist] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getpolicyserverprincipal]'))
drop procedure [dbo].[isp_sqlsecure_getpolicyserverprincipal]
GO

CREATE procedure [dbo].[isp_sqlsecure_getpolicyserverprincipal] 
(
	@policyid int, 
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@usebaseline bit, 
	@rundate datetime=null 
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with the server principals of all policy members for the selected run date
   --
   -- Returns:  a table with all the columns of view vwserverprincipal

SELECT @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
	EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
		@policyid = @policyid,
		@assessmentid = @assessmentid

SELECT	a.snapshotid,
		a.[name],
		a.[type],
		dbo.getserverprincipaltypename(a.[type]) as typename,
		a.[sid],
		a.principalid,
		b.connectionname,
		a.serveraccess,
		a.serverdeny,
		a.[disabled],
		a.isexpirationchecked,
		a.ispolicychecked,
		passwordstatus = [dbo].[getpasswordstatusdescription](a.passwordstatus),
		a.defaultdatabase,
		a.defaultlanguage
FROM	serverprincipal a
		INNER JOIN serversnapshot b ON a.snapshotid = b.snapshotid
WHERE	a.snapshotid IN	(
						SELECT	snapshotid
						FROM	dbo.getsnapshotlist(@rundate, @usebaseline)
						WHERE	registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
						)

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getpolicyserverprincipal] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getpolicysnapshotlist]'))
drop procedure [dbo].[isp_sqlsecure_getpolicysnapshotlist]
GO


CREATE procedure [dbo].[isp_sqlsecure_getpolicysnapshotlist]
(
	@policyid int,
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@usebaseline bit=0,
	@rundate datetime=null
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with a list of all snapshots used by the policy with the given run date and baseline options
   -- 	           

	declare @err int

	-- get the list of servers for the selected policy
	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))

	create table #tmp_sqlsecure_getpolicymemberlist (registeredserverid int)

	EXEC @err = [dbo].[isp_sqlsecure_getpolicymemberlist]
		@policyid = @policyid, 
		@assessmentid = @assessmentid

	-- return the snapshot info
	select a.snapshotid, a.registeredserverid, a.connectionname, a.starttime, a.status, a.baseline,
			a.version
	from serversnapshot a,
		dbo.getsnapshotlist(@rundate, @usebaseline) b
	where a.registeredserverid in (select registeredserverid from #tmp_sqlsecure_getpolicymemberlist)
			and a.snapshotid = b.snapshotid

	drop table #tmp_sqlsecure_getpolicymemberlist

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getpolicysnapshotlist] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getrepositorydbinfo]'))
drop procedure [dbo].[isp_sqlsecure_getrepositorydbinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_getrepositorydbinfo] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Return db info for SQLsecure database.
   -- 	           

	EXEC sp_helpdb 'SQLsecure'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getrepositorydbinfo] TO [SQLSecureView]

GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getserverpolicylist]'))
drop procedure [dbo].[isp_sqlsecure_getserverpolicylist]
GO


CREATE procedure [dbo].[isp_sqlsecure_getserverpolicylist] (@registeredserverid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with the policy name and id of all policies where the selected server is a member

	create table #tmppolicies (policyid int, assessmentid int)
	create table #tmpservers (registeredserverid int)
	declare @policyid int, @assessmentid int, @count int

	-- first add all the explicit defined policies so their lists don't have to be built individually
	insert into #tmppolicies select policyid, assessmentid from policymember where registeredserverid = @registeredserverid and assessmentid = [dbo].[getdefaultassessmentid](policyid)

	-- now get those from dynamic policies
	declare mycursor cursor static for
		select policyid, assessmentid from assessment where assessmentstate=N'S' and isdynamic=1
	open mycursor

	fetch next from mycursor into @policyid, @assessmentid
	while (@@fetch_status = 0)
	begin
		insert #tmpservers
			EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
				@policyid = @policyid,
				@assessmentid = @assessmentid
		if exists (select * from #tmpservers where registeredserverid = @registeredserverid)
			insert into #tmppolicies values (@policyid, @assessmentid)

		fetch next from mycursor into @policyid, @assessmentid
	end

	close mycursor
	deallocate mycursor

	select a.policyid, a.assessmentid, a.policyname
		from vwpolicy a, #tmppolicies b
		where 
			a.policyid = b.policyid
			and a.assessmentid = b.assessmentid

	drop table #tmppolicies
	drop table #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getserverpolicylist] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getserverprincipalpermission]'))
drop procedure [dbo].[isp_sqlsecure_getserverprincipalpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getserverprincipalpermission] (@snapshotid int, @uid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Get all explict server permissions belonging to a server login or role
   -- 	           

	select 
		objectname=case 
					when classid=101 then (select name from serverprincipal where snapshotid = @snapshotid and principalid = a.majorid) 
					when classid=105 then (select name from endpoint where snapshotid = @snapshotid and endpointid = a.majorid) 
					else 'Server' end, 
		objecttype=dbo.getclasstype(a.classid),
		permission=a.permission, 
		grantor=dbo.getserverprincipalname(a.snapshotid, a.grantor),
		grantee=dbo.getserverprincipalname(a.snapshotid, a.grantee),
		a.isgrant, 
		a.isgrantwith, 
		a.isdeny
	from 
		serverpermission a
	where
		a.snapshotid = @snapshotid and
		a.grantee = @uid

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getserverprincipalpermission] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getserveruserpermission]'))
drop procedure [dbo].[isp_sqlsecure_getserveruserpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getserveruserpermission] (@snapshotid int, @logintype nchar(1), @inputsid varbinary(85), @sqllogin nvarchar(128), @permissiontype nchar(1)=null)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get the user permissions at the server associated with a user.
	declare @dbname nvarchar(256)

	create table #tmpserverpermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1))

	declare myc100aa cursor for
			select distinct databasename from sqldatabase where snapshotid = @snapshotid
	
	open myc100aa
	fetch next from myc100aa
	into @dbname
	
	while @@fetch_status = 0
	begin
		print 'Processing database ' + @dbname

		--select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmpserverpermission%'
	
		exec isp_sqlsecure_getuserpermission @snapshotid, @logintype, @inputsid , @sqllogin, @dbname, @permissiontype

		fetch next from myc100aa
		into @dbname
	end

	close myc100aa
	deallocate myc100aa

	if (UPPER(@permissiontype) = 'X')		
		exec ('select *, b.objecttypename from #tmpserverpermission a left outer join objecttype b on a.objecttype = b.objecttype where permissiontype = ''EX''')
	else if (UPPER(@permissiontype) = 'E')
		exec ('select *, b.objecttypename from #tmpserverpermission a left outer join objecttype b on a.objecttype = b.objecttype where permissiontype = ''EF''')
	else
		exec ('select *, b.objecttypename from #tmpserverpermission a left outer join objecttype b on a.objecttype = b.objecttype')

	drop table #tmpserverpermission

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getserveruserpermission] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getsnapshotcomparison]'))
drop procedure [dbo].[isp_sqlsecure_getsnapshotcomparison]
GO


CREATE procedure [dbo].[isp_sqlsecure_getsnapshotcomparison] 
(
	@snapshotid int,
	@snapshotid2 int,
	@returnstatements bit = 0
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Compare two snapshots and return a table of comparison results by object and permission
   -- 	           
   -- 	           Parameters:
   -- 	             @snapshotid - the id of the first snapshot to compare
   -- 	             @snapshotid2 - the id of the second snapshot to compare
   --
   --

--	declare @err int, @msg nvarchar(500)
--	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
--	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
--	select @action=N'Compare', @category=N'Snapshot', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @connectionname nvarchar(400)
	select @connectionname = connectionname
		from serversnapshot where snapshotid=@snapshotid


	create table #tempdiff (
					snapshotid int,
					snapshotidold int,
					connectionname nvarchar(400),
					difftype nvarchar(400),
					difflevel nvarchar(15), 
					diffobjecttable nvarchar(400),
					diffobjecttype nvarchar(256),
					diffobjectname nvarchar(400),
					diffusername nvarchar(400),
					diffvaluename nvarchar(400),
					diffdbname nvarchar(256), 
					oldid nvarchar(400),
					newid nvarchar(400),
					oldvalue nvarchar(4000),
					newvalue nvarchar(4000))

	DECLARE @SQL nvarchar(max),
		@debug bit, @runtime datetime
	DECLARE @SQLTable table (tablename nvarchar(128), comparetype nvarchar(20), sqltext nvarchar(max))
	DECLARE @TempDbId int

	SELECT @runtime = getdate(),
		@debug = 1

	if (@debug = 0)
		set nocount on
	else
	begin
		set nocount off
		print convert(nvarchar, @runtime, 8) + ' begin execution'
	end

	-- build the sql strings to find changed values in existing records
	INSERT INTO @SQLTable
		SELECT TABLE_NAME, N'change', CAST(N'declare @snapshotid1 int, @snapshotid2 int;'
			+ N'select @snapshotid1=' + convert(nvarchar, @snapshotid) 
				 + N', @snapshotid2=' + convert(nvarchar, @snapshotid2) + N';'
			+ N'SELECT snapshotid=@snapshotid1, snapshotidold=@snapshotid2,'
				 + N'connectionname=N''' + @connectionname + N''',' 
				 + N'difftype=N''changed'','
				 + N'difflevel=' + case		-- difflevel - DB for database level objects or SV for server level objects
						when TABLE_NAME IN (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'dbid'
													AND B.TABLE_TYPE = N'BASE TABLE' 
													AND A.IS_NULLABLE = N'NO' )
							then N'N''DB'''
						else N'N''SV'''
						end + N','
				 + N'diffobjecttable=N''' + TABLE_NAME + N''','
				 + N'diffobjecttype=' + case		-- diffobjecttype - for tables with multiple types of data
						when TABLE_NAME = N'serversnapshot'
							then N'N''Server Setting'''
						when TABLE_NAME = N'serverosobject'
							then N'dbo.getserverosobjecttypename(new.objecttype)'
						when TABLE_NAME = N'serverosobjectpermission'
							then N'dbo.getserverosobjecttypename(dbo.getserverosobjecttype(new.snapshotid, new.osobjectid))'
						when TABLE_NAME = N'serverservice'
							then N'N''Service'''
						when TABLE_NAME = N'serveroswindowsaccount'
							then N'N''OS Windows '' + new.type'
						when TABLE_NAME = N'windowsaccount'
							then N'N''Windows '' + new.type'
						when TABLE_NAME = N'endpoint'
							then N'new.type'
						when TABLE_NAME = N'serverprincipal'
							then N'case when new.type <> N''S'' then N''SQL '' else N'''' end + dbo.getserverprincipaltypename(new.type)'
						when TABLE_NAME = N'serverpermission'
							then N'case when dbo.getserverprincipaltype(new.snapshotid, new.grantee) <> N''S'' then N''SQL '' else N'''' end + dbo.getserverprincipaltypename(dbo.getserverprincipaltype(new.snapshotid, new.grantee))'
						when TABLE_NAME = N'sqldatabase'
							then N'N'' Database'''		-- the extra preceeding space is intentional here for sorting purposes
						when TABLE_NAME = N'databaseprincipal'
							then N'dbo.getdatabaseprincipaltypename(dbo.getdatabaseprincipaltype(new.snapshotid, new.dbid, new.uid))'
						when TABLE_NAME LIKE (N'databaseschema%')
							then N'N''Schema'''
						when TABLE_NAME = N'databaseobject'
							then N'dbo.getobjecttypename(new.type)'
						when TABLE_NAME = N'databaseobjectpermission'
							then N'dbo.getobjecttypenamebyobjectid(new.snapshotid, new.dbid, new.classid, new.parentobjectid, new.objectid)'
						else N'N'''''
						end + N','
				 + N'diffobjectname=' + case		-- diffobjectname
						when TABLE_NAME LIKE N'serverosobject%'
							then N'dbo.getserverosobjectname(new.snapshotid, new.osobjectid)'
						when TABLE_NAME IN (N'serveroswindowsaccount', N'windowsaccount', N'endpoint', N'serverprincipal')
							then N'new.name'
						when TABLE_NAME = N'serverpermission'
							then N'new.permission'
						when TABLE_NAME = N'serverservice'
							then N'new.servicename'
						when TABLE_NAME LIKE N'databaseschema%'
							then N'dbo.getschemaname(new.snapshotid, new.dbid, new.schemaid)'
						when TABLE_NAME = N'databaseobject'
							then N'dbo.getdatabaseobjectname(new.snapshotid, new.dbid, new.classid, new.parentobjectid, new.objectid)'
						when TABLE_NAME = N'databaseobjectpermission'
							then N'dbo.getdatabaseobjectname(new.snapshotid, new.dbid, new.classid, new.parentobjectid, new.objectid)'
						when TABLE_NAME LIKE N'databaseprincipal%'
							then N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.uid)'
						else N'N'''''
						end + N','
				 + N'diffusername=' + case		-- diffusername - for permission users, owners, etc.
						when TABLE_NAME = N'serverosobjectpermission'
							then 'dbo.getserveroswindowsaccountname(new.snapshotid, new.sid)'
						when TABLE_NAME = N'endpoint'
							then 'dbo.getserverprincipalname(new.snapshotid, new.principalid)'
						when TABLE_NAME = N'serverpermission'
							then 'dbo.getserverprincipalname(new.snapshotid, new.grantee)'
						when TABLE_NAME IN (N'databaseschema', N'databaseprincipal', N'databaseprincipalpermission')
							then N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.uid)'
						when TABLE_NAME IN (N'databaseschemapermission', N'databaseobjectpermission')
							then N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.grantee)'
						else N'N'''''
						end + N','
				 + N'diffvaluename=' + case		-- diffvaluename - for column level value differences
						when COLUMN_NAME = N'authenticationmode'
							then 'N''Authentication Mode'''
						when COLUMN_NAME = N'os'
							then 'N''Windows OS'''
						when COLUMN_NAME = N'version'
							then 'N''SQL Server Version'''
						when COLUMN_NAME = N'edition'
							then 'N''SQL Server Edition'''
						when COLUMN_NAME = N'loginauditmode'
							then 'N''Login Audit Mode'''
						when COLUMN_NAME = N'enableproxyaccount'
							then 'N''Proxy Account Enabled'''
						when COLUMN_NAME = N'enablec2audittrace'
							then 'N''C2 Audit Trace Enabled'''
						when COLUMN_NAME = N'crossdbownershipchaining'
							then 'N''Cross DB Ownership Chaining Enabled'''
						when COLUMN_NAME = N'casesensitivemode'
							then 'N''Case Sensitive'''
						when COLUMN_NAME = N'allowsystemtableupdates'
							then 'N''Allow System Table Updates'''
						when COLUMN_NAME = N'remoteadminconnectionsenabled'
							then 'N''Remote DAC Enabled'''
						when COLUMN_NAME = N'remoteaccessenabled'
							then 'N''Remote Connections Allowed'''
						when COLUMN_NAME = N'scanforstartupprocsenabled'
							then 'N''Scan For Startup Procs Enabled'''
						when COLUMN_NAME = N'sqlmailxpsenabled'
							then 'N''SQL Mail Enabled'''
						when COLUMN_NAME = N'databasemailxpsenabled'
							then 'N''Database Mail Enabled'''
						when COLUMN_NAME = N'oleautomationproceduresenabled'
							then 'N''OLE Automation Enabled'''
						when COLUMN_NAME = N'webassistantproceduresenabled'
							then 'N''Web Assistant Enabled'''
						when COLUMN_NAME = N'xp_cmdshellenabled'
							then 'N''xp_cmdshell Enabled'''
						when COLUMN_NAME = N'agentmailprofile'
							then 'N''Agent Mail Profile'''
						when COLUMN_NAME = N'hideinstance'
							then 'N''Hide Instance'''
						when COLUMN_NAME = N'agentsysadminonly'
							then 'N''Agent sysadmin only'''
						when COLUMN_NAME = N'serverisdomaincontroller'
							then 'N''Server is Domain Controller'''
						when COLUMN_NAME = N'replicationenabled'
							then 'N''Replication Enabled'''
						when COLUMN_NAME = N'sapasswordempty'
							then 'N''sa Account Password Empty'''
						when COLUMN_NAME = N'disktype'
							then 'N''Disk Type'''
						when COLUMN_NAME = N'auditflags'
							then 'N''Auditing'''
						when COLUMN_NAME = N'filesystemrights'
							then 'N''Rights'''
						when COLUMN_NAME = N'accesstype'
							then 'N''Access Type'''
						when COLUMN_NAME = N'isinherited'
							then 'N''Inherited'''
						when COLUMN_NAME = N'isadminendpoint'
							then 'N''Is Admin Endpoint'''
						when COLUMN_NAME = N'ipaddress'
							then 'N''IP Address'''
						when COLUMN_NAME = N'dynamicport'
							then 'N''Dynamic Port'''
						when COLUMN_NAME = N'port'
							then 'N''TCP Port'''
						when COLUMN_NAME = N'displayname'
							then 'N''Display Name'''
						when COLUMN_NAME = N'servicepath'
							then 'N''Path to executable'''
						when COLUMN_NAME = N'startuptype'
							then 'N''Startup Type'''
						when COLUMN_NAME = N'loginname'
							then 'N''Login Name'''
						when COLUMN_NAME = N'serveraccess'
							then 'N''Server Access'''
						when COLUMN_NAME = N'serverdeny'
							then 'N''Server Deny'''
						when COLUMN_NAME = N'isexpirationchecked'
							then 'N''Expiration Checked'''
						when COLUMN_NAME = N'ispolicychecked'
							then 'N''Policy Checked'''
						when COLUMN_NAME = N'ispasswordnull'
							then 'N''Password Null'''
						when COLUMN_NAME = N'defaultdatabase'
							then 'N''Default Database'''
						when COLUMN_NAME = N'defaultlanguage'
							then 'N''Default Language'''
						when COLUMN_NAME = N'guestenabled'
							then 'N''Is Guest Enabled'''
						when COLUMN_NAME = N'dbfilename'
							then 'N''File Name'''
						when COLUMN_NAME = N'replicationcategory'
							then 'N''Replication Category'''
						when COLUMN_NAME = N'isalias'
							then 'N''Is Aliased'''
						when COLUMN_NAME = N'altuid'
							then 'N''Aliased To'''
						when COLUMN_NAME = N'hasaccess'
							then 'N''Has Access'''
						when COLUMN_NAME = N'defaultschemaname'
							then 'N''Default Schema'''
						when COLUMN_NAME = N'isgrant'
							then 'N''Grant'''
						when COLUMN_NAME = N'isgrantwith'
							then 'N''With Grant'''
						when COLUMN_NAME = N'isdeny'
							then 'N''Deny'''
						when COLUMN_NAME = N'runatstartup'
							then 'N''Run At Startup'''
						when COLUMN_NAME = N'isencrypted'
							then 'N''Encrypted'''
						when COLUMN_NAME = N'userdefined'
							then 'N''User Defined'''
						else N'''' + upper(left(COLUMN_NAME,1)) + substring(COLUMN_NAME,2,128) + N''''
						end + N','
				 + N'diffdbname=' + case		-- diffdbname - for database level objects
						when TABLE_NAME IN (select A.TABLE_NAME
											from INFORMATION_SCHEMA.COLUMNS A
												INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
											where A.COLUMN_NAME = N'dbid'
												AND B.TABLE_TYPE = N'BASE TABLE' 
												AND A.IS_NULLABLE = N'NO' )
							then N'dbo.getdatabasename(new.snapshotid, new.dbid)'
						else N''''''
						end + N','
				 + N'oldid=' + case		-- oldid - when the changed value is an id, the original value goes here and the related name is looked up for the value
						when COLUMN_NAME IN (N'schemaid', N'grantor', N'usersid', N'uid')
							then N'old.[' + COLUMN_NAME + ']'
						when TABLE_NAME = N'databaseobject' AND COLUMN_NAME = N'type'
							then N'old.[' + COLUMN_NAME + ']'
						else N'null'
						end + N','
				 + N'newid=' + case		-- newid - when the changed value is an id, the new value goes here and the related name is looked up for the value
						when COLUMN_NAME IN (N'schemaid', N'grantor', N'usersid', N'uid')
							then N'new.[' + COLUMN_NAME + ']'
						when TABLE_NAME = N'databaseobject' AND COLUMN_NAME = N'type'
							then N'new.[' + COLUMN_NAME + ']'
						else N'null'
						end + N','
				 + N'oldvalue=' + case		-- oldvalue - the original value or name associated with the original id
						when TABLE_NAME = N'serverosobjectpermission'
							then N'case when old.auditflags is null then dbo.getaccesstypename(old.accesstype) else N''Audit '' + dbo.getauditflagsnames(old.auditflags) end + N'' '' 
										+ case when dbo.getserverosobjecttype(old.snapshotid, old.osobjectid) = N''Reg'' then dbo.getregistryrightsnames(old.filesystemrights) else dbo.getfilesystemrightsnames(old.filesystemrights) end'
						when COLUMN_NAME = N'schemaid'
							then N'dbo.getschemaname(old.snapshotid, old.dbid, old.schemaid)'
						when TABLE_NAME = N'databaseobject' AND COLUMN_NAME = N'type'
							then N'dbo.getobjecttypename(old.type)'
						when TABLE_NAME = N'serverpermission' AND COLUMN_NAME = N'grantor'		-- put before general grantor check
							then N'dbo.getserverprincipalname(old.snapshotid, old.' + COLUMN_NAME + N')'
						when COLUMN_NAME IN (N'grantee', N'grantor', N'uid')
							then N'dbo.getdatabaseprincipalname(old.snapshotid, old.dbid, old.' + COLUMN_NAME + N')'
						when COLUMN_NAME = N'owner'
							then case when TABLE_NAME = N'sqldatabase'
									then N'old.[' + COLUMN_NAME + ']'
									else N'dbo.getdatabaseprincipalname(old.snapshotid, old.dbid, old.' + COLUMN_NAME + N')'
									end
						when COLUMN_NAME IN (N'ownersid')
							then N'dbo.getserverprincipalname(old.snapshotid, old.' + COLUMN_NAME + N')'
						else N'old.[' + COLUMN_NAME + ']'
						end + N','
				 + N'newvalue=' + case		-- newvalue - the changed value or name associated with a changed id
						when TABLE_NAME = N'serverosobjectpermission'
							then N'case when new.auditflags is null then dbo.getaccesstypename(new.accesstype) else N''Audit '' + dbo.getauditflagsnames(new.auditflags) end + N'' '' 
										+ case when dbo.getserverosobjecttype(new.snapshotid, new.osobjectid) = N''Reg'' then dbo.getregistryrightsnames(new.filesystemrights) else dbo.getfilesystemrightsnames(new.filesystemrights) end'
						when COLUMN_NAME = N'schemaid'
							then N'dbo.getschemaname(new.snapshotid, new.dbid, new.schemaid)'
						when TABLE_NAME = N'databaseobject' AND COLUMN_NAME = N'type'
							then N'dbo.getobjecttypename(new.type)'
						when TABLE_NAME = N'serverpermission' AND COLUMN_NAME = N'grantor'		-- put before general grantor check
							then N'dbo.getserverprincipalname(new.snapshotid, new.' + COLUMN_NAME + N')'
						when COLUMN_NAME IN (N'grantee', N'grantor', N'uid')
							then N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.' + COLUMN_NAME + N')'
						when COLUMN_NAME = N'owner'
							then case when TABLE_NAME = N'sqldatabase'
									then N'new.[' + COLUMN_NAME + ']'
									else N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.' + COLUMN_NAME + N')'
									end
						when COLUMN_NAME IN (N'ownersid')
							then N'dbo.getserverprincipalname(new.snapshotid, new.' + COLUMN_NAME + N')'
						else N'new.[' + COLUMN_NAME + ']'
						end
		+ N' INTO #tempdiff_temp'
		+ N' FROM ' + TABLE_SCHEMA + N'.[' + TABLE_NAME + N'] (NOLOCK) new,' + TABLE_SCHEMA + N'.[' + TABLE_NAME + N'] (NOLOCK) old'
		+ N' WHERE new.snapshotid = @snapshotid1'--+ convert(varchar, @snapshotid)
				 + N' and old.snapshotid = @snapshotid2'--+ convert(varchar, @snapshotid2)
				 + case when TABLE_NAME = N'serverosobject'
							then N' and new.objectname = old.objectname'
						else N''
						end
				 + case when TABLE_NAME = N'serverosobjectpermission'
							then N' and dbo.getserverosobjectname(new.snapshotid, new.osobjectid) = dbo.getserverosobjectname(old.snapshotid, old.osobjectid)'
							   + N' and dbo.getserveroswindowsaccountname(new.snapshotid, new.sid) = dbo.getserveroswindowsaccountname(old.snapshotid, old.sid)'
							   + N' and isnull(new.[auditflags],0) = isnull(old.[auditflags],0)'
							   + N' and new.[isinherited] = old.[isinherited]'
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
											from INFORMATION_SCHEMA.COLUMNS A
												INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
											where A.COLUMN_NAME = N'name'
												AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.name = old.name'
						else N''
						end
				 + case when TABLE_NAME = N'serverprotocol'
							then N' and new.protocolname = old.protocolname'
						else N''
						end
				 + case when TABLE_NAME = N'serverservice'
							then N' and new.servicetype = old.servicetype and new.servicename = old.servicename'
						else N''
						end
				 + case when TABLE_NAME = N'serverpermission'
							then N' and new.majorid = old.majorid and new.minorid = old.minorid'
						else N''
						end
				 + case when TABLE_NAME = N'sqldatabase'
							then N' and new.databasename = old.databasename'
						else case when TABLE_NAME in (select A.TABLE_NAME
														from INFORMATION_SCHEMA.COLUMNS A
															INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
														where A.COLUMN_NAME = N'dbid'
															AND B.TABLE_TYPE = N'BASE TABLE' 
															AND A.IS_NULLABLE = N'NO' )
--										NOTE: BE VERY CAREFUL WHEN CHANGING THIS IT HAS BEEN CREATED IN THIS FORMAT SPECIFICALLY FOR PERFORMANCE REASONS
--												databases must be compared by name and calling functions in the where clause causes bad performance and works much better with the subselects
--										then N' and dbo.getdatabasename(new.snapshotid, new.dbid) = dbo.getdatabasename(old.snapshotid, old.dbid) and new.dbid <> 2'
										then N'	and (select databasename from sqldatabase (NOLOCK) where snapshotid = new.snapshotid and dbid = new.dbid) = (select databasename from sqldatabase (NOLOCK) where snapshotid = old.snapshotid and dbid = old.dbid)'
												+ N' and new.dbid <> 2 and old.dbid <> 2'
									else N''
									end
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'type'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N'	and new.type = old.type'
						else N''
						end
				 + case when TABLE_NAME = N'databaseprincipalpermission'
							then N' and dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.uid) = dbo.getdatabaseprincipalname(old.snapshotid, old.dbid, old.uid)'
						else N''
						end
				 + case when TABLE_NAME = N'databaseschema'
							then N' and new.schemaname = old.schemaname'
						else case when TABLE_NAME in (select A.TABLE_NAME
														from INFORMATION_SCHEMA.COLUMNS A
															INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
														where A.COLUMN_NAME = N'schemaid'
															AND B.TABLE_TYPE = N'BASE TABLE' )
--										NOTE: BE VERY CAREFUL WHEN CHANGING THIS IT HAS BEEN CREATED IN THIS FORMAT SPECIFICALLY FOR PERFORMANCE REASONS
--												schemas are compared by id for now
										then N' and ((new.schemaid is null and old.schemaid is null) 
														or new.schemaid = old.schemaid)'
--										then N' and 1 = (select count(*) from databaseschema a, databaseschema b 
--															where a.snapshotid = new.snapshotid 
--																and a.dbid = new.dbid 
--																and a.schemaid = new.schemaid 
--																and b.snapshotid = old.snapshotid 
--																and b.dbid = old.dbid 
--																and b.schemaid = old.schemaid 
--																and a.schemaname = b.schemaname)'
									else N''
									end
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
											from INFORMATION_SCHEMA.COLUMNS A
												INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
											where A.COLUMN_NAME = N'classid'
												AND B.TABLE_TYPE = N'BASE TABLE'  )
							then N' and new.classid = old.classid'
						else N''
						end
				 + case when TABLE_NAME = N'databaseobject'
							then N' and new.parentobjectid = old.parentobjectid'
						else N''
						end
				 + case when TABLE_NAME = N'databaseobjectpermission'
							then N' 		and 1 = (select count(*) 
														from databaseobject (NOLOCK) a, databaseobject (NOLOCK) b 
														where a.snapshotid = new.snapshotid 
															and a.dbid = new.dbid 
															and a.classid = new.classid 
															and a.parentobjectid = new.parentobjectid
																and a.objectid = new.objectid
															and b.snapshotid = old.snapshotid 
															and b.dbid = old.dbid 
															and b.classid = old.classid 
															and b.parentobjectid = old.parentobjectid
																and b.objectid = old.objectid
															and a.name = b.name) '
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'permission'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.permission = old.permission'
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'grantee'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.grantee = old.grantee'
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'grantor'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.grantor = old.grantor'
						else N''
						end
				 + case when COLUMN_NAME = N'runatstartup'
							then N' and new.dbid = 1'
						else N''
						end
				 + case when COLUMN_NAME in (N'runatstartup', N'isencrypted')
							then N' and new.type = N''P'''
						else N''
						end
				 + case when COLUMN_NAME = N'userdefined'
							then N' and new.type <> N''iCO'' and old.type <> N''iCO'''
						else N''
						end
				 + N' and new.[' + COLUMN_NAME + N'] <> old.[' + COLUMN_NAME + N']'
				 + N'; '-- print ''' + TABLE_NAME + '.' + COLUMN_NAME + ''';'
				 + N' INSERT INTO #tempdiff SELECT * FROM #tempdiff_temp; DROP TABLE #tempdiff_temp;'

		AS NVARCHAR(MAX)) 
	FROM INFORMATION_SCHEMA.COLUMNS  
	WHERE TABLE_NAME in (select A.TABLE_NAME from INFORMATION_SCHEMA.TABLES A where A.TABLE_NAME = TABLE_NAME and A.TABLE_TYPE = N'BASE TABLE')
		AND TABLE_NAME IN (select A.TABLE_NAME
								from INFORMATION_SCHEMA.COLUMNS A
									INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
								where A.COLUMN_NAME = N'snapshotid'
									AND B.TABLE_TYPE = N'BASE TABLE' )
		AND (TABLE_NAME NOT IN (N'serverosobjectpermission', N'serveroswindowsaccount', N'windowsaccount') OR COLUMN_NAME <> N'sid')
		AND (TABLE_NAME <> N'sqldatabase' OR COLUMN_NAME <> N'status')
		AND (TABLE_NAME NOT IN (N'databaseprincipal',N'databaseprincipalpermission') OR COLUMN_NAME <> N'uid')
		AND (TABLE_NAME NOT LIKE (N'databaseschema%') OR COLUMN_NAME <> N'schemaid')
		AND TABLE_NAME NOT LIKE (N'%member')
		AND TABLE_NAME NOT LIKE (N'policy%')
		AND TABLE_NAME NOT LIKE (N'serverfilterrule%')
		AND TABLE_NAME NOT IN (N'snapshothistory', N'ancillarywindowsgroup')
		AND COLUMN_NAME not in (N'connectionname', N'servername', N'instancename', N'starttime', N'endtime', N'automated', 
								N'numobject',N'numpermission', N'numlogin', N'numwindowsgroupmember', 
								N'baseline', N'baselinecomment', N'snapshotcomment', N'collectorversion', N'hashkey',
								N'snapshotid', N'registeredserverid', N'osobjectid', N'endpointid', N'protocolname', N'servicetype', N'servicename',
								N'auditflags', N'accesstype', N'isinherited', N'principalid', N'majorid', N'minorid',
								N'dbid', N'classid', N'parentobjectid', N'objectid', N'schemaid', N'permission', N'grantee', N'grantor', 
								N'type', N'name', N'isrevoke', N'isaudited')
		AND DATA_TYPE <>  N'nvarchar(max)'

		--AND TABLE_NAME LIKE 'sql%'	--	restriction for testing on certain tables


	-- build the sql strings to find records in the compare snapshot (snapshotid2) that were not in the current snapshot (@snapshotid)
	INSERT INTO @SQLTable
		SELECT TABLE_NAME, N'missing', CAST(N'declare @snapshotid1 int, @snapshotid2 int;'
			+ N'select @snapshotid1=' + convert(nvarchar, @snapshotid) 
				 + N', @snapshotid2=' + convert(nvarchar, @snapshotid2) + N';'
			+ N'SELECT snapshotid=@snapshotid1, snapshotidold=@snapshotid2,'
				 + N'connectionname=N''' + @connectionname + N''',' 
				 + N'difftype=N''missing'','
				 + N'difflevel=' + case		-- difflevel - DB for database level objects or SV for server level objects
						when TABLE_NAME IN (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'dbid'
													AND B.TABLE_TYPE = N'BASE TABLE' 
													AND A.IS_NULLABLE = N'NO' )
							then N'N''DB'''
						else N'N''SV'''
						end + N','
				 + N'diffobjecttable=N''' + TABLE_NAME + N''','
				 + N'diffobjecttype=' + case		-- diffobjecttype - for tables with multiple types of data
						when TABLE_NAME = N'serverosobject'
							then N'dbo.getserverosobjecttypename(new.objecttype)'
						when TABLE_NAME = N'serverosobjectpermission'
							then N'dbo.getserverosobjecttypename(dbo.getserverosobjecttype(new.snapshotid, new.osobjectid))'
						when TABLE_NAME = N'serveroswindowsaccount'
							then N'N''OS Windows '' + new.type'
						when TABLE_NAME = N'windowsaccount'
							then N'N''Windows '' + new.type'
						when TABLE_NAME = N'endpoint'
							then N'new.type'
						when TABLE_NAME = N'serverservice'
							then N'''Service'''
						when TABLE_NAME = N'endpoint'
							then N'''Endpoint'''
						when TABLE_NAME = N'serverprincipal'
							then N'case when new.type <> N''S'' then N''SQL '' else N'''' end + dbo.getserverprincipaltypename(new.type)'
						when TABLE_NAME = N'serverpermission'
							then N'case when dbo.getserverprincipaltype(new.snapshotid, new.grantee) <> N''S'' then N''SQL '' else N'''' end + dbo.getserverprincipaltypename(dbo.getserverprincipaltype(new.snapshotid, new.grantee))'
						when TABLE_NAME = N'sqldatabase'
							then N''' Database'''
						when TABLE_NAME = N'databaseprincipal'
							then N'dbo.getdatabaseprincipaltypename(new.type)'
						when TABLE_NAME LIKE (N'databaseschema%')
							then N'''Schema'''
						when TABLE_NAME = N'databaseobject'
							then N'dbo.getobjecttypename(new.type)'
						when TABLE_NAME = N'databaseobjectpermission'
							then N'dbo.getobjecttypenamebyobjectid(new.snapshotid, new.dbid, new.classid, new.parentobjectid, new.objectid)'
						else N''''''
						end + N','
				 + N'diffobjectname=' + case		-- diffobjectname
						when TABLE_NAME LIKE N'serverosobject%'
							then N'dbo.getserverosobjectname(new.snapshotid, new.osobjectid)'
						when TABLE_NAME IN (N'serveroswindowsaccount', N'windowsaccount', N'endpoint', N'serverprincipal')
							then N'new.name'
						when TABLE_NAME = N'serverservice'
							then N'new.servicename'
						when TABLE_NAME = N'serverpermission'
							then N'new.permission'
						when TABLE_NAME LIKE N'databaseschema%'
							then N'dbo.getschemaname(new.snapshotid, new.dbid, new.schemaid)'
						when TABLE_NAME IN (N'databaseobject', N'databaseobjectpermission')
							then N'dbo.getdatabaseobjectname(new.snapshotid, new.dbid, new.classid, new.parentobjectid, new.objectid)'
						when TABLE_NAME LIKE N'databaseprincipal%'
							then N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.uid)'
						else N''''''
						end + N','
				 + N'diffusername=' + case		-- diffusername - for permission users, owners, etc.
						when TABLE_NAME = N'serverosobjectpermission'
							then N'dbo.getserveroswindowsaccountname(new.snapshotid, new.sid)'
						when TABLE_NAME = N'endpoint'
							then N'dbo.getserverprincipalname(new.snapshotid, new.principalid)'
						when TABLE_NAME = N'serverpermission'
							then N'dbo.getserverprincipalname(new.snapshotid, new.grantee)'
						when TABLE_NAME IN (N'databaseschema', N'databaseprincipal', N'databaseprincipalpermission')
							then N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.uid)'
						when TABLE_NAME IN (N'databaseschemapermission', N'databaseobjectpermission')
							then N'dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.grantee)'
						else N''''''
						end + N','
				 + N'diffvaluename=' + case		-- diffvaluename
						when TABLE_NAME LIKE N'%permission'
							then N'N''Permission'''
						when TABLE_NAME = N'serverservice'
							then N'N''Service'''
						when TABLE_NAME = N'serverprotocol'
							then N'N''Protocol'''
						when TABLE_NAME = N'serverprincipal'
							then N'case when new.type <> N''S'' then N''SQL '' else N'''' end + dbo.getserverprincipaltypename(new.type)'
						when TABLE_NAME = N'endpoint'
							then N'N''Endpoint'''
						when TABLE_NAME = N'serveroswindowsaccount'
							then N'N''OS Windows '' + new.type'
						when TABLE_NAME = N'windowsaccount'
							then N'N''Windows '' + new.type'
						when TABLE_NAME = N'serverosobject'
							then N'dbo.getserverosobjecttypename(new.objecttype)'
						when TABLE_NAME = N'sqldatabase'
							then N'N''Database'''
						when TABLE_NAME = N'databaseprincipal'
							then N'dbo.getdatabaseprincipaltypename(new.type)'
						when TABLE_NAME = N'databaseschema'
							then N'N''Schema'''
						when TABLE_NAME = N'databaseobject'
							then N'dbo.getobjecttypename(new.type)'
						else N''''''
						end + N','
				 + N'diffdbname=' + case		-- diffdbname - for database level objects
						when TABLE_NAME IN (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'dbid'
													AND B.TABLE_TYPE = N'BASE TABLE' 
													AND A.IS_NULLABLE = N'NO' )
							then N'dbo.getdatabasename(new.snapshotid, new.dbid)'
						else N''''''
						end + N','
				 + N'oldid=' + case 	-- oldid	oldids will always be the same as newids or null values will be fixed after running the queries
						when TABLE_NAME LIKE (N'serverosobject%')
							then N'new.osobjectid'
						when TABLE_NAME = N'serverprincipal'
							then N'new.principalid'
						when TABLE_NAME = N'endpoint'
							then N'new.endpointid'
						when TABLE_NAME = N'sqldatabase'
							then N'new.dbid'
						when TABLE_NAME LIKE (N'databaseprincipal%')
							then N'new.uid'
						when TABLE_NAME LIKE (N'databaseschema%')
							then N'new.schemaid'
						when TABLE_NAME LIKE (N'databaseobject%')
							then N'new.objectid'
						else N'null'
						end + N','
				 + N'newid=' + case 	-- newid	null values will be fixed after running the queries
						when TABLE_NAME LIKE (N'serverosobject%')
							then N'new.osobjectid'
						when TABLE_NAME = N'serverprincipal'
							then N'new.principalid'
						when TABLE_NAME = N'endpoint'
							then N'new.endpointid'
						when TABLE_NAME = N'sqldatabase'
							then N'new.dbid'
						when TABLE_NAME LIKE (N'databaseprincipal%')
							then N'new.uid'
						when TABLE_NAME LIKE (N'databaseschema%')
							then N'new.schemaid'
						when TABLE_NAME LIKE (N'databaseobject%')
							then N'new.objectid'
						else N'null'
						end + N','
				 + N'oldvalue=null,'	-- oldvalue - the original value or name associated with the original id
				 + N'newvalue=' + case		-- newvalue - the changed value or name associated with a changed id
						when TABLE_NAME = N'serverosobjectpermission'
							then N'case when new.auditflags is null then dbo.getaccesstypename(new.accesstype) else N''Audit '' + dbo.getauditflagsnames(new.auditflags) end + N'' '' 
										+ case when dbo.getserverosobjecttype(new.snapshotid, new.osobjectid) = N''Reg'' then dbo.getregistryrightsnames(new.filesystemrights) else dbo.getfilesystemrightsnames(new.filesystemrights) end'
						when TABLE_NAME = N'databasepermission'
							then N'case when new.isgrantwith = 1 then N''With Grant'' else case when new.isgrant = 1 then N''Grant'' else case when new.isdeny = 1 then N''Deny'' else N'' end end end'
						else N'null'
						end
		+ N' INTO #tempdiff_temp'
		+ N' FROM ' + case when TABLE_NAME = N'databaseobjectpermission' 
								then N'(' + TABLE_SCHEMA + N'.[' + TABLE_NAME + N'] (NOLOCK) new
											inner join ' + TABLE_SCHEMA + N'.[databaseobject] (NOLOCK) newobj 
												on (new.snapshotid = newobj.snapshotid
													and newobj.snapshotid = @snapshotid1
													and new.dbid = newobj.dbid
													and newobj.dbid <> 2 
													and new.classid = newobj.classid
													and new.parentobjectid = newobj.parentobjectid
													and new.objectid = newobj.objectid))'
									+ N' left join (' + TABLE_SCHEMA + N'.[' + TABLE_NAME + N'] (NOLOCK) old 
														inner join ' + TABLE_SCHEMA + N'.[databaseobject] (NOLOCK) oldobj 
															on (old.snapshotid = oldobj.snapshotid
																and oldobj.snapshotid = @snapshotid2
																and old.dbid = oldobj.dbid
																and old.classid = oldobj.classid
																and old.parentobjectid = oldobj.parentobjectid
																and old.objectid = oldobj.objectid))'
							else 
								+ TABLE_SCHEMA + N'.[' + TABLE_NAME + N'] (NOLOCK) new '
								+ N' left join ' + TABLE_SCHEMA + N'.[' + TABLE_NAME + N'] (NOLOCK) old'
							end

				+ N' on (old.snapshotid = @snapshotid2'
				 + case when TABLE_NAME = N'serverosobject'
							then N' and new.objectname = old.objectname'
						else N''
						end
				 + case when TABLE_NAME = N'serverosobjectpermission'
							then N' and dbo.getserverosobjectname(new.snapshotid, new.osobjectid) = dbo.getserverosobjectname(old.snapshotid, old.osobjectid)'
							   + N' and dbo.getserveroswindowsaccountname(new.snapshotid, new.sid) = dbo.getserveroswindowsaccountname(old.snapshotid, old.sid)'
							   + N' and isnull(new.[auditflags],0) = isnull(old.[auditflags],0)'
							   + N' and isnull(new.[accesstype],0) = isnull(old.[accesstype],0)'
							   + N' and new.[isinherited] = old.[isinherited]'
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'name'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.name = old.name'
						else N''
						end
				 + case when TABLE_NAME = N'serverprotocol'
							then N' and new.protocolname = old.protocolname'
						else N''
						end
				 + case when TABLE_NAME = N'serverservice'
							then N' and new.servicetype = old.servicetype and new.servicename = old.servicename'
						else N''
						end
				 + case when TABLE_NAME = N'serverpermission'
							then N' and new.majorid = old.majorid and new.minorid = old.minorid'
						else N''
						end
				 + case when TABLE_NAME = N'sqldatabase'
							then N' and new.databasename = old.databasename'
						else case when TABLE_NAME in (select A.TABLE_NAME
														from INFORMATION_SCHEMA.COLUMNS A
															INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
														where A.COLUMN_NAME = N'dbid'
															AND B.TABLE_TYPE = N'BASE TABLE' 
															AND A.IS_NULLABLE = N'NO' )
--										NOTE: BE VERY CAREFUL WHEN CHANGING THIS IT HAS BEEN CREATED IN THIS FORMAT SPECIFICALLY FOR PERFORMANCE REASONS
--												databases must be compared by name and calling functions in the where clause causes bad performance and works much better with the subselects
--										then N' and dbo.getdatabasename(new.snapshotid, new.dbid) = dbo.getdatabasename(old.snapshotid, old.dbid) and new.dbid <> 2'
										then N'	and (select databasename from sqldatabase (NOLOCK) where snapshotid = new.snapshotid and dbid = new.dbid) = (select databasename from sqldatabase (NOLOCK) where snapshotid = old.snapshotid and dbid = old.dbid)'
									else N''
									end
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'type'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N'	and new.type = old.type'
						else N''
						end
				 + case when TABLE_NAME = N'databaseprincipalpermission'
							then N' and dbo.getdatabaseprincipalname(new.snapshotid, new.dbid, new.uid) = dbo.getdatabaseprincipalname(old.snapshotid, old.dbid, old.uid)'
						else N''
						end
				 + case when TABLE_NAME = N'databaseschema'
							then N' and new.schemaname = old.schemaname'
						else case when TABLE_NAME in (select A.TABLE_NAME
														from INFORMATION_SCHEMA.COLUMNS A
															INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
														where A.COLUMN_NAME = N'schemaid'
															AND B.TABLE_TYPE = N'BASE TABLE' )
--										NOTE: BE VERY CAREFUL WHEN CHANGING THIS IT HAS BEEN CREATED IN THIS FORMAT SPECIFICALLY FOR PERFORMANCE REASONS
--												schemas are compared by id for now
										then N' and ((new.schemaid is null and old.schemaid is null) 
														or new.schemaid = old.schemaid)'
--										then N' and ((new.schemaid is null and old.schemaid is null) 
--														or 1 = (select count(*) from databaseschema a, databaseschema b 
--																	where a.snapshotid = new.snapshotid 
--																		and a.dbid = new.dbid 
--																		and a.schemaid = new.schemaid 
--																		and b.snapshotid = old.snapshotid 
--																		and b.dbid = old.dbid 
--																		and b.schemaid = old.schemaid 
--																		and a.schemaname = b.schemaname))'
									else N''
									end
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'classid'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.classid = old.classid'
						else N''
						end
				 + case when TABLE_NAME = N'databaseobject'
							then N' and new.parentobjectid = old.parentobjectid'
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'permission'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.permission = old.permission'
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'grantee'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.grantee = old.grantee'
						else N''
						end
				 + case when TABLE_NAME in (select A.TABLE_NAME
												from INFORMATION_SCHEMA.COLUMNS A
													INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
												where A.COLUMN_NAME = N'grantor'
													AND B.TABLE_TYPE = N'BASE TABLE' )
							then N' and new.grantor = old.grantor'
						else N''
						end
				 + N')'
		+ N' WHERE new.snapshotid = @snapshotid1'
		+ case when TABLE_NAME in (select A.TABLE_NAME
										from INFORMATION_SCHEMA.COLUMNS A
											INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
										where A.COLUMN_NAME = N'dbid'
											AND B.TABLE_TYPE = N'BASE TABLE' 
											AND A.IS_NULLABLE = N'NO' )
					then N'	and new.dbid <> 2'
				else N''
				end
				 + N' and old.snapshotid is null'
				 + N';'
				 + N' INSERT INTO #tempdiff SELECT * FROM #tempdiff_temp; DROP TABLE #tempdiff_temp;'
		AS NVARCHAR(MAX)) 
	FROM INFORMATION_SCHEMA.TABLES 
	WHERE   
			TABLE_NAME IN (select A.TABLE_NAME
							from INFORMATION_SCHEMA.COLUMNS A
								INNER JOIN INFORMATION_SCHEMA.TABLES B ON A.TABLE_NAME = B.TABLE_NAME 
							where A.COLUMN_NAME = N'snapshotid'
								AND B.TABLE_TYPE = N'BASE TABLE' )
		AND TABLE_NAME NOT LIKE (N'%member')
		AND TABLE_NAME NOT LIKE (N'policy%')
		AND TABLE_NAME NOT LIKE (N'serverfilterrule%')
		AND TABLE_NAME NOT IN (N'snapshothistory', N'ancillarywindowsgroup')

		--AND TABLE_NAME LIKE ('database%')

	-- modify the sql strings to find records in the current snapshot (@snapshotid) that were not in the compare snapshot (snapshotid2)
	INSERT INTO @SQLTable
		SELECT tablename, N'new', sqltext
			FROM @SQLTable
			WHERE comparetype = N'missing'

	UPDATE @SQLTable SET sqltext = replace(sqltext, N'''missing''', N'''new''') WHERE comparetype = N'new'
	UPDATE @SQLTable SET sqltext = replace(sqltext, N'.snapshotid = @snapshotid1', N'.snapshotid = @snapshotid3') WHERE comparetype = N'new'
	UPDATE @SQLTable SET sqltext = replace(sqltext, N'.snapshotid = @snapshotid2', N'.snapshotid = @snapshotid1') WHERE comparetype = N'new'
	UPDATE @SQLTable SET sqltext = replace(sqltext, N'.snapshotid = @snapshotid3', N'.snapshotid = @snapshotid2') WHERE comparetype = N'new'

	declare sqlcursor cursor for
		select sqltext from @SQLTable order by tablename, comparetype

	open sqlcursor
	fetch next from sqlcursor into @SQL
	while (@@fetch_status = 0)
	begin
		if (@debug = 1)
		begin
			select @runtime = getdate()
			print convert(nvarchar, @runtime, 8) + ' executing:' + @SQL
		end

		exec (@SQL)

		if (@debug = 1)
			print 'execution took ' + convert (nvarchar, datediff(second, @runtime, getdate())) + ' seconds'

		fetch next from sqlcursor into @SQL
	end

	close sqlcursor
	deallocate sqlcursor

	-- fix the values for new and missing records here to only return the matching columns for performance
	update #tempdiff set newid = null, newvalue = null where difftype = N'missing'
	update #tempdiff set oldid = null, oldvalue = null where difftype = N'new'

	select * from #tempdiff order by difflevel, diffdbname, diffobjecttype, diffobjectname, diffusername, diffvaluename, difftype desc

	drop table #tempdiff

	-- must be returned second to prevent the reports from failing
	if (@returnstatements = 1)
		select * from @SQLTable

--
--	declare @tempdiff table (
--					snapshotid int,
--					snapshotidold int,
--					connectionname nvarchar(400),
--					difftype nvarchar(400),
--					difflevel nvarchar(15), 
--					diffobjecttable nvarchar(400),
--					diffobjecttype nvarchar(256),
--					diffobjectname nvarchar(400),
--					diffusername nvarchar(400),
--					diffvaluename nvarchar(400),
--					diffdbname nvarchar(256), 
--					oldid nvarchar(400),
--					newid nvarchar(400),
--					oldvalue nvarchar(4000),
--					newvalue nvarchar(4000))
--
--	select * from @tempdiff
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getsnapshotcomparison] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getuserallexplicitpermission]'))
drop procedure [dbo].[isp_sqlsecure_getuserallexplicitpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getuserallexplicitpermission] (@snapshotid int, @dbid int, @uid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Get all explict permissions belong to database users or roles excluding fixed db roles
   -- 	           

	create table #tmpuserpermission (objectname nvarchar(256), objecttype nvarchar(64), permission nvarchar(64), grantor nvarchar(500), grantee nvarchar(500), isgrant nchar(1), isgrantwith nchar(1), isdeny nchar(1), owner nvarchar(500))

	create table #tmpuid (uid int)

	declare @newuid int
	set @newuid = @uid

	-- checks for alias
	if exists (select 1 from databaseprincipal where snapshotid = @snapshotid and dbid = @dbid and uid = @uid and isalias = 'Y')
	begin
		select @newuid = altuid from databaseprincipal where snapshotid = @snapshotid and dbid = @dbid and uid = @uid and isalias = 'Y'

	end

	-- only process single user
	insert into #tmpuserpermission exec isp_sqlsecure_getuserexplicitpermission @snapshotid=@snapshotid, @dbid=@dbid, @uid=@newuid

	select distinct * from #tmpuserpermission

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getuserallexplicitpermission] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getuserapplicationrole]'))
drop procedure [dbo].[isp_sqlsecure_getuserapplicationrole]
GO

CREATE procedure [dbo].[isp_sqlsecure_getuserapplicationrole]
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Check if connecting user has sqlsecure admin, loader or view priviilege. 
   --              If sysadmin then return admin and loader
   --              If db_owner then return loader and view
   -- 	           If belongs to SQLSecureView role then return view
   -- 	           All others return no access

	declare @result nvarchar(16)
	declare @err int
	declare @errmsg nvarchar(500)

	if object_id('#tmpdata') is null 
	begin
		create table #tmpdata (data nvarchar(16))
	end

	delete from #tmpdata

	select @result = CASE WHEN IS_SRVROLEMEMBER('sysadmin') = 1 THEN 'admin' ELSE 'no access' END
	
	if (@result = 'admin')
	begin

		BEGIN TRAN
	
			insert into #tmpdata (data) values (@result)
			insert into #tmpdata (data) values ('loader')
	
			select @err = @@error
	
			if @err <> 0
			begin
				set @errmsg = 'Error: Failed to insert into temp table'
				RAISERROR (@errmsg, 16, 1)
				ROLLBACK TRAN
				return -1
			end
	
		COMMIT TRAN
	end 
	else
	begin

		select @result = CASE WHEN IS_MEMBER('db_owner') = 1 THEN 'view' WHEN IS_MEMBER('dbo') = 1 THEN 'view' ELSE 'no access' END
		
		if (@result = 'view')
		begin
	
			BEGIN TRAN
				
				insert into #tmpdata (data) values (@result)
				insert into #tmpdata (data) values ('loader')
		
				select @err = @@error
		
				if @err <> 0
				begin
					set @errmsg = 'Error: Failed to insert into temp table'
					RAISERROR (@errmsg, 16, 1)
					ROLLBACK TRAN
					return -1
				end
		
			COMMIT TRAN
		end 
		else 
		begin
			select @result = CASE WHEN IS_MEMBER('db_datawriter') = 1 THEN 'loader' ELSE 'no access' END

			if (@result = 'loader')
			begin
		
				BEGIN TRAN
					
					insert into #tmpdata (data) values (@result)
			
					select @err = @@error
			
					if @err <> 0
					begin
						set @errmsg = 'Error: Failed to insert into temp table'
						RAISERROR (@errmsg, 16, 1)
						ROLLBACK TRAN
						return -1
					end
			
				COMMIT TRAN
			end 
			else
			begin
				select @result = CASE WHEN IS_MEMBER('SQLSecureView')= 1 THEN 'view' ELSE 'no access' END
				
				BEGIN TRAN
					
					insert into #tmpdata (data) values (@result)
			
					select @err = @@error
			
					if @err <> 0
					begin
						set @errmsg = 'Error: Failed to insert into temp table'
						RAISERROR (@errmsg, 16, 1)
						ROLLBACK TRAN
						return -1
					end
			
				COMMIT TRAN

			end
			
		end
	end
	
	exec('select * from #tmpdata')

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getuserapplicationrole] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getuserexplicitpermission]'))
drop procedure [dbo].[isp_sqlsecure_getuserexplicitpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getuserexplicitpermission] (@snapshotid int, @dbid int, @uid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Get all explict permissions belong to database users or roles excluding fixed db roles
   -- 	           

	select 
	objectname=b.schemaname, 
	objecttype='iSCM',
	permission=a.permission, 
	grantor=dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.grantor),
	grantee=dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.grantee),
	a.isgrant, 
	a.isgrantwith, 
	a.isdeny,
	owner=dbo.getdatabaseprincipalname(b.snapshotid, b.dbid, b.uid)
	from 
	databaseschemapermission a,
	databaseschema b
	where
	a.snapshotid = @snapshotid and
	a.dbid = @dbid and
	a.grantee = @uid and
	b.snapshotid = a.snapshotid and
	b.dbid = a.dbid and
	b.schemaid = a.schemaid
	union
	select 
	objectname=b.name, 
	objecttype=CASE WHEN b.type = 'R' THEN 'iDRLE' WHEN b.type = 'U' THEN 'iDUSR' WHEN b.type = 'A' THEN 'iDRLE' WHEN b.type = 'F' THEN 'iDRLE' ELSE 'iDUSR' END ,
	permission=a.permission, 
	grantor=dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.grantor),
	grantee=dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.grantee),
	a.isgrant, 
	a.isgrantwith, 
	a.isdeny,
	owner=dbo.getdatabaseprincipalname(b.snapshotid, b.dbid, b.uid)
	from 
	databaseprincipalpermission a,
	databaseprincipal b
	where
	a.snapshotid = @snapshotid and
	a.dbid = @dbid and
	a.grantee = @uid and
	b.snapshotid = a.snapshotid and
	b.dbid = a.dbid and
	b.uid = a.uid
	union
	select 
	objectname=a.name, 
	objecttype=a.type,
	permission=b.permission, 
	grantor=dbo.getdatabaseprincipalname(b.snapshotid, b.dbid, b.grantor),
	grantee=dbo.getdatabaseprincipalname(b.snapshotid, b.dbid, b.grantee),
	b.isgrant, 
	b.isgrantwith, 
	b.isdeny,
	owner=dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.owner)
	from 
	databaseobject a, 
	databaseobjectpermission b
	where
	b.snapshotid = @snapshotid and
	b.dbid = @dbid and
	b.grantee = @uid and
	a.snapshotid = b.snapshotid and
	a.dbid = b.dbid and
	a.objectid = b.objectid and
	a.parentobjectid = b.parentobjectid and
	a.classid = b.classid and 
	a.type <> 'iCO'
	union
	select 
	objectname=dbo.gettablename(a.snapshotid, a.dbid, a.parentobjectid) + '.' +  a.name, 
	objecttype=a.type,
	permission=b.permission, 
	grantor=dbo.getdatabaseprincipalname(b.snapshotid, b.dbid, b.grantor),
	grantee=dbo.getdatabaseprincipalname(b.snapshotid, b.dbid, b.grantee),
	b.isgrant, 
	b.isgrantwith, 
	b.isdeny,
	owner=dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, dbo.getobjectownerid(a.snapshotid, a.dbid, a.parentobjectid))
	from 
	databaseobject a, 
	databaseobjectpermission b
	where
	b.snapshotid = @snapshotid and
	b.dbid = @dbid and
	b.grantee = @uid and
	a.snapshotid = b.snapshotid and
	a.dbid = b.dbid and
	a.objectid = b.objectid and
	a.parentobjectid = b.parentobjectid and
	a.classid = b.classid and 
	a.type = 'iCO'



GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getuserexplicitpermission] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getuserpermission]'))
drop procedure [dbo].[isp_sqlsecure_getuserpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_getuserpermission]
(
	@snapshotid int,
	@logintype nchar(1),
	@inputsid varbinary(85),
	@sqllogin nvarchar(128),
	@databasename nvarchar(256),
	@permissiontype nchar(1)=null
)
WITH ENCRYPTION
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --       Get all user permissions given the snapshotid and selected sid (windows account), sql login or database role
   --
   --		A single result set table is returned with all of the permissions for the requested principal and database
   --
   --	After review on 11/01/2007, I found the following - MSO
   --		Note: If the temp table #tmpserverpermission exists on entry, then the result set is written there
   --					and no other table is returned. (It uses the same definition as #tmppermission below)
   --			This temp table result set is different from the standard returned set as follows:
   --					includes the "coveringfrom" column
   --					excludes the objecttypename and sourcetypename columns (see select statement below for how to add them)
   --					objecttype may be null if object is a class (see select statement below to fix this)
   --				 select distinct (other columns),
   --						objecttype=CASE WHEN a.objecttype IS NULL THEN dbo.getclassobjecttype(classid) ELSE a.objecttype END, 
   --						objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
   --						sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END
   --					from #tmppermission a left outer join objecttype b on a.objecttype = b.objecttype
   --						left outer join objecttype c on a.sourcetype = c.objecttype
   --		Note: If there is no user or an invalid user, it returns an empty result set that is different from the standard result set
   --					because it includes the "coveringfrom" column
	set nocount on
	declare @loginname nvarchar(128)
	declare @connectionname nvarchar(400)
	declare @errmsg nvarchar(500)
	declare @sql2000 nvarchar(1)
	declare @geteffective nchar(1)
	declare @issysadminrole nchar(1)
	declare @iscasesensitive nchar(1)
	declare @hasserverdeny nchar(1)

	set @iscasesensitive = 'Y'
	set @issysadminrole = 'N'
	set @hasserverdeny = 'N'

	declare @databaseid int

	if (@permissiontype = 'B' or @permissiontype IS NULL)
		set @geteffective = 'Y'
	else if (@permissiontype = 'X')
		set @geteffective = 'N'
	else if (@permissiontype = 'E')
		set @geteffective = 'Y'

	-- step 1.1
	-- if there is not such snapshotid then return error
	if not exists (select * from serversnapshot where snapshotid = @snapshotid)
	begin
		set @errmsg = 'Error: Snapshot id ' + CONVERT(varchar(10), @snapshotid) + ' not found'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	create table #tmplogins (sid varbinary(85), principalid int, name nvarchar(128), type nchar(1), serveraccess nchar(1), serverdeny nchar(1), disabled nchar(1))
	create table #tmppermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))
	create table #tmppermission2 (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))
	create table #tmpdenypermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))
	
	select @connectionname = connectionname from serversnapshot where snapshotid = @snapshotid
	select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

	-- step 1.2
	-- process sa differently
	-- if user is sa, sa has all permissions
	if (UPPER(@logintype) = 'S' and exists (select 1 from serverprincipal where snapshotid = @snapshotid and type = 'S' and sid = 0x01 and name = @sqllogin))
	begin
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			qualifiedname,
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		values ( 
			@snapshotid, 
			'SV',
			'S', 
			@sqllogin, 
			@connectionname, 
			NULL, 
			1, 
			@sqllogin, 
			'S', 
			NULL, 
			NULL, 
			1, 
			@sqllogin, 
			1, 
			@sqllogin, 
			100, 
			'EX',
			'CONTROL', 
			'Y', 
			'Y',
			'N', 
			'N', 
			1,
			@connectionname,
			@connectionname,
			'iSRV',
			NULL, 
			NULL,
			NULL,
			NULL,
			'N',
			'SV',
			'N',
			@sqllogin,
			'iLOGN',
			'CONTROL'
			)

		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			qualifiedname,
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		values ( 
			@snapshotid, 
			'SV',
			'S', 
			@sqllogin, 
			@connectionname, 
			NULL, 
			1, 
			@sqllogin, 
			'S', 
			NULL, 
			NULL, 
			1, 
			@sqllogin, 
			1, 
			@sqllogin, 
			100, 
			'EF',
			'CONTROL', 
			'Y', 
			'Y',
			'N', 
			'N', 
			1,
			@connectionname,
			@connectionname,
			'iSRV',
			NULL, 
			NULL,
			NULL,
			NULL,
			'N',
			'SV',
			'N',
			@sqllogin,
			'iLOGN',
			'CONTROL')

		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			qualifiedname,
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		values ( 
			@snapshotid, 
			'DB',
			'S', 
			@sqllogin, 
			@connectionname, 
			@databasename, 
			1, 
			@sqllogin, 
			'S', 
			NULL, 
			NULL, 
			1, 
			@sqllogin, 
			1, 
			@sqllogin, 
			0, 
			'EF',
			'CONTROL', 
			'Y', 
			'Y',
			'N', 
			'N', 
			1,
			@databasename,
			@databasename,
			'DB',
			NULL, 
			NULL,
			NULL,
			NULL,
			'Y',
			'SV',
			'N',
			@sqllogin,
			'iLOGN',
			'CONTROL')

		if (UPPER(@permissiontype) = 'X')
		begin
			delete from #tmppermission where permissiontype = 'EF'
		end

		if (UPPER(@permissiontype) = 'E')
		begin
			delete from #tmppermission where permissiontype = 'EX'
		end

		if exists (select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmpserverpermission%')
		begin
			insert into #tmpserverpermission select distinct * from #tmppermission
		end
		else -- else just show all data, the caller is UI
		begin
		-- testing show all permission
		exec ('select distinct 
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				parentobjectid,
				objectid,
				objectname, 
				qualifiedname,
				objecttype=CASE WHEN a.objecttype IS NULL THEN dbo.getclassobjecttype(classid) ELSE a.objecttype END, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
				inherited,
				sourcename,
				sourcetype,
				sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END,
				sourcepermission
				from #tmppermission a left outer join objecttype b on a.objecttype = b.objecttype
									left outer join objecttype c on a.sourcetype = c.objecttype
				')

		end

		return
	end

	-- step 1.3
	set @databaseid = -1	

	if (@databasename IS NOT NULL and @databasename <> '')
	begin
		if (@iscasesensitive = 'Y')
		begin

			if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and CONVERT(varbinary, databasename) = CONVERT(varbinary, @databasename))
			begin
				set @errmsg = 'Error: Invalid database name'
				RAISERROR (@errmsg, 16, 1)
				return
			end 
		end
		else
		begin
			if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and UPPER(databasename) = UPPER(@databasename))
			begin
				set @errmsg = 'Error: Invalid database name'
				RAISERROR (@errmsg, 16, 1)
				return
			end 
		end
	end

	select @databaseid = dbid from sqldatabase where snapshotid = @snapshotid and databasename = @databasename

	-- check if the snapshot server is sql 2000 or sql 2005 and greater, it is important to differentiate them for getting column permission processing
	select @sql2000 = dbo.issql2000(@snapshotid)

	-- step 1.4.1
	if (@logintype = 'W')
	begin
	
		create table #tmpsid (sid varbinary(85))
	
		-- insert current login to tmp table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select distinct  sid, principalid, name, type, serveraccess, serverdeny, disabled from serverprincipal where snapshotid = @snapshotid and sid = @inputsid)
	
		-- get all windows parents groups
		insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid
	
		-- insert all groups in serverprincipal table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, disabled) (select  distinct  a.sid, a.principalid, a.name, a.type, a.serveraccess, a.disabled from serverprincipal a, #tmpsid b where a.snapshotid = @snapshotid and a.sid = b.sid)

		select @loginname = name from serverprincipal where sid = @inputsid

		drop table #tmpsid				

	end
	else if (@logintype = 'S') -- sql login type
	begin
	-- step 1.4.2
		if (@iscasesensitive = 'Y')
			insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select  distinct  a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled from serverprincipal a where a.snapshotid = @snapshotid and type='S' and CONVERT(VARBINARY, name)=CONVERT(VARBINARY, @sqllogin))
		else
			insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select  distinct  a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled from serverprincipal a where a.snapshotid = @snapshotid and type='S' and UPPER(name)=UPPER(@sqllogin))

		set @loginname = @sqllogin
	end
	else if (@logintype = 'R') -- database role
	begin
	-- step 1.4.3
		set @loginname = @sqllogin
	end

	-- skip processing server level for roles
	if (@logintype <> 'R')
	begin
		-- if there is no user or invalid user then return nothing
		if not exists (select 1 from #tmplogins)
		begin
			select *, objecttypename=NULL, sourcetypename=null from #tmppermission
			return
		end	

		--select * from #tmplogins

		-- step 1.5
		-- checks if any of the group or users have server deny 
		if exists (select 1 from #tmplogins where serverdeny = 'Y')
		begin
			set @hasserverdeny = 'Y'
		end

		-- step 1.6
		create table #tmpresult (result nchar(1))

		exec isp_sqlsecure_issysadmin @snapshotid=@snapshotid, @logintype=@logintype, @inputsid=@inputsid, @sqllogin=@sqllogin

		select @issysadminrole = result from #tmpresult
	
		-- step 1.7
		-- GET SERVER PERMISSIONS
		insert into #tmppermission 
			(snapshotid, 
			permissionlevel, 
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype, 
			grantor,
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
		select distinct 
			a.snapshotid, 
			'SV',
			@logintype, 
			@loginname, 
			@connectionname, 
			NULL, 	
			a.principalid, 
			a.name, 
			a.type, 
			d.grantor, 
			dbo.getserverprincipalname(d.snapshotid, d.grantor),
			d.grantee, 
			dbo.getserverprincipalname(d.snapshotid, d.grantee),
			d.classid, 
			'EX', 
			d.permission, 
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny, 
			d.majorid,
			@connectionname, 
			dbo.getclassobjecttype(d.classid),
			'N',
			@connectionname,
			'iSRV',
			d.permission
		from 
			serverprincipal a, 
			serverpermission d 
		where 
			a.snapshotid = @snapshotid and 
			d.snapshotid = a.snapshotid and
			d.grantee = a.principalid and 
			d.classid = 100 and 
			exists ( select 1 from #tmplogins f 
					left join serverrolemember g
						on g.snapshotid = @snapshotid and  g.memberprincipalid = f.principalid
				where a.principalid = f.principalid or a.principalid = g.principalid
					)
	end

	-- step 1.8.1
	create table #tmpuid (dbid int, uid int)
	
	declare @dbid int
	declare @uid int

	if (@logintype = 'R')
		-- handle case sensitivity for role names
		if (@iscasesensitive = 'Y')
			declare myc100 cursor for
					select distinct a.dbid, a.uid from databaseprincipal a where a.snapshotid = @snapshotid and a.dbid = @databaseid and a.name = @loginname
		else
			declare myc100 cursor for
					select distinct a.dbid, a.uid from databaseprincipal a where a.snapshotid = @snapshotid and a.dbid = @databaseid and UPPER(a.name) = UPPER(@loginname)
	else
		declare myc100 cursor for
				select distinct a.dbid, a.uid from databaseprincipal a, #tmplogins b where a.snapshotid = @snapshotid and a.usersid = b.sid and a.dbid = @databaseid

	open myc100
	fetch next from myc100
	into @dbid, @uid
	
	while @@fetch_status = 0
	begin
		insert into #tmpuid exec isp_sqlsecure_getdatabaseuserparents @snapshotid, @dbid, @uid

		fetch next from myc100
		into @dbid, @uid

	end
	
	close myc100
	deallocate myc100	

	-- do not add guest permissions or process aliases for roles
	if (@logintype <> 'R')
	begin
		-- step 1.8.2
		-- check if user 'guest' is valid. If so, then current login will have public database role even there is
   		-- no databse user map to it.
		if exists (select * from databaseprincipal a where UPPER(a.name) = 'GUEST' and UPPER(a.hasaccess) ='Y' and a.snapshotid = @snapshotid and a.dbid = @databaseid) 
		begin
			-- public uid is always 0
			insert into #tmpuid (dbid, uid) values (@databaseid, 0)

			-- insert guest user as well
			insert into #tmpuid (dbid, uid) select distinct dbid, uid from databaseprincipal a where UPPER(a.name) = 'GUEST' and snapshotid = @snapshotid and dbid = @databaseid
		end

		-- step 1.8.3
		-- NEED TO ADD ALIAS USER TO THE TMPUID AS WELL
		insert into #tmpuid (dbid, uid) select  distinct  dbid, altuid from databaseprincipal where snapshotid = @snapshotid and isalias = 'Y' and altuid IS NOT NULL and dbid = @databaseid and usersid IN (select  distinct  sid from #tmplogins)
	end

	--select * from #tmpuid

	-- step 1.9
	-- GET DATABASE EXPLICIT PERMISSIONS
	insert into #tmppermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permissiontype, 
		permission, 
		isgrant, 
		isgrantwith, 
		isrevoke, 
		isdeny, 
		objectid,
		objectname, 
		objecttype, 
		schemaid, 
		schemaname,
		owner,
		ownername,
		isaliased,
		inherited,
		sourcename,
		sourcetype,
		sourcepermission) 
	select distinct 
		a.snapshotid, 
		'DB',
		@logintype,
		@loginname,
		@connectionname,
		b.databasename, 
		principalid=e.principalid,
		principalname=e.name,
		principaltype=e.type,
		databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
		databaseprincipaltype=a.type, 
		d.grantor, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
		d.grantee, 
		dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
		d.classid,
		'EX',
		d.permission,
		d.isgrant, 
		d.isgrantwith, 
		d.isrevoke, 
		d.isdeny,
		b.dbid, 
		b.databasename, 
		'DB', 
		NULL, 
		NULL,
		dbo.getdatabaseprincipalid(d.snapshotid, d.dbid, d.owner),
		b.owner,
		a.isalias,
		'N',
		b.databasename,
		'DB',
		d.permission
	from 
		databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
		sqldatabase b, 
		#tmpuid c, 
		vwdatabasepermission d
	where 
		a.snapshotid = @snapshotid and 
		b.snapshotid = a.snapshotid and
		b.dbid = a.dbid and 
		(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and 
		a.dbid = c.dbid and
		d.snapshotid = a.snapshotid and 
		d.classid = 0 and 
		d.grantee = c.uid and
		d.dbid = c.dbid and  
		b.dbid = @databaseid

	-- step 1.10
	-- MSO - Change to check for not 2000 so it will process 2008 as 2005
	if (@sql2000 = 'N')
	begin
		-- do not process server level objects for roles
		if (@logintype <> 'R')
		begin
		-- step 2.01
			-- NEED TO ADDRESS SERVER ACCESS OR DENY IN REGARD TO CONNECT SQL AND VIEW ANY DATABASE PERMISSION
			if (@permissiontype = 'E' or @permissiontype = 'B')
			begin
				if (@hasserverdeny = 'N')
				begin
					insert into #tmppermission (
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						objectid,
						objectname, 
						qualifiedname,
						objecttype, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						coveringfrom,
						inherited,
						sourcename,
						sourcetype,
						sourcepermission)
					values ( 
						@snapshotid, 
						'SV',
						@logintype, 
						@loginname, 
						@connectionname, 
						NULL, 
						null, 
						@loginname, 
						@logintype, 
						NULL, 
						NULL, 
						1, 
						'sa', 
						null,
						@loginname, 
						100, 
						'EF',
						'CONNECT SQL', 
						'Y', 
						'N',
						'N', 
						'N', 
						0,
						@connectionname,
						@connectionname,
						'iSRV',
						NULL, 
						NULL,
						NULL,
						NULL,
						'N',
						'SV',
						'N',
						@connectionname,
						'iSRV',
						'CONNECT SQL'
						)
				end
		
			-- step 2.02
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					qualifiedname,
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					coveringfrom,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				values ( 
					@snapshotid, 
					'SV',
					@logintype, 
					@loginname, 
					@connectionname, 
					NULL, 
					null, 
					@loginname, 
					@logintype, 
					NULL, 
					NULL, 
					1, 
					'sa', 
					null,
					@loginname, 
					100, 
					'EF',
					'VIEW ANY DATABASE', 
					'Y', 
					'N',
					'N', 
					'N', 
					0,
					@connectionname,
					@connectionname,
					'iSRV',
					NULL, 
					NULL,
					NULL,
					NULL,
					'N',
					'SV',
					'N',
					@connectionname,
					'iSRV',
					'VIEW ANY DATABASE'
					)
			end

		-- step 2.03
			--GET ALL LOGINS PERMISSION
			insert into #tmppermission 
				(snapshotid, 
				permissionlevel, 
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype, 
				grantor,
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectname, 
				objectid,
				objecttype,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission) 
			select distinct 
				a.snapshotid, 
				'SV',
				@logintype, 
				@loginname, 
				@connectionname, 
				NULL, 	
				a.principalid, 
				a.name, 
				a.type, 
				d.grantor, 
				dbo.getserverprincipalname(d.snapshotid, d.grantor),
				d.grantee, 
				dbo.getserverprincipalname(d.snapshotid, d.grantee),
				d.classid, 
				'EX', 
				d.permission, 
				d.isgrant, 
				d.isgrantwith, 
				d.isrevoke, 
				d.isdeny, 
				a.name, 
				a.principalid,
				dbo.getclassobjecttype(d.classid),
				'Y',
				a.name,
				'iLOGN',
				d.permission
			from 
				serverprincipal a, 
				serverpermission d 
			where 
				a.snapshotid = @snapshotid and 
				d.snapshotid = a.snapshotid and
				d.grantee = a.principalid and 
				a.type IN ('U', 'G') and 
				d.classid = 101 and 
				(d.grantee in (select  distinct  principalid from #tmplogins) or 
				 (d.grantee in (select  distinct  principalid from serverrolemember where memberprincipalid in (select distinct   principalid from #tmplogins))))
	
		-- step 2.04
			-- ENDPOINT PERMISSION
			-- REQUIRES SOME CUSTOMIZATION BECAUSE THE ENDPOINT COVERING HAS AT LEAST A CONNECT PERMISSION EVEN IF THERE IS NO PARENT PERMISSION
			-- ALSO IF THERE IS NO ENDPOINT EXPLICIT NEED TO CREATE ROWS DUE TO COVERING
			insert into #tmppermission 
				(snapshotid, 
				permissionlevel, 
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype, 
				grantor,
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission) 
			select distinct 
				a.snapshotid, 
				'SV',
				@logintype, 
				@loginname, 
				@connectionname, 
				NULL,
				a.principalid, 
				dbo.getserverprincipalname(a.snapshotid, a.principalid),
				dbo.getserverprincipaltype(a.snapshotid, a.principalid), 
				d.grantor, 
				dbo.getserverprincipalname(d.snapshotid, d.grantor),
				d.grantee, 
				dbo.getserverprincipalname(d.snapshotid, d.grantee),
				d.classid, 
				'EX', 
				d.permission, 
				d.isgrant, 
				d.isgrantwith, 
				d.isrevoke, 
				d.isdeny, 
				a.endpointid,
				a.name, 
				dbo.getclassobjecttype(d.classid),
				'N',
				a.name,
				'iENDP',
				d.permission
			from 
				endpoint a, 
				serverpermission d 
			where 
				a.snapshotid = @snapshotid and 
				d.snapshotid = a.snapshotid and
				d.majorid = a.endpointid and 
				d.classid = 105 and 
				(d.grantee in (select  distinct  principalid from #tmplogins) or 
				 (d.grantee in (select  distinct  principalid from serverrolemember where memberprincipalid in (select  distinct  principalid from #tmplogins))))
		end

	-- step 2.05
		-- GET ALL THE DATABASE PRINCIPAL PERMISSION
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
		select distinct 
			a.snapshotid, 
			'USR',
			@logintype,
			@loginname,
			@connectionname,
			@databasename, 
			e.principalid,
			principalname=e.name,
			principaltype=e.type,
			databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
			databaseprincipaltype=a.type, 
			d.grantor, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
			d.grantee, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
			d.classid,
			'EX',
			d.permission,
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny,
			d.uid,
			-- 12/29/2006 MSO fix to use uid for object instead of grantee to fix PR#801382
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.uid),
			dbo.getdatabaseprincipaltype(d.snapshotid, d.dbid, d.uid), 
			-- 12/29/2006 MSO fix owner to always be dbo to fix PR#801382
			1,
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, 1),
			a.isalias,
			'N',
			-- 12/29/2006 MSO fix source to be uid instead of grantee to fix PR#801382
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.uid),
			dbo.getdatabaseprincipaltype(d.snapshotid, d.dbid, d.uid), 
			d.permission
		from
			databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
			#tmpuid c, 
			databaseprincipalpermission d
		where
			a.snapshotid = @snapshotid and 
			(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and 
			a.dbid = c.dbid and
			d.snapshotid = a.snapshotid and 
			d.grantee = c.uid and 
			d.dbid = c.dbid and  
			a.dbid = @databaseid

	-- step 2.06
		-- GET ALL THE SCHEMA PERMISSION
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
		select distinct 
			a.snapshotid, 
			'SCH',
			@logintype,
			@loginname,
			@connectionname,
			@databasename, 
			e.principalid,
			principalname=e.name,
			principaltype=e.type,
			databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
			databaseprincipaltype=a.type, 
			d.grantor, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
			d.grantee, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
			d.classid,
			'EX',
			d.permission,
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny,
			d.schemaid,
			d.schemaname,	
			'iSCM', 
			d.schemaid, 
			d.schemaname,	
			d.uid,
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.uid),
			a.isalias,
			'N',
			d.schemaname,	
			'iSCM', 
			d.permission
		from 
			databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
			#tmpuid c, 
			vwschemapermission d
		where 
			a.snapshotid = @snapshotid and 
			(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and -- TODO: CHECKS IF ROLES SHOULD BE CONSIDERED AS EXPLICIT PERMISSION
			a.dbid = c.dbid and
			d.snapshotid = a.snapshotid and 
			d.grantee = c.uid and 
			d.dbid = c.dbid and  
			a.dbid = @databaseid 

	-- step 2.07
		-- GET SQL 2005 ALL OBJECTS EXCEPT COLUMN
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
		select distinct 
			a.snapshotid, 
			'OBJ',
			@logintype,
			@loginname,
			@connectionname,
			@databasename, 
			e.principalid,
			principalname=e.name,
			principaltype=e.type,
			databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
			databaseprincipaltype=a.type, 
			d.grantor, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
			d.grantee, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
			d.classid,
			'EX',
			d.permission,
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny,
			d.objectid,
			d.objectname, 
			d.objecttype, 
			d.schemaid, 
			dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
			d.owner,
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
			a.isalias,
			'N',
			d.objectname, 
			d.objecttype, 
			d.permission
		from 
			databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
			#tmpuid c, 
			vwdatabaseobjectpermission d,
			databaseschema f
		where 
			a.snapshotid = @snapshotid and 
			(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and 
			a.dbid = c.dbid and
			d.snapshotid = a.snapshotid and 
			d.dbid = a.dbid and
			f.snapshotid = d.snapshotid and
			f.dbid = c.dbid and
			d.grantee = c.uid and
			d.schemaid = f.schemaid and
			d.dbid = f.dbid and
			d.snapshotid = f.snapshotid and
			d.schemaid is not null and
			a.dbid = @databaseid

	--select * from #tmppermission where permissionlevel = 'OBJ'	

	-- step 2.08
		-- GET SQL 2005 ALL COLUMN WHERE SCHEMA IS NULL AND OWNER IS NULL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			parentobjectid,
			objectid,
			objectname, 
			qualifiedname,
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
		select distinct 
			a.snapshotid, 
			'COL',
			@logintype,
			@loginname,
			@connectionname,
			@databasename, 
			e.principalid,
			principalname=e.name,
			principaltype=e.type,
			databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
			databaseprincipaltype=a.type, 
			d.grantor, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
			d.grantee, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
			d.classid,
			'EX',
			d.permission,
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny,
			d.parentobjectid,
			d.objectid,
			d.objectname, 
			dbo.gettablename(@snapshotid, @databaseid, d.parentobjectid) + '.' + d.objectname,
			d.objecttype,
			d.schemaid, 
			d.schemaname,
			d.owner,
			d.ownername,
			a.isalias,
			'N',
			dbo.gettablename(@snapshotid, @databaseid, d.parentobjectid) + '.' + d.objectname,
			'iCO',
			d.permission
		from 
			databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
			#tmpuid c, 
			vwsql2005databasecolumnpermission d
		where 
			a.snapshotid = @snapshotid and 
			(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and 
			a.dbid = c.dbid and
			d.snapshotid = a.snapshotid and 
			d.dbid = a.dbid and
			d.grantee = a.uid and
			a.dbid = @databaseid	


	-- step 2.09
		if (@geteffective = 'Y')
		begin

			-- EFFECTIVE PERMISSION --

			-- PROCESS FIXED SERVER ROLE PERMISSION
			-- CHECK IF LOGINS BELONGS TO FIXED SERVER ROLES, IF SO THEN ASSIGN FIXED PERMISSION TO SERVER LEVEL
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   a.snapshotid, 
				'SV',
				@logintype, 
				@loginname, 
				@connectionname, 
				NULL, 
				a.memberprincipalid, 
				dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
				dbo.getserverprincipaltype(a.snapshotid, a.memberprincipalid), 
				NULL, 
				NULL, 
				a.principalid, 
				dbo.getserverprincipalname(a.snapshotid, a.principalid), 
				a.memberprincipalid, 
				dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
				100, 
				'EF', 
				rolepermission, 
				c.isgrant, 
				c.isgrantwith, 
				c.isrevoke, 
				c.isdeny, 
				0,
				@connectionname, 
				'iSRV', 
				NULL, 
				NULL,
				NULL,
				NULL,
				'N',
				'FXROLE',
				'N',
				c.rolename,
				'Server Role',
				rolepermission
			from 
				vwfixedserverrolemember a, 
				#tmplogins b ,
				fixedrolepermission c
			where 
				a.snapshotid = @snapshotid and 
				a.memberprincipalid = b.principalid and
				UPPER(a.name) = UPPER(c.rolename) and
				c.roletype = 'S'

		-- step 2.10
			-- IF THERE IS SYSADMIN THEN JUST RETURN CONTROL AT SERVER LEVEL
			if (@issysadminrole = 'Y')
			begin
				declare @syadminprincipal int
				declare @syadminprincipalname nvarchar(128)

				select @syadminprincipal = principalid, @syadminprincipalname = principalname from #tmppermission where permissiontype = 'EF' and UPPER(grantorname) = 'SYSADMIN'			

				delete from #tmppermission where permissiontype = 'EF'

				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					qualifiedname,
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					coveringfrom,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				values ( 
					@snapshotid, 
					'SV',
					@logintype, 
					@loginname, 
					@connectionname, 
					NULL, 
					3, 
					'sysadmin', 
					'R', 
					NULL, 
					NULL, 
					3, 
					'sysadmin', 
					@syadminprincipal, 
					@syadminprincipalname, 
					100, 
					'EF',
					'CONTROL', 
					'Y', 
					'Y',
					'N', 
					'N', 
					1,
					@connectionname,
					@connectionname,
					'iSRV',
					NULL, 
					NULL,
					NULL,
					NULL,
					'N',
					'SV',
					'N',
					'sysadmin',
					'Server Role',
					'CONTROL'
					)

				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					qualifiedname,
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					coveringfrom,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				values ( 
					@snapshotid, 
					'DB',
					@logintype, 
					@loginname, 
					@connectionname, 
					@databasename, 
					3, 
					'sysadmin', 
					'R', 
					NULL, 
					NULL, 
					3, 
					'sysadmin', 
					@syadminprincipal, 
					@syadminprincipalname, 
					0, 
					'EF',
					'CONTROL', 
					'Y', 
					'Y',
					'N', 
					'N', 
					1,
					@databasename,
					@databasename,
					'DB',
					NULL, 
					NULL,
					NULL,
					NULL,
					'Y',
					'SV',
					'Y',
					'sysadmin',
					'Server Role',
					'CONTROL'
					)

				if (UPPER(@permissiontype) = 'X')
					delete from #tmppermission where permissiontype = 'EF'
		
				if (UPPER(@permissiontype) = 'E')
					delete from #tmppermission where permissiontype = 'EX'
		
				if exists (select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmpserverpermission%')
				begin
					insert into #tmpserverpermission select distinct * from #tmppermission
				end
				else -- else just show all data, the caller is UI
				begin
	/*	This should be the fix for the following code
					select distinct 
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						parentobjectid,
						objectid,
						objectname, 
						qualifiedname,
						objecttype=isnull(a.objecttype, dbo.getclassobjecttype(classid)), 
						schemaid,
						schemaname,
						owner,
						ownername,
						isaliased,
						objecttypename=isnull(b.objecttypename, dbo.getclasstype(classid)),
						inherited,
						sourcename,
						sourcetype,
						sourcetypename=isnull(c.objecttypename, sourcetype),
						sourcepermission
					from #tmppermission a
						left outer join objecttype b on a.objecttype = b.objecttype
						left outer join objecttype c on a.sourcetype = c.objecttype
					where permissiontype = case upper(@permissiontype)
												when 'E' then 'EF'
												when 'X' then 'EX'
												else permissiontype
											end
	*/

					if (@permissiontype = 'E') 
					begin
						select distinct 
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							parentobjectid,
							objectid,
							objectname, 
							qualifiedname,
							objecttype=CASE WHEN a.objecttype IS NULL THEN dbo.getclassobjecttype(classid) ELSE a.objecttype END, 
							schemaid,
							schemaname,
							owner,
							ownername,
							isaliased,
							objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
							inherited,
							sourcename,
							sourcetype,
							sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END,
							sourcepermission
						from #tmppermission a
							left outer join objecttype b on a.objecttype = b.objecttype
							left outer join objecttype c on a.sourcetype = c.objecttype
						where permissiontype = 'EF'
					end
					else if (@permissiontype = 'E') 
					begin
						select distinct 
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							parentobjectid,
							objectid,
							objectname, 
							qualifiedname,
							objecttype=CASE WHEN a.objecttype IS NULL THEN dbo.getclassobjecttype(classid) ELSE a.objecttype END, 
							schemaid, 
							schemaname,
							owner,
							ownername,
							isaliased,
							objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
							inherited,
							sourcename,
							sourcetype,
							sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END,
							sourcepermission
						from #tmppermission a
							left outer join objecttype b on a.objecttype = b.objecttype
							left outer join objecttype c on a.sourcetype = c.objecttype
						where permissiontype = 'EX'
					end
					else
					begin
						select distinct 
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							parentobjectid,
							objectid,
							objectname, 
							qualifiedname,
							objecttype=CASE WHEN a.objecttype IS NULL THEN dbo.getclassobjecttype(classid) ELSE a.objecttype END, 
							schemaid, 
							schemaname,
							owner,
							ownername,
							isaliased,
							objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
							inherited,
							sourcename,
							sourcetype,
							sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END,
							sourcepermission
						from #tmppermission a
							left outer join objecttype b on a.objecttype = b.objecttype
							left outer join objecttype c on a.sourcetype = c.objecttype
					end
				end

				return
			end

		-- step 2.11
			-- COPY ALL EXISTING SERVER PERMISSION AS EFFECTIVE PERMISSION
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission
			where UPPER(permissionlevel) = 'SV'

			-- NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   snapshotid, 
				a.permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.permissionname, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission a, coveringpermissionhierarchy b
			where classid = 100 and b.coveringpermissionname = a.permission

			-- If there is control server, then needs to expand in into more detail permission again.
			-- 2 level expansion needed.
			if exists (select 1 from #tmppermission where permission = 'CONTROL SERVER')
			begin
		
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				select  distinct   snapshotid, 
					a.permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					'EF', 
					b.permissionname, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission
				from #tmppermission a, coveringpermissionhierarchy b
				where classid = 100 and b.coveringpermissionname = a.permission
			end

		-- step 2.12
			declare @endpointid int
			declare @endpointprincipalid int
			declare @endpointname nvarchar(128)

			-- COPY ALL THE ENDPOINT PERMISSION AS EFFECTIVE PERMISSION	
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission
			where classid = 105


			-- CHECK IF ENDPOINT NEEDS COVERING FROM SERVER
			if exists (select * from #tmppermission where classid = 100 and UPPER(permission) = 'CONTROL SERVER') 
			begin
				-- IF SERVER HAS CONTROL PERMISSION ALL ENDPOINT WILL HAVE ALL PERMISSIONS
				delete from #tmppermission where UPPER(objecttype) = 'IENDP'

				declare myc1000 cursor for
						select distinct a.endpointid, a.principalid, a.name from endpoint a where snapshotid = @snapshotid 
				
				open myc1000
				fetch next from myc1000
				into @endpointid, @endpointprincipalid, @endpointname
				
				while @@fetch_status = 0
				begin

					insert into #tmppermission (
						snapshotid, 
						permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						principalid, 
						principalname, 
						principaltype,
						databaseprincipal, 
						databaseprincipaltype, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						classid, 
						permissiontype, 
						permission, 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						objectid,
						objectname, 
						objecttype, 
						schemaid, 
						schemaname,
						owner,
						ownername,
						isaliased,
						coveringfrom,
						inherited,
						sourcename,
						sourcetype,
						sourcepermission)
					select top 1 
						snapshotid, 
						a.permissionlevel,
						logintype, 
						loginname, 
						connectionname, 
						databasename, 
						@endpointprincipalid, 
						dbo.getserverprincipalname(@snapshotid, @endpointprincipalid), 
						dbo.getserverprincipaltype(@snapshotid, @endpointprincipalid), 
						NULL, 
						NULL, 
						grantor, 
						grantorname,
						grantee, 
						granteename,
						105, 
						'EF', 
						'CONTROL', 
						isgrant, 
						isgrantwith, 
						isrevoke, 
						isdeny, 
						@endpointid,
						@endpointname, 
						'iENDP',
						NULL, 
						NULL,
						owner,
						ownername,
						isaliased,
						'SV',
						'Y',
						@connectionname,
						'iSRV',
						'CONTROL SERVER'
					from #tmppermission a
					where a.classid = 100 and UPPER(permission) = 'CONTROL SERVER'

					fetch next from myc1000
					into @endpointid, @endpointprincipalid, @endpointname
				end

				close myc1000
				deallocate myc1000	

				-- GET ALL COVERING PERMISSION
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				select  distinct   snapshotid, 
					a.permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					'EF', 
					b.permissionname, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					'Y',
					sourcename,
					sourcetype,
					sourcepermission
				from #tmppermission a, coveringpermissionhierarchy b
				where a.classid = 105 and UPPER(a.permissionlevel) = 'SV' and UPPER(b.permissionlevel) = 'ENDPOINT' and UPPER(b.coveringpermissionname) = 'CONTROL'
			end 	
			else -- ELSE CHECK IF THERE IS OTHER SERVER COVERING PERMISSION, IF SO MANUALLY CREATE COVERING ROWS. ALSO, CREATE A DEFAULT CONNECT FOR ALL ENDPOINTS EXCEPT ADMIN
			begin
				declare myc1000 cursor for
						select distinct a.endpointid, a.principalid, a.name from endpoint a where snapshotid = @snapshotid 
				
				open myc1000
				fetch next from myc1000
				into @endpointid, @endpointprincipalid, @endpointname
				
				while @@fetch_status = 0
				begin

					if exists (select * from #tmppermission where classid = 100 and UPPER(permission) IN ('ALTER ANY ENDPOINT', 'VIEW ANY DEFINITION')) 
					begin

						insert into #tmppermission (
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							objectid,
							objectname, 
							objecttype, 
							schemaid, 
							schemaname,
							owner,
							ownername,
							isaliased,
							coveringfrom,
							inherited,
							sourcename,
							sourcetype,
							sourcepermission)
						select top 1 
							snapshotid, 
							a.permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							@endpointprincipalid, 
							dbo.getserverprincipalname(@snapshotid, @endpointprincipalid), 
							dbo.getserverprincipaltype(@snapshotid, @endpointprincipalid), 
							NULL, 
							NULL, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							105, 
							'EF', 
							CASE WHEN permission = 'ALTER ANY ENDPOINT' THEN 'ALTER' ELSE 'VIEW DEFINITION' END, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							@endpointid,
							@endpointname, 
							'iENDP',
							NULL, 
							NULL,
							owner,
							ownername,
							isaliased,
							'SV',
							'Y',
							sourcename,
							sourcetype,
							sourcepermission
						from #tmppermission a
						where a.classid = 100 and UPPER(permission) IN ('ALTER ANY ENDPOINT', 'VIEW ANY DEFINITION')
					end

			-- step 2.13
					-- INSERT CONNECT EXCEPT ADMIN
					if (UPPER(@endpointname) in ('TSQL LOCAL MACHINE', 'TSQL NAMED PIPES', 'TSQL DEFAULT TCP', 'TSQL DEFAULT VIA'))
					begin
						insert into #tmppermission (
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							objectid,
							objectname, 
							objecttype, 
							schemaid, 
							schemaname,
							owner,
							ownername,
							isaliased,
							coveringfrom,
							inherited,
							sourcename,
							sourcetype,
							sourcepermission)
						select top 1 
							snapshotid, 
							a.permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							@endpointprincipalid, 
							dbo.getserverprincipalname(@snapshotid, @endpointprincipalid), 
							dbo.getserverprincipaltype(@snapshotid, @endpointprincipalid), 
							NULL, 
							NULL, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							105, 
							'EF', 
							'CONNECT', 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							@endpointid,
							@endpointname, 
							'iENDP',
							NULL, 
							NULL,
							owner,
							ownername,
							isaliased,
							'SV',
							'N',
							sourcename,
							sourcetype,
							sourcepermission
						from #tmppermission a
						where a.classid = 100
					end

					fetch next from myc1000
					into @endpointid, @endpointprincipalid, @endpointname
				end

				close myc1000
				deallocate myc1000	


				-- NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				select  distinct   snapshotid, 
					a.permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					'EF', 
					b.permissionname, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					'Y',
					sourcename,
					sourcetype,
					sourcepermission
				from #tmppermission a, coveringpermissionhierarchy b
				where a.classid = 105 and UPPER(b.permissionlevel) = 'ENDPOINT' and b.coveringpermissionname = a.permission	
			end

		-- step 2.14
			create table #tmpcovering (name nvarchar(128))
		
			declare @tmpepgrantee int
			declare @tmpepobjectid int

			declare @tmpdatabasename nvarchar(128)
			declare @#tmppermission nvarchar(128)
			declare @tmpprincipalid int
			declare @tmpgrantor int
			declare @tmpgrantorname nvarchar(128)
			declare @tmpgranteename nvarchar(128)
			declare @tmpcoveringpermission nvarchar(128)
			declare @tmpgrant nchar(1)
			declare @tmpgrantwith nchar(1)
			declare @tmpdeny nchar(1)
			declare @tmprevoke nchar(1)

			declare @tmploginid int
			declare @tmploginname nvarchar(256)
			declare @tmplogintype nchar(1)
			declare @tmpprincipaltype nchar(1)
			declare @tmpprincipalname nvarchar(256)

			-- LOGIN: IF SERVER LOGIN IS CONTROL THEN LOGIN WILL HAVE ALL PERMISSION FROM ALL USERS OR GROUPS
			if exists (select * from #tmppermission where classid = 100 and UPPER(permission) = 'CONTROL SERVER') 
			begin
				select distinct @tmpgrant = isgrant, @tmpgrantwith = isgrantwith, @tmprevoke = isrevoke, @tmpdeny = isrevoke from #tmppermission where classid = 100 and UPPER(permission) = 'CONTROL SERVER'

				-- IF SERVER HAS CONTROL PERMISSION ALL LOGINS WILL HAVE ALL PERMISSIONS
				delete from #tmppermission where classid = 101 and permissiontype = 'EF'			

				-- ALL USERS AND GROUPS ARE GRANTOR
				declare myca1000 cursor for
						select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and type IN ('G', 'U')
				
				open myca1000
				fetch next from myca1000
				into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
				
				while @@fetch_status = 0
				begin
					declare myca1000a cursor for
							select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and a.principalid in (select  distinct  principalid from #tmplogins) or (a.principalid in (select distinct   principalid from serverrolemember where memberprincipalid in (select distinct   principalid from #tmplogins))) and UPPER(a.type) IN ('U', 'G')
			
					open myca1000a
					fetch next from myca1000a
					into @tmploginid, @tmploginname, @tmplogintype

					while @@fetch_status = 0
					begin
						--print 'tmplogin info ' + @tmploginname + ' ,' + @tmplogintype

						insert into #tmppermission (
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							objectid,
							objectname, 
							objecttype, 
							schemaid, 
							schemaname,
							owner,
							ownername,
							isaliased,
							coveringfrom,
							inherited,
							sourcename,
							sourcetype,
							sourcepermission)
						values ( 
							@snapshotid, 
							'SV',
							@tmplogintype, 
							@tmploginname, 
							@connectionname, 
							NULL, 
							@tmploginid, 
							@tmploginname, 
							@tmplogintype, 
							NULL, 
							NULL, 
							@tmpprincipalid, 
							@tmpprincipalname, 
							@tmploginid, 
							@tmploginname, 
							101, 
							'EF',
							'CONTROL', 
							@tmpgrant, 
							@tmpgrantwith, 
							@tmprevoke, 
							@tmpdeny, 
							@tmploginid,
							@tmploginname, 
							dbo.getclassobjecttype(101),
							NULL, 
							NULL,
							NULL,
							NULL,
							'N',
							'SV',
							'Y',
							@connectionname,
							'iSRV',
							'CONTROL SERVER'
							)

						fetch next from myca1000a
						into @tmploginid, @tmploginname, @tmplogintype
					end


					close myca1000a
					deallocate myca1000a	

					fetch next from myca1000
					into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
				end

				close myca1000
				deallocate myca1000	
			end 	

			-- LOGIN: IF SERVER LOGIN IS VIEW ANY DEFINITION THEN LOGIN WILL HAVE VIEW DEFINITION PERMISSION FROM ALL USERS OR GROUPS
			if exists (select * from #tmppermission where classid=100 and UPPER(permission) = 'VIEW ANY DEFINITION') 
			begin
				select distinct @tmpgrant = isgrant, @tmpgrantwith = isgrantwith, @tmprevoke = isrevoke, @tmpdeny = isrevoke from #tmppermission where classid = 100 and UPPER(permission) = 'VIEW ANY DEFINITION'

				-- ALL USERS AND GROUPS ARE GRANTOR
				declare myca1000 cursor for
						select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and type IN ('G', 'U')
				
				open myca1000
				fetch next from myca1000
				into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
				
				while @@fetch_status = 0
				begin
					declare myca1000a cursor for
							select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and a.principalid in (select distinct   principalid from #tmplogins) or (a.principalid in (select distinct   principalid from serverrolemember where memberprincipalid in (select distinct   principalid from #tmplogins))) and UPPER(a.type) IN ('U', 'G')
			
					open myca1000a
					fetch next from myca1000a
					into @tmploginid, @tmploginname, @tmplogintype

					while @@fetch_status = 0
					begin
						--print 'tmplogin info ' + @tmploginname + ' ,' + @tmplogintype

						insert into #tmppermission (
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							objectid,
							objectname, 
							objecttype, 
							schemaid, 
							schemaname,
							owner,
							ownername,
							isaliased,
							coveringfrom,
							inherited,
							sourcename,
							sourcetype,
							sourcepermission)
						values ( 
							@snapshotid, 
							'SV',
							@tmplogintype, 
							@tmploginname, 
							@connectionname, 
							NULL, 
							@tmploginid, 
							@tmploginname, 
							@tmplogintype, 
							NULL, 
							NULL, 
							@tmpprincipalid, 
							@tmpprincipalname, 
							@tmploginid, 
							@tmploginname, 
							101, 
							'EF',
							'VIEW DEFINITION', 
							@tmpgrant, 
							@tmpgrantwith, 
							@tmprevoke, 
							@tmpdeny, 
							@tmploginid,
							@tmploginname, 
							dbo.getclassobjecttype(101),
							NULL, 
							NULL,
							NULL,
							NULL,
							'N',
							'SV',
							'Y',
							@connectionname,
							'iSRV',
							'VIEW ANY DEFINITION'
							)

						fetch next from myca1000a
						into @tmploginid, @tmploginname, @tmplogintype
					end


					close myca1000a
					deallocate myca1000a	

					fetch next from myca1000
					into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
				end

				close myca1000
				deallocate myca1000	

			end 	


			-- LOGIN: IF SERVER LOGIN IS ALTER ANY LOGIN THEN LOGIN WILL HAVE ALTER PERMISSION FROM ALL USERS OR GROUPS
			if exists (select * from #tmppermission where classid = 100 and UPPER(permission) = 'ALTER ANY LOGIN') 
			begin
				select distinct @tmpgrant = isgrant, @tmpgrantwith = isgrantwith, @tmprevoke = isrevoke, @tmpdeny = isrevoke from #tmppermission where classid = 100 and UPPER(permission) = 'ALTER ANY LOGIN'

				-- ALL USERS AND GROUPS ARE GRANTOR
				declare myca1000 cursor for
						select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and type IN ('G', 'U')
				
				open myca1000
				fetch next from myca1000
				into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
				
				while @@fetch_status = 0
				begin
					declare myca1000a cursor for
							select distinct a.principalid, a.name, a.type from serverprincipal a where snapshotid = @snapshotid and a.principalid in (select distinct   principalid from #tmplogins) or (a.principalid in (select distinct   principalid from serverrolemember where memberprincipalid in (select  distinct  principalid from #tmplogins))) and UPPER(a.type) IN ('U', 'G')
			
					open myca1000a
					fetch next from myca1000a
					into @tmploginid, @tmploginname, @tmplogintype

					while @@fetch_status = 0
					begin
						--print 'tmplogin info ' + @tmploginname + ' ,' + @tmplogintype

						insert into #tmppermission (
							snapshotid, 
							permissionlevel,
							logintype, 
							loginname, 
							connectionname, 
							databasename, 
							principalid, 
							principalname, 
							principaltype,
							databaseprincipal, 
							databaseprincipaltype, 
							grantor, 
							grantorname,
							grantee, 
							granteename,
							classid, 
							permissiontype, 
							permission, 
							isgrant, 
							isgrantwith, 
							isrevoke, 
							isdeny, 
							objectid,
							objectname, 
							objecttype, 
							schemaid, 
							schemaname,
							owner,
							ownername,
							isaliased,
							coveringfrom,
							inherited,
							sourcename,
							sourcetype,
							sourcepermission)
						values ( 
							@snapshotid, 
							'SV',
							@tmplogintype, 
							@tmploginname, 
							@connectionname, 
							NULL, 
							@tmploginid, 
							@tmploginname, 
							@tmplogintype, 
							NULL, 
							NULL, 
							@tmpprincipalid, 
							@tmpprincipalname, 
							@tmploginid, 
							@tmploginname, 
							101, 
							'EF',
							'ALTER', 
							@tmpgrant, 
							@tmpgrantwith, 
							@tmprevoke, 
							@tmpdeny, 
							@tmploginid,
							@tmploginname, 
							dbo.getclassobjecttype(101),
							NULL, 
							NULL,
							NULL,
							NULL,
							'N',
							'SV',
							'Y',
							@connectionname,
							'iSRV',
							'ALTER ANY LOGIN'
							)

						fetch next from myca1000a
						into @tmploginid, @tmploginname, @tmplogintype
					end


					close myca1000a
					deallocate myca1000a	

					fetch next from myca1000
					into @tmpprincipalid, @tmpprincipalname, @tmpprincipaltype
				end

				close myca1000
				deallocate myca1000	

			end 	
					

			-- LOGIN - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   snapshotid, 
				a.permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.permissionname, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				'Y',
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission a, coveringpermissionhierarchy b
			where a.classid = 101 and UPPER(b.permissionlevel) = 'LOGIN' and b.coveringpermissionname = a.permission

		-- step 2.15
			-- COPY ALL THE DATABASE LEVEL PERMISSION AS EFFECTIVE PERMISSION	
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
				)
			select  distinct   snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission
			where classid = 0 and permissiontype = 'EX'

	-- step 2.16
		-- PROVIDE SERVER TO DATABASE COVERING PERMISSIONS
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct a.snapshotid, 
			'DB',
			logintype, 
			loginname, 
			connectionname, 
			c.databasename, 
			principalid, 
			principalname, 
			principaltype,
			null, 
			null, 
			1,
			'dbo',
			d.uid,
			dbo.getdatabaseprincipalname(c.snapshotid, c.dbid, d.uid),
			0,
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			c.dbid,
			c.databasename, 
			'DB', 
			null, 
			null,
			dbo.getdatabaseprincipalid(c.snapshotid, c.dbid, c.owner),
			c.owner, 
			'N',
			'Y',
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b, sqldatabase c, #tmpuid d
		where 	a.classid = 100 and 
			UPPER(b.permissionlevel) = 'DATABASE' and 
			b.parentcoveringpermission = a.permission and
			c.snapshotid = @snapshotid and
			c.dbid = @databaseid and
			d.dbid = c.dbid and 
			d.uid > 4 -- do not process guest, dbo and public, info, sys
		

		--select * from #tmppermission where permissionlevel = 'DB'

	-- step 2.17
		-- PROCESS FIXED DATABASE ROLE PERMISSION
		-- GET ALL EFFECTIVE PERMISSION ASSOCIATES WITH THE FIXED DATABASE ROLE AND INSERT THEM AS EFFECTIVE PERMISSIONS
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select distinct    a.snapshotid, 
			'DB',
			@logintype, 
			@loginname, 
			@connectionname, 
			d.databasename, 
			f.principalid, 
			f.name, 
			f.type, 
			dbo.getdatabaseprincipalname(e.snapshotid, e.dbid, e.uid), 
			e.type, 
			a.uid, 
			a.name, 
			b.uid, 
			dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.rolememberuid), 
			0, 
			'EF', 
			rolepermission, 
			c.isgrant, 
			c.isgrantwith, 
			c.isrevoke, 
			c.isdeny, 
			d.dbid,
			d.databasename, 
			'DB', 
			NULL, 
			NULL,
			dbo.getdatabaseprincipalid(d.snapshotid, d.dbid, d.owner),
			d.owner, 
			'N',
			'DBFXROLE',
			'N',
			c.rolename,
			'iDRLE',
			rolepermission
		from 
			vwfixeddatabaserolemember a, 
			#tmpuid b,
			fixedrolepermission c,
			sqldatabase d,
			databaseprincipal e left outer join serverprincipal f on e.snapshotid = f.snapshotid and e.usersid = f.sid
		where 
			a.snapshotid = @snapshotid and 
			a.dbid = b.dbid and 
			a.rolememberuid = b.uid and
			e.snapshotid = a.snapshotid and
			e.uid = b.uid and 
			e.dbid = b.dbid and
			UPPER(a.name) = UPPER(c.rolename) and
			d.dbid = a.dbid and
			d.snapshotid = a.snapshotid and
			d.databasename = @databasename and 
			c.roletype = 'D'


		-- NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct   snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 0 and UPPER(b.permissionlevel) = 'DATABASE' and b.coveringpermissionname = a.permission
	
		-- FOR EACH DATABASE, COPY THE DATA TO ANOTHER TABLE EXCEPT THE PERMISSION AND GRANTING/DENY ATTRIBUTES
		insert into #tmppermission2 (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select 	distinct snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			'Y',
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where classid = 0 and UPPER(permissiontype) = 'EF' and principalid in (select distinct grantee from #tmppermission where classid = 100)

		-- FOR EACH DATABASE, CONVERT EACH ROW TO COVERING PERMISSION BY COPYING OR EXPANDING EACH ROW TO THE NEW COVERING PERMISISON
		declare myc102 cursor for
			select distinct  cc.databasename, cc.principalid , aa.permission, aa.isgrant, aa.isgrantwith, aa.isdeny, aa.isrevoke  
			from #tmppermission aa, #tmppermission2 cc
			where UPPER(aa.permissionlevel) = 'SV' 
				and UPPER(aa.permissiontype) = 'EF' 
				and UPPER(aa.objecttype) = 'SERVER' 
				and cc.principalname IS NOT NULL 
				and cc.principalid IS NOT NULL
				and aa.principalid = cc.principalid
				
		open myc102
		fetch next from myc102
		into @tmpdatabasename, @tmpprincipalid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
		while @@fetch_status = 0
		begin
				-- COPY A ROW FROM #tmppermission2 
				insert into #tmppermission (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					permissiontype, 
					permission, 
					isgrant, 
					isgrantwith, 
					isrevoke, 
					isdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					coveringfrom,
					inherited,
					sourcename,
					sourcetype,
					sourcepermission)
				select  distinct snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					principalid, 
					principalname, 
					principaltype,
					databaseprincipal, 
					databaseprincipaltype, 
					grantor, 
					grantorname,
					grantee, 
					granteename,
					classid, 
					'EF', 
					b.[permissionname] , 
					@tmpgrant, 
					@tmpgrantwith, 
					@tmprevoke, 
					@tmpdeny, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased,
					'SV',
					'Y',
					sourcename,
					sourcetype,
					sourcepermission
				from 	#tmppermission2 a
					, getcoveringpermission('SERVER',@#tmppermission,'DATABASE' ) b
				where a.databasename = @tmpdatabasename 
					and a.principalid = @tmpprincipalid

		fetch next from myc102
		into @tmpdatabasename, @tmpprincipalid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
		end

		close myc102
		deallocate myc102

	-- step 2.18
		-- NEED TO ADD SCHEMA COVERING PERMISSION FROM DATABASE PERMISSION
		-- BY EXPANDING ON EXISTING DATABASE PERMISSION TO SCHEMA LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct a.snapshotid, 
			'SCH',
			logintype, 
			loginname, 
			connectionname, 
			@databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			3, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			c.schemaid,
			c.schemaname, 
			'iSCM', 
			c.schemaid, 
			c.schemaname,
			c.uid,
			dbo.getdatabaseprincipalname(a.snapshotid, @databaseid, c.uid),
			isaliased,
			'DB',
			'Y',
			sourcename,
			sourcetype,
			sourcepermission
		from 	#tmppermission a, 
			coveringpermissionhierarchy b, 
			databaseschema c
		where 
			c.snapshotid = a.snapshotid and 
			c.dbid = @databaseid and 
			c.schemaid < 16383 and
			UPPER(b.permissionlevel) = 'SCHEMA' and 
			UPPER(b.parentpermissionlevel) = 'DATABASE' and 
			UPPER(b.parentcoveringpermission) = UPPER(a.permission) and 
			UPPER(a.permissionlevel) = 'DB' and 
			UPPER(a.objecttype) = 'DB' and 
			UPPER(a.permissiontype) = 'EF' and 
			UPPER(a.permission) IN ('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'EXECUTE', 'VIEW DEFINITION', 'ALTER ANY SCHEMA', 'ALTER', 'CONTROL')	

		-- schema id greater than 16382 is database built in roles

		-- COPY ALL THE SCHEMA EXPLICIT PERMISSION AS EFFECTIVE
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'SCH'		


		-- TODO: NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 3 and UPPER(b.permissionlevel) = 'SCHEMA' and b.coveringpermissionname = a.permission

		delete from #tmppermission2	

		-- COPY THE EXISTING SCHEMA DATA TO ANOTHER TABLE EXCEPT THE PERMISSION AND GRANTING/DENY ATTRIBUTES
		insert into #tmppermission2 (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select 	distinct snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'SCH' and UPPER(permissiontype) = 'EF'

		declare @tmpgrantee int
		declare @tmpschemaid int

		-- GET ALL THE SCHEMA THAT HAS THE SAME GRANTEE AS THE DATABASE
		declare myc202 cursor for
			select distinct cc.grantor, cc.grantorname, cc.databasename, cc.schemaid, cc.grantee, aa.permission, aa.isgrant, aa.isgrantwith, aa.isdeny, aa.isrevoke
			from #tmppermission aa, #tmppermission2 cc
			where UPPER(aa.permissionlevel) = 'DB' 
				and aa.objecttype = 'DB' 
				and UPPER(aa.permissiontype) = 'EF' 
				and aa.grantee = cc.grantee
				and aa.grantor = cc.grantor
		open myc202
		fetch next from myc202
		into @tmpgrantor, @tmpgrantorname, @tmpdatabasename, @tmpschemaid, @tmpgrantee,@#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
		while @@fetch_status = 0
		begin
	
			-- COPY A ROW FROM #tmppermission2 
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				@tmpgrantor, 
				@tmpgrantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.[permissionname] , 
				@tmpgrant, 
				@tmpgrantwith, 
				@tmprevoke, 
				@tmpdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				'DB',
				'Y',
				sourcename,
				sourcetype,
				sourcepermission
			from 	#tmppermission2 a
				, getcoveringpermission('DATABASE',@#tmppermission,'SCHEMA' ) b
			where UPPER(a.permissionlevel) = 'SCH' 
				and a.grantee = @tmpgrantee
				and a.databasename = @tmpdatabasename
				and a.schemaid = @tmpschemaid
				-- 12/29/06 MSO added the following line to fix PR#801374
				and a.permission = b.permissionname
		fetch next from myc202
		into @tmpgrantor, @tmpgrantorname, @tmpdatabasename, @tmpschemaid, @tmpgrantee,@#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
		end

		close myc202
		deallocate myc202
		
	-- step 2.19
		-- NEED TO ADD OBJECT COVERING PERMISSION FROM SCHEMA PERMISSION
		-- BY EXPANDING ON EXISTING SCHEMA PERMISSION TO OBJECT LEVEL

		-- THIS COVERING ONLY PERTAINS TO SCHEMA LEVEL PERMISSION. NO DATABASE LEVEL OR FIXED ROLE HERE.
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			coveringfrom,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select distinct a.snapshotid, 
			'OBJ',
			logintype, 
			loginname, 
			connectionname, 
			@databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			c.classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			c.objectid,
			c.name, 
			c.type, 
			a.schemaid, 
			a.schemaname,
			c.owner,
			dbo.getdatabaseprincipalname(a.snapshotid, @databaseid, c.owner),
			isaliased,
			'DB',
			'Y',
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b, databaseobject c
		where 
			a.snapshotid = @snapshotid and
			c.snapshotid = a.snapshotid and 
			c.schemaid = a.schemaid and 
			c.dbid = @databaseid and 
			UPPER(b.permissionlevel) = 'OBJECT' and 
			UPPER(b.parentpermissionlevel) = 'SCHEMA' and 
			UPPER(b.parentcoveringpermission) = UPPER(a.permission) and 
			a.classid = 3 and 
			UPPER(a.permissiontype) = 'EF' and 
			UPPER(a.permission) IN ('SELECT', 'INSERT', 'UPDATE', 'DELETE', 'REFERENCES', 'EXECUTE', 'ALTER', 'CONTROL', 'VIEW DEFINITION') 
			and a.sourcetype not in ('DB', 'iDRLE')

		-- COPY ALL OBJECT EXPLICIT PERMISSION AS EFFECTIVE
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct   snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) IN ('OBJ')

		-- OBJECT LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where 
			a.classid = 1 and
			UPPER(b.permissionlevel) = 'OBJECT' and
			b.coveringpermissionname = a.permission

	-- step 2.20
		-- REMOTE SERVICE BINDING LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where 
			a.classid = 18 and
			UPPER(b.permissionlevel) = 'REMOTE SERVICE BINDING' and
			b.coveringpermissionname = a.permission


		-- ROUTE LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 19 and
			UPPER(b.permissionlevel) = 'ROUTE'
			and b.coveringpermissionname = a.permission

		-- FULLTEXT CATELOG LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct   snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 23 and
			UPPER(b.permissionlevel) = 'FULLTEXT CATALOG' and
			b.coveringpermissionname = a.permission

		-- SYMMETRIC KEY LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 24 and
			UPPER(b.permissionlevel) = 'SYMMETRIC KEY' and
			b.coveringpermissionname = a.permission

		-- CERTIFICATE LEVEL - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct   snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 25 and
			UPPER(b.permissionlevel) = 'CERTIFICATE' and
			b.coveringpermissionname = a.permission

		-- ASYMMETRIC KEY - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 26 and
			UPPER(b.permissionlevel) = 'ASYMMETRIC KEY' and
			b.coveringpermissionname = a.permission

		-- TYPE - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct  snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 6 and
			UPPER(b.permissionlevel) = 'TYPE' and
			b.coveringpermissionname = a.permission

		-- XML SCHEMA COLLECTION - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 10 and
			UPPER(b.permissionlevel) = 'XML SCHEMA COLLECTION' and
			b.coveringpermissionname = a.permission

		-- ASSEMBLY - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 5 and
			UPPER(b.permissionlevel) = 'ASSEMBLY' and
			b.coveringpermissionname = a.permission


		-- USER - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct   snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 4 and
			UPPER(b.permissionlevel) = 'USER' and
			b.coveringpermissionname = a.permission

		-- CONTRACT - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where
			a.classid = 16 and
			UPPER(b.permissionlevel) = 'CONTRACT' and
			b.coveringpermissionname = a.permission

		-- SERVICE - NEED TO BREAK DOWN HIGH LEVEL PERMISSION LIKE CONTROL TO MORE DETAIL PERMISSION PRIOR TO ADDING COVERING PERMISSION TO LOWER LEVEL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct   snapshotid, 
			a.permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			b.permissionname, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission a, coveringpermissionhierarchy b
		where a.classid = 17 and UPPER(b.permissionlevel) = 'SERVICE' and b.coveringpermissionname = a.permission

		delete from #tmppermission2

		-- FOR ALL OBJECTS WHOSE SCHEMA HAS COVERING PERMISSIONS, COPY THEM TO PERMISSION2 AS STAGING AREA
		-- IT'S POSSIBLE THERE IS NO EXISTING PERMISSION ON THE OBJECT
		insert into #tmppermission2 (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select 	distinct snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 			
			permissiontype, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'OBJ' and UPPER(permissiontype) = 'EF' and schemaid IS NOT NULL

		if (@issysadminrole = 'N')
		begin

			-- IF THERE IS NO CURRENT PERMISSION ON THE OBJECT THEN CREATE A DUMMY ROW
			if not exists (select 1 from #tmppermission2)
			begin
		
				insert into #tmppermission2 (
					snapshotid, 
					permissionlevel,
					logintype, 
					loginname, 
					connectionname, 
					databasename, 
					classid, 
					permissiontype, 
					objectid,
					objectname, 
					objecttype, 
					schemaid, 
					schemaname,
					owner,
					ownername,
					isaliased) 
				select distinct 
					a.snapshotid, 
					'OBJ',
					@logintype,
					@loginname,
					@connectionname,
					@databasename, 
					d.classid,
					'TP',
					d.objectid,
					d.name, 
					d.type, 
					d.schemaid, 
					dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
					d.owner,
					dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
					a.isalias
				from 
					databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
					#tmpuid c, 
					databaseobject d,
					databaseschema f
				where 
					a.snapshotid = @snapshotid and 
					(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and 
					a.dbid = c.dbid and
					d.snapshotid = a.snapshotid and 
					d.dbid = a.dbid and
					f.snapshotid = d.snapshotid and
					f.dbid = c.dbid and
					d.schemaid = f.schemaid and
					d.dbid = f.dbid and
					d.snapshotid = f.snapshotid and
					a.dbid = @databaseid and
					d.parentobjectid = 0 and
					d.classid = 1
			end
		end
		
		-- APPLY SCHEMA COVERING PERMISSION TO THE OBJECTS FROM DATABASE FIXED ROLE	
		declare myc302 cursor for
			select distinct  aa.grantor, aa.grantorname, aa.grantee, aa.granteename, cc.databasename, cc.schemaid , aa.permission, aa.isgrant, aa.isgrantwith, aa.isdeny, aa.isrevoke  
			from #tmppermission aa, #tmppermission2 cc
			where UPPER(aa.permissionlevel) = 'SCH' 
				and UPPER(aa.permissiontype) = 'EF' 
				and aa.schemaid = cc.schemaid 
				and aa.databasename = @databasename
				and aa.sourcetype in ('DB', 'iDRLE')

		open myc302
		fetch next from myc302
			into @tmpgrantor, @tmpgrantorname, @tmpgrantee, @tmpgranteename, @tmpdatabasename, @tmpschemaid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke

		while @@fetch_status = 0
		begin
			-- THERE MIGHT BE REDUNDENCY WHEN COVERING PERMISSION PRODUCES SAME LOWER LEVEL PERMISSION		
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select distinct snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				@tmpgrantor, 
				@tmpgrantorname,
				@tmpgrantee, 
				@tmpgranteename,
				classid, 
				'EF', 
				b.permissionname,
				@tmpgrant, 
				@tmpgrantwith, 
				@tmprevoke, 
				@tmpdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				'SCH',
				'Y',
				@tmpgrantorname,
				'iDRLE',
				b.permissionname
			from 	#tmppermission2 a
			, getcoveringpermission('SCHEMA',@#tmppermission,'OBJECT' ) b
			where UPPER(a.permissionlevel) = 'OBJ' 
			 	and a.databasename = @tmpdatabasename 
			 	and a.schemaid = @tmpschemaid

			fetch next from myc302
				into @tmpgrantor, @tmpgrantorname, @tmpgrantee, @tmpgranteename, @tmpdatabasename, @tmpschemaid, @#tmppermission, @tmpgrant, @tmpgrantwith, @tmpdeny, @tmprevoke
		end

		close myc302
		deallocate myc302
	

		--select distinct grantorname from #tmppermission where isdeny = 'Y'

	-- step 2.21
		-- CHECK COLUMN PERMISSIONS
		-- COPY ALL OBJECT EXPLICIT PERMISSION AS EFFECTIVE
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			parentobjectid,
			objectid,
			objectname, 
			qualifiedname,
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission)
		select  distinct   snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			'EF', 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			parentobjectid,
			objectid,
			objectname, 
			qualifiedname,
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission
		from #tmppermission
		where UPPER(permissionlevel) = 'COL'


		delete from #tmppermission2
		drop table #tmpcovering
	
	end

	END		-- End SQL Server 2005 processing
	ELSE
	BEGIN	-- Begin SQL Server 2000 processing

		-- TODO: NEED TO EXPAND DATABASE FIXED TO COVERING OBJECT PERMISSION, SKIP SCHEMA FOR 2000

		-- GIVEN THE UID (USERS AND ROLES) NEED TO GET DATABASE PRINCIPAL PERMISSION
		-- TO GET TO OBJECTS, USE EITHER SCHEMA ID OR OWNER
		-- IF OWNER IS NULL THEN USE SCHEMAID
		-- IF OWNER AND SCHEMA ID ARE NULL THEN IT IS A COLUMN, NEED TO FIND ITS PARENT AND GET OWNER
	
	-- step 3.01
		-- GET SQL 2000 ALL OBJECTS EXCEPT COLUMN PERMISSION WHERE OWNER IS NOT NULL
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			objectid,
			objectname, 
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
		select distinct 
			a.snapshotid, 
			'OBJ',
			@logintype,
			@loginname,
			@connectionname,
			@databasename, 
			e.principalid,
			principalname=e.name,
			principaltype=e.type,
			databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
			databaseprincipaltype=a.type, 
			d.grantor, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
			d.grantee, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
			d.classid,
			'EX',
			d.permission,
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny,
			d.objectid,
			d.objectname, 
			d.objecttype, 
			d.schemaid, 
			dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
			d.owner,
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
			a.isalias,
			'N',
			d.objectname,
			d.objecttype,
			d.permission
		from 
			databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
			#tmpuid c, 
			vwdatabaseobjectpermission d
		where 
			a.snapshotid = @snapshotid and 
			a.dbid = @databaseid and 
			(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and 
			a.dbid = c.dbid and
			d.snapshotid = a.snapshotid and 
			d.grantee = c.uid and 
			d.dbid = c.dbid and  
			d.owner is not null and
			d.classid <> 0 and 
			(d.schemaid = 0 or d.schemaid is null)
	
	-- step 3.02
		-- GET SQL 2000 COLUMN PERMISSION WHERE OWNER IS NULL, SO USE PARENTOBJECT ID TO GET OWNER
		insert into #tmppermission (
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			parentobjectid,
			objectid,
			objectname, 
			qualifiedname,
			objecttype, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			inherited,
			sourcename,
			sourcetype,
			sourcepermission) 
		select distinct 
			a.snapshotid, 
			'COL',
			@logintype,
			@loginname,
			@connectionname,
			@databasename, 
			e.principalid,
			principalname=e.name,
			principaltype=e.type,
			databaseprincipal=CASE WHEN UPPER(a.isalias) = 'Y' THEN dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.altuid) ELSE a.name END, 
			databaseprincipaltype=a.type, 
			d.grantor, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantor),
			d.grantee, 
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.grantee),
			d.classid,
			'EX',
			d.permission,
			d.isgrant, 
			d.isgrantwith, 
			d.isrevoke, 
			d.isdeny,
			d.parentobjectid,
			d.objectid,
			d.objectname, 
			dbo.gettablename(@snapshotid, @databaseid, d.parentobjectid) + '.' + d.objectname,
			d.objecttype, 
			d.schemaid, 
			dbo.getschemaname(d.snapshotid, d.dbid, d.schemaid),
			d.owner,
			dbo.getdatabaseprincipalname(d.snapshotid, d.dbid, d.owner),
			a.isalias,
			'N',
			dbo.gettablename(@snapshotid, @databaseid, d.parentobjectid) + '.' + d.objectname,
			d.objecttype, 
			d.permission
		from
			databaseprincipal a left outer join serverprincipal e on a.snapshotid = e.snapshotid and a.usersid = e.sid, 
			#tmpuid c, 
			vwdatabasecolumnpermission d
		where
			a.snapshotid = @snapshotid and 
			a.dbid = @databaseid and 
			(a.uid = c.uid or (UPPER(a.isalias) = 'Y' and a.altuid = c.uid)) and 
			c.dbid = a.dbid and
			d.snapshotid = a.snapshotid and 
			d.grantee = c.uid and 
			d.dbid = c.dbid and  
			(d.schemaid = 0 or d.schemaid is null)

	-- step 3.03
		if (@issysadminrole = 'Y')
		begin
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				qualifiedname,
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			values ( 
				@snapshotid, 
				'SV',
				'S', 
				@loginname, 
				@connectionname, 
				NULL, 
				1, 
				'sysadmin', 
				'S', 
				NULL, 
				NULL, 
				1, 
				'sa', 
				1, 
				'sysadmin', 
				100, 
				'EX',
				'CONTROL', 
				'Y', 
				'Y',
				'N', 
				'N', 
				1,
				@connectionname,
				@connectionname,
				'iSRV',
				NULL, 
				NULL,
				NULL,
				NULL,
				'N',
				'SV',
				'N',
				'sysadmin',
				'Server Role',
				'CONTROL'
				)
	
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				qualifiedname,
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			values ( 
				@snapshotid, 
				'SV',
				'S', 
				@loginname, 
				@connectionname, 
				NULL, 
				1, 
				'sa', 
				'S', 
				NULL, 
				NULL, 
				1, 
				'sa', 
				1, 
				'sysadmin', 
				100, 
				'EF',
				'CONTROL', 
				'Y', 
				'Y',
				'N', 
				'N', 
				1,
				@connectionname,
				@connectionname,
				'iSRV',
				NULL, 
				NULL,
				NULL,
				NULL,
				'N',
				'SV',
				'N',
				'sysadmin',
				'Server Role',
				'CONTROL'
				)
	
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				qualifiedname,
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			values ( 
				@snapshotid, 
				'DB',
				'S', 
				@loginname, 
				@connectionname, 
				@databasename, 
				1, 
				'sa', 
				'S', 
				NULL, 
				NULL, 
				1, 
				'sa', 
				1, 
				'sysadmin', 
				0, 
				'EF',
				'CONTROL', 
				'Y', 
				'Y',
				'N', 
				'N', 
				1,
				@databasename,
				@databasename,
				'DB',
				NULL, 
				NULL,
				NULL,
				NULL,
				'N',
				'SV',
				'Y',
				'sysadmin',
				'Server Role',
				'CONTROL'
				)
		end

	-- step 3.04a	Server fixed role
		if (@geteffective = 'Y' and @issysadminrole = 'N')	
		begin

			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   a.snapshotid, 
				'SV',
				@logintype, 
				@loginname, 
				@connectionname, 
				NULL, 
				a.memberprincipalid, 
				dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
				dbo.getserverprincipaltype(a.snapshotid, a.memberprincipalid), 
				NULL, 
				NULL, 
				a.principalid, 
				dbo.getserverprincipalname(a.snapshotid, a.principalid), 
				a.memberprincipalid, 
				dbo.getserverprincipalname(a.snapshotid, a.memberprincipalid), 
				100, 
				'EF', 
				rolepermission, 
				c.isgrant, 
				c.isgrantwith, 
				c.isrevoke, 
				c.isdeny, 
				0,
				@connectionname, 
				'iSRV', 
				NULL, 
				NULL,
				NULL,
				NULL,
				'N',
				'FXROLE',
				'N',
				c.rolename,
				'Server Role',
				rolepermission
			from 
				vwfixedserverrolemember a, 
				#tmplogins b ,
				fixedrolepermission c
			where 
				a.snapshotid = @snapshotid and 
				a.memberprincipalid = b.principalid and
				UPPER(a.name) = UPPER(c.rolename) and
				c.roletype = 'P'	

	-- step 3.05
			-- PROCESS FIXED DATABASE ROLE PERMISSION
			-- GET ALL EFFECTIVE PERMISSION ASSOCIATES WITH THE FIXED DATABASE ROLE AND INSERT THEM AS EFFECTIVE PERMISSIONS
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				coveringfrom,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select distinct    a.snapshotid, 
				'DB',
				@logintype, 
				@loginname, 
				@connectionname, 
				d.databasename, 
				f.principalid, 
				f.name, 
				f.type, 
				dbo.getdatabaseprincipalname(e.snapshotid, e.dbid, e.uid), 
				e.type, 
				a.uid, 
				a.name, 
				b.uid, 
				dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.rolememberuid), 
				0, 
				'EF', 
				rolepermission, 
				c.isgrant, 
				c.isgrantwith, 
				c.isrevoke, 
				c.isdeny, 
				d.dbid,
				d.databasename, 
				'DB', 
				NULL, 
				NULL,
				dbo.getdatabaseprincipalid(d.snapshotid, d.dbid, d.owner),
				d.owner, 
				'N',
				'DBFXROLE',
				'N',
				c.rolename,
				'iDRLE',
				rolepermission
			from 
				vwfixeddatabaserolemember a, 
				#tmpuid b,
				fixedrolepermission c,
				sqldatabase d,
				databaseprincipal e left outer join serverprincipal f on e.snapshotid = f.snapshotid and e.usersid = f.sid
			where 
				a.snapshotid = @snapshotid and 
				a.dbid = b.dbid and 
				a.rolememberuid = b.uid and
				e.snapshotid = a.snapshotid and
				e.uid = b.uid and 
				e.dbid = b.dbid and
				UPPER(a.name) = UPPER(c.rolename) and
				d.dbid = a.dbid and
				d.snapshotid = a.snapshotid and
				d.databasename = @databasename and 
				c.roletype = 'D'
		
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct   snapshotid, 
				a.permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				b.permissionname, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission a, coveringpermissionhierarchy b
			where a.classid = 0 and UPPER(b.permissionlevel) = 'OBJECT' and b.coveringpermissionname = a.permission

	-- step 3.06
			-- FOR 2000, ALL EXPLICIT ARE EFFECTIVE PERMISSION
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				parentobjectid,
				objectid,
				objectname, 
				qualifiedname,
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select distinct    snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				'EF', 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				parentobjectid,
				objectid,
				objectname, 
				qualifiedname,
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission
			from #tmppermission

			--select * from #tmppermission

			-- Apply database fixed role permission to all objects
			insert into #tmppermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permissiontype, 
				permission, 
				isgrant, 
				isgrantwith, 
				isrevoke, 
				isdeny, 
				objectid,
				objectname, 
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername,
				isaliased,
				inherited,
				sourcename,
				sourcetype,
				sourcepermission)
			select  distinct b.snapshotid, 
				'OBJ',
				b.logintype, 
				b.loginname, 
				b.connectionname, 
				b.databasename, 
				b.principalid, 
				b.principalname, 
				b.principaltype,
				b.databaseprincipal, 
				b.databaseprincipaltype, 
				b.grantor, 
				b.grantorname,
				b.grantee, 
				b.granteename,
				a.classid, 
				'EF', 
				b.permission, 
				b.isgrant, 
				b.isgrantwith, 
				b.isrevoke, 
				b.isdeny, 
				a.objectid,
				a.name, 
				a.type, 
				b.schemaid, 
				b.schemaname,
				a.owner,
				dbo.getdatabaseprincipalname(a.snapshotid, a.dbid, a.owner), 
				b.isaliased,
				'Y',
				sourcename,
				sourcetype,
				sourcepermission
			from databaseobject a, #tmppermission b
			where 
				a.snapshotid = @snapshotid and
				a.dbid = @dbid and
				a.snapshotid = b.snapshotid and
				a.classid = 1 and 
				b.objecttype ='DB' and
				a.type <> 'iCO' and
				b.permission in ('SELECT', 'INSERT', 'DELETE', 'UPDATE', 'REFERENCES', 'EXECUTE')
	
	-- step 3.07   ?????
			-- remove all databse fixed role
			delete from #tmppermission where permissionlevel = 'DB' and permission not in ('CREATE TABLE', 'CREATE PROCEDURE', 'CREATE VIEW', 'CREATE DEFAULT', 'CREATE RULE', 'CREATE FUNCTION', 'BACKUP DATABASE', 'BACKUP LOG')
			delete from #tmppermission where permissionlevel = 'DB' and permission not in ('CREATE TABLE', 'CREATE PROCEDURE', 'CREATE VIEW', 'CREATE DEFAULT', 'CREATE RULE', 'CREATE FUNCTION', 'BACKUP DATABASE', 'BACKUP LOG')
			delete from #tmppermission where objecttype = 'P' and UPPER(permission) NOT IN ('ALTER', 'CONTROL', 'EXECUTE', 'TAKE OWNERSHIP', 'VIEW DEFINITION')
			delete from #tmppermission where objecttype = 'FN' and UPPER(permission) NOT IN ('REFERENCES', 'EXECUTE')
			delete from #tmppermission where objecttype = 'iCO' and UPPER(permission) NOT IN ('REFERENCES', 'SELECT', 'UPDATE')
	
		end
	END		-- End SQL Server 2000 processing

	-- step 4.01
	-- DELETE PERMISSIONS ONLY APPLICABLE TO CERTAIN TYPE OF OBJECTS
	-- LIKE TABLE SHOULD NOT HAVE EXECUTE OR SP SHOULD NOT HAVE SELECT
	if exists (select 1 from #tmppermission where objecttype IN ('U', 'V') and UPPER(permission) NOT IN ('ALTER', 'CONTROL', 'DELETE', 'INSERT', 'REFERENCES', 'SELECT', 'TAKE OWNERSHIP', 'UPDATE', 'VIEW CHANGE TRACKING', 'VIEW DEFINITION'))
		delete from #tmppermission where objecttype IN ('U', 'V') and UPPER(permission) NOT IN ('ALTER', 'CONTROL', 'DELETE', 'INSERT', 'REFERENCES', 'SELECT', 'TAKE OWNERSHIP', 'UPDATE', 'VIEW CHANGE TRACKING', 'VIEW DEFINITION')

	if exists (select 1 from #tmppermission where objecttype IN ('U', 'S', 'iSCM') and UPPER(permission) = 'VIEW CHANGE TRACKING')
		delete from #tmppermission where objecttype IN ('U', 'S', 'iSCM') and UPPER(permission) = 'VIEW CHANGE TRACKING'

	if exists (select 1 from #tmppermission where objecttype = 'iCO' and UPPER(permission) NOT IN ('REFERENCES', 'SELECT', 'UPDATE'))
		delete from #tmppermission where objecttype = 'iCO' and UPPER(permission) NOT IN ('REFERENCES', 'SELECT', 'UPDATE')

	if exists (select 1 from #tmppermission where objecttype = 'P' and UPPER(permission) NOT IN ('ALTER', 'CONTROL', 'EXECUTE', 'TAKE OWNERSHIP', 'VIEW DEFINITION'))
		delete from #tmppermission where objecttype = 'P' and UPPER(permission) NOT IN ('ALTER', 'CONTROL', 'EXECUTE', 'TAKE OWNERSHIP', 'VIEW DEFINITION')

	-- step 4.02
	-- MORE FILTERING LATER
	if (@geteffective = 'Y')
	begin
		if (@issysadminrole = 'Y')
		begin
			-- IF SYSADMIN ROLE THEN ALL DENY CANNOT OVERRIDE THE GRANT PERMISSION
			-- SYSADMIN HAVE ALL PRIVILEGES
			update #tmppermission set isdeny='N', isgrant='Y' where permissiontype = 'EF' and isdeny = 'Y'
		end
		else
		begin

	-- step 4.03
			-- LAST STEP IS TO NEGATE THE PERMISSION BASED ON DBID, OBJECT, SNAPSHOTID, PERMISSION NAME
			insert into #tmpdenypermission (
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permission, 
				parentobjectid,
				objectid, 
				objectname,
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername)
			select distinct
				snapshotid, 
				permissionlevel,
				logintype, 
				loginname, 
				connectionname, 
				databasename, 
				principalid, 
				principalname, 
				principaltype,
				databaseprincipal, 
				databaseprincipaltype, 
				grantor, 
				grantorname,
				grantee, 
				granteename,
				classid, 
				permission, 
				parentobjectid,
				objectid, 
				objectname,
				objecttype, 
				schemaid, 
				schemaname,
				owner,
				ownername
			from #tmppermission
			where 
				permissiontype = 'EF' and 
				isdeny = 'Y' 

			-- SQL SERVER SYNTAX ONLY DELETE
			-- DELETE ALL THE GRANT OR GRANT ALL PERMISSION THAT HAVE A DENY
			-- THE PERMISSION WITH DENY IS NOT DELETED

			delete #tmppermission 
			from #tmppermission a, #tmpdenypermission b
			where 
				a.snapshotid = b.snapshotid and 
				a.logintype = b.logintype and  
				ISNULL(a.loginname, '') = ISNULL(b.loginname, '') and  
				a.connectionname = b.connectionname and  
				ISNULL(a.databasename, '') = ISNULL(b.databasename, '') and  
				a.classid = b.classid and  
				a.permission = b.permission and  
				ISNULL(a.parentobjectid, '') = ISNULL(b.parentobjectid, '') and 
				a.objectid = b.objectid and  
				a.objectname = b.objectname and 
				a.objecttype = b.objecttype and  
				ISNULL(a.schemaid, '') = ISNULL(b.schemaid, '') and
				a.permissiontype = 'EF' and a.isdeny = 'N' 				
		end
	end

	-- if only effective then remove explicit permission before returning
	if (@permissiontype = 'E')
	begin
		delete from #tmppermission where permissiontype = 'EX'
	end

	-- FOR ALIAS USERS, ONLY THOSE BELONGS TO LOGIN MEMBERSHIP
	delete from #tmppermission from #tmppermission a, #tmplogins b where a.isaliased = 'Y' and a.principalid <> b.principalid

	-- UPDATE THE QUALIFIED NAME FOR ALL OBJECTS EXCEPT COLUMN TYPE
	update #tmppermission set qualifiedname = objectname where permissionlevel <> 'COL'

	-- If there is a high level table (avoid nested sql server error), simply insert to the parent table
	-- This is a way to collect data from tmppermission
	if exists (select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmpserverpermission%')
	begin
		insert into #tmpserverpermission select  distinct  * from #tmppermission


	end
	else -- else just show all data, the caller is UI
	begin

	exec ('select distinct 
			snapshotid, 
			permissionlevel,
			logintype, 
			loginname, 
			connectionname, 
			databasename, 
			principalid, 
			principalname, 
			principaltype,
			databaseprincipal, 
			databaseprincipaltype, 
			grantor, 
			grantorname,
			grantee, 
			granteename,
			classid, 
			permissiontype, 
			permission, 
			isgrant, 
			isgrantwith, 
			isrevoke, 
			isdeny, 
			parentobjectid,
			objectid,
			objectname, 
			qualifiedname,
			objecttype=CASE WHEN a.objecttype IS NULL THEN dbo.getclassobjecttype(classid) ELSE a.objecttype END, 
			schemaid, 
			schemaname,
			owner,
			ownername,
			isaliased,
			objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
			inherited,
			sourcename,
			sourcetype,
			sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END,
			sourcepermission
			from #tmppermission a left outer join objecttype b on a.objecttype = b.objecttype
								left outer join objecttype c on a.sourcetype = c.objecttype
			')

	end

	drop table #tmplogins
	drop table #tmpuid
	drop table #tmppermission
	drop table #tmppermission2
	drop table #tmpdenypermission

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getuserpermission] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getweakpasswordlist]'))
drop procedure [dbo].[isp_sqlsecure_getweakpasswordlist]
GO

CREATE procedure [dbo].[isp_sqlsecure_getweakpasswordlist] (@passwordListId int = null)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update policy with new info
   --			   Note system policies cannot be updated and a policy cannot be changed to or from type system

SELECT	passwordlistid,
		custompasswordlist,
		customlistupdated,
		additionalpasswordlist,
		additionallistupdated,
		isweakpassworddetectionenabled as 'passwordCheckingEnabled'
FROM	weakwordlist 
RIGHT OUTER JOIN configuration ON 1=1
				
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getweakpasswordlist] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getwindowsgroup]'))
drop procedure [dbo].[isp_sqlsecure_getwindowsgroup]
GO

create procedure [dbo].[isp_sqlsecure_getwindowsgroup] (@snapshotid int, @inputsid varbinary(85))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all server logins and roles given a windows account sid

	declare @loginname nvarchar(128)
	declare @connectionname nvarchar(400)
	declare @errmsg nvarchar(500)

	-- if there is not such snapshotid then return error
	if not exists (select * from serversnapshot where snapshotid = @snapshotid)
	begin
		set @errmsg = 'Error: Snapshot id ' + CONVERT(varchar(10), @snapshotid) + ' not found'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	create table #tmplogins (sid varbinary(85), principalid int, name nvarchar(128), type nchar(1), serveraccess nchar(1), serverdeny nchar(1), disabled nchar(1))

	-- checks if the login exists in sql server
	if exists (select * from serverprincipal where snapshotid = @snapshotid and sid = @inputsid)
	begin

		create table #tmpsid (sid varbinary(85))

		-- insert current login to tmp table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select sid, principalid, name, type, serveraccess, serverdeny, disabled from serverprincipal where snapshotid = @snapshotid and sid = @inputsid)

		-- get all windows parents groups
		insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid

		-- insert all groups in serverprincipal table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, disabled) (select a.sid, a.principalid, a.name, a.type, a.serveraccess, a.disabled from serverprincipal a, #tmpsid b where a.snapshotid = @snapshotid and a.sid = b.sid)

		select @loginname = name from serverprincipal where sid = @inputsid

		drop table #tmpsid				
	end 

	-- testing show all permission
	exec ('select * from #tmplogins')


	-- TODO: compute effective

	drop table #tmplogins

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getwindowsgroup] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getwindowsgroupparents]'))
drop procedure [dbo].[isp_sqlsecure_getwindowsgroupparents]
GO

CREATE procedure [dbo].[isp_sqlsecure_getwindowsgroupparents] (@snapshotid int, @inputsid varbinary(85))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all windows group parents given the snapshot id and input sid

	create table #tmpsid (sid varbinary(85))
	create table #tmpsid2 (sid varbinary(85))
	create table #tmpsid3 (sid varbinary(85))

	declare @count int
	declare @rcount int
	declare @sid varbinary(85)

	-- get all immediate parent sids
	insert into #tmpsid (sid) (select groupsid from windowsgroupmember where snapshotid = @snapshotid and groupmember = @inputsid)
	set @count = @@rowcount
	set @rcount = 1

	-- if there is at least one parent then try to find all parents
	while (@count > 0 and @rcount < 100)
	begin

		-- go thru' tmpsid table, for each sid try to find its parents
		declare myc0 cursor for
			select sid from #tmpsid
		
		open myc0
		fetch next from myc0
		into @sid
		
		while @@fetch_status = 0
		begin
			-- copy sid to tmp table
			insert into #tmpsid2 (sid) values (@sid)	
			
			-- copy all new parent sid to another tmp table
			insert into #tmpsid3 (sid) (select groupsid from windowsgroupmember where snapshotid = @snapshotid and groupmember = @sid)

			fetch next from myc0
			into @sid	
		end
	
		close myc0
		deallocate myc0	

		delete from #tmpsid

		-- copy all new parent sid to holding table
		insert into #tmpsid (sid) (select sid from #tmpsid3 where sid not in (select sid from #tmpsid2))				
		
		delete from #tmpsid3

		-- if there is no more new parent then stop
		set @count = @@rowcount

		set @rcount = @rcount + 1
	end

	-- return all rows from the holding table
	exec ('select distinct sid from #tmpsid2')

	drop table #tmpsid
	drop table #tmpsid2
	drop table #tmpsid3

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getwindowsgroupparents] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_getwindowsgroupparentsos]'))
drop procedure [dbo].[isp_sqlsecure_getwindowsgroupparentsos]
GO

CREATE procedure [dbo].[isp_sqlsecure_getwindowsgroupparentsos] (@snapshotid int, @inputsid varbinary(85))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all windows group parents given the snapshot id and input sid for the os windows accounts

	create table #tmpsid (sid varbinary(85))
	create table #tmpsid2 (sid varbinary(85))
	create table #tmpsid3 (sid varbinary(85))

	declare @count int
	declare @rcount int
	declare @sid varbinary(85)

	-- get all immediate parent sids
	insert into #tmpsid (sid) (select groupsid from serveroswindowsgroupmember where snapshotid = @snapshotid and groupmember = @inputsid)
	set @count = @@rowcount
	set @rcount = 1

	-- if there is at least one parent then try to find all parents
	while (@count > 0 and @rcount < 100)
	begin

		-- go thru' tmpsid table, for each sid try to find its parents
		declare myc0 cursor for
			select sid from #tmpsid
		
		open myc0
		fetch next from myc0
		into @sid
		
		while @@fetch_status = 0
		begin
			-- copy sid to tmp table
			insert into #tmpsid2 (sid) values (@sid)	
			
			-- copy all new parent sid to another tmp table
			insert into #tmpsid3 (sid) (select groupsid from serveroswindowsgroupmember where snapshotid = @snapshotid and groupmember = @sid)

			fetch next from myc0
			into @sid	
		end
	
		close myc0
		deallocate myc0	

		delete from #tmpsid

		-- copy all new parent sid to holding table
		insert into #tmpsid (sid) (select sid from #tmpsid3 where sid not in (select sid from #tmpsid2))				
		
		delete from #tmpsid3

		-- if there is no more new parent then stop
		set @count = @@rowcount

		set @rcount = @rcount + 1
	end

	-- return all rows from the holding table
	exec ('select distinct sid from #tmpsid2')

	drop table #tmpsid
	drop table #tmpsid2
	drop table #tmpsid3

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_getwindowsgroupparentsos] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_groomsnapshots]'))
drop procedure [dbo].[isp_sqlsecure_groomsnapshots]
GO

CREATE procedure [dbo].[isp_sqlsecure_groomsnapshots]
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Grooming all snapshots older than retention period. Also groom snapshots whose server got deleted.
   -- 	           

	declare @connectionname nvarchar(400)
	declare @retentionperiod int
	declare @count int
	declare @daydiff int
	declare @expireddate datetime
	declare @deletestarttime datetime
	declare @deleteendtime datetime
	declare @snapshotid int
	declare @snapshotcount int
	declare @activityid int

	set @deletestarttime = GETUTCDATE()
	set @count = 0

	insert into groomingactivityhistory (activitystarttime, status) values (@deletestarttime, 'P')

	select @activityid = max(groomingactivityid) from groomingactivityhistory

	declare myc1 cursor for
			select distinct connectionname, snapshotretentionperiod 
				from registeredserver 
				where snapshotretentionperiod IS NOT NULL
	
	open myc1
	fetch next from myc1
	into @connectionname, @retentionperiod

	while @@fetch_status = 0
	begin
		set @daydiff = @retentionperiod * -1

		set @expireddate = DATEADD(day, @daydiff, GETUTCDATE())

		print 'expired date ' + CONVERT(NVARCHAR(32), @expireddate)

		-- delete snapshot whose end date is before the retention period
		declare myc2 cursor for
				select snapshotid 
					from serversnapshot 
					where connectionname = @connectionname 
						and endtime IS NOT NULL 
						and endtime < @expireddate
						-- don't delete baseline snapshots
						and isnull(baseline, N'N') <> N'Y'
						-- don't allow deleting snapshots that are used by working assessments
						and snapshotid not in (select distinct a.snapshotid 
													from policyassessment a inner join assessment b on a.policyid = b.policyid
														and a.assessmentid = b.assessmentid
													where b.assessmentstate IN (N'D', N'P', N'A'))

		open myc2
		fetch next from myc2
		into @snapshotid

		while @@fetch_status = 0
		begin
			print 'deleting snapshotid ' + CONVERT(NVARCHAR(128), @snapshotid)
			exec isp_sqlsecure_removesnapshot @snapshotid=@snapshotid

			set @count = @count + 1			

			fetch next from myc2
			into @snapshotid		
		end

		close myc2
		deallocate myc2

		fetch next from myc1
		into @connectionname, @retentionperiod
	end

	close myc1
	deallocate myc1


	-- delete orphan snapshots
	declare myc3 cursor for
			select distinct snapshotid from serversnapshot a where a.connectionname NOT IN (select distinct connectionname from registeredserver)

	open myc3
	fetch next from myc3
	into @snapshotid
	
	while @@fetch_status = 0
	begin
		print 'deleting orphan snapshotid ' + CONVERT(NVARCHAR(128), @snapshotid)
		exec isp_sqlsecure_removesnapshot @snapshotid=@snapshotid

		set @count = @count + 1			
		
		fetch next from myc3
		into @snapshotid
	end

	close myc3
	deallocate myc3

	set @deleteendtime = GETUTCDATE()
	declare @str nvarchar(256)
	set @str = 'Groomed ' + CONVERT(NVARCHAR(32), @count) + ' snapshots.'

	update groomingactivityhistory set activityendtime = @deleteendtime, status = 'C', comment=@str where groomingactivityid = @activityid

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Groom', @category=N'Job', @description=@str, @connectionname = null

GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_isadmin]'))
drop procedure [dbo].[isp_sqlsecure_isadmin]
GO

CREATE procedure [dbo].[isp_sqlsecure_isadmin]
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Check if the user is an admin
   -- 	           

	declare @result nvarchar(24)

	select @result = CASE WHEN IS_SRVROLEMEMBER('sysadmin') = 1 THEN 'admin' ELSE 'no access' END
	
	if (@result = 'admin')
		return 1
	else
		return 0


GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_isadmin] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_isassessmentdatacurrent]'))
drop procedure [dbo].[isp_sqlsecure_isassessmentdatacurrent]
GO

CREATE procedure [dbo].[isp_sqlsecure_isassessmentdatacurrent]
(
	@policyid int,
	@assessmentid int,
	@valid bit out
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Determine if the passed policy or assessment contains valid, current assessment data.
   --
   --			   Returns:
   --					0 if the assessment needs to be recreated
   --					1 if the assessment contains valid and current data
   --
   --			   If the policy is passed (state 'S') then the current assessment will be checked
   --				and if the current assessment doesn't exist it will be created and 0 will be returned
   --			   If an approved assessment is passed, 1 is always returned
   --			   If invalid data is encountered, an error will be thrown and no value is returned
   --
BEGIN
	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Validate', @category=N'Assessment data', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @err int, @msg nvarchar(500)
	declare @policyname nvarchar(128)

	declare @currentid int, 
		@settingsid int, 
		@state nchar(1), 
		@isvalid int,
		@rc int,
		@debug bit

	select @currentid = -1, 
		@settingsid = -1, 
		@state = N'U',
		@isvalid = -1,
		@rc = 0,
		@debug = 0

	select @state=assessmentstate, @policyname=policyassessmentname from vwpolicy where policyid = @policyid and assessmentid = @assessmentid
	if (@debug=1)
	begin
		set nocount off
		print '@policyid='+convert(nvarchar,@policyid)+', @assessmentid='+convert(nvarchar,@assessmentid)+', @state='+@state
	end
	else
		set nocount on

	if (@state = N'U')
	begin
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' for Policy id ' + CONVERT(NVARCHAR, @policyid) + ' and Assessment id ' + CONVERT(NVARCHAR, @assessmentid) + '. The assessment was not found.'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if (@state = N'A')
	begin
		if (@debug=1)
			print 'approved'
		select @isvalid = 1
	end
	else
	begin
		if (@state = N'S')
		begin
			select @settingsid=@assessmentid
			select @currentid=assessmentid from assessment where policyid = @policyid and assessmentstate = 'C'
			select @assessmentid=@currentid		-- will set to -1 if current not found
			select @state = N'C'
			if (@debug=1)
				print 'settings: @settingsid='+convert(nvarchar,@settingsid)+', @currentid='+convert(nvarchar,@currentid)
		end
		else if (@state = N'C')
		begin
			select @currentid=@assessmentid
			if (@debug=1)
				print '@currentid='+convert(nvarchar,@currentid)
		end

		declare @assessmentdate datetime, @usebaseline bit
		declare @snapshots table (registeredserverid int, snapshotid int)
		declare @snapshotssaved table (registeredserverid int, snapshotid int)
		create table #tmp_sqlsecure_getpolicymemberlist (registeredserverid int)

		if (@state = N'C')
		begin
			if (@debug=1)
				print 'current:'
--			if not exists (select * from assessment where policyid = @policyid and assessmentid = @assessmentid)
			if (@assessmentid = -1)
			begin
				if (@debug=1)
					print 'creating current'
				EXEC @rc = [dbo].[isp_sqlsecure_createassessmentfrompolicy]
					@policyid = @policyid,
					@assessmentid = @settingsid,
					@type = N'C',
					@copy = 2,
					@newassessmentid = @currentid output
				if (@rc = 0)
				begin
					select @assessmentid = @currentid,
						@isvalid = 0
					if (@debug=1)
						print 'new @currentid='+convert(nvarchar,@currentid)
				end
				else
				begin
					set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' for Policy ' + @policyname + ' with id ' + CONVERT(NVARCHAR, @policyid) + ' and Assessment id ' + CONVERT(NVARCHAR, @assessmentid) + '. Unable to create current assessment for policy.'
					exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
					drop table #tmp_sqlsecure_getpolicymemberlist
					RAISERROR (@msg, 16, 1)
					return -1
				end
			end
			else 
			begin
				if (@settingsid = -1)	-- if came in as current, then get the settings id for comparison
				begin
					select @settingsid=assessmentid from assessment where policyid = @policyid and assessmentstate = 'S'
					if (@debug=1)
						print '@settingsid='+convert(nvarchar,@settingsid)
				end
			end

			-- get the server member list for the settings
			--create table #tmp_sqlsecure_getpolicymemberlist (registeredserverid int)	created above to handle duplicate use
			exec @err = [dbo].[isp_sqlsecure_getpolicymemberlist] 
				@policyid = @policyid, 
				@assessmentid = @settingsid

			if (@isvalid = -1
				and not exists (select * from policyassessment where policyid = @policyid and assessmentid = @currentid))
			begin
				if (@debug=1)
					print 'policyassessments not found'
				if (exists (select * from policymetric where policyid = @policyid and assessmentid = @settingsid and isenabled = 1)
					and exists (select * from #tmp_sqlsecure_getpolicymemberlist))
				begin
					-- use variables to work around sql 2000 syntax limitations
					select @assessmentdate=assessmentdate, @usebaseline=usebaseline 
						from assessment 
						where policyid = @policyid
							and assessmentid = @settingsid

					if (exists (select snapshotid
							from serversnapshot
							where registeredserverid in (select registeredserverid from #tmp_sqlsecure_getpolicymemberlist)
									and snapshotid in (select snapshotid from dbo.getsnapshotlist(@assessmentdate, @usebaseline))))
					begin
						select @isvalid = 0
						if (@debug=1)
							print 'metrics and valid snapshots found, not valid'
					end
					else
					begin
						select @isvalid = 1
						if (@debug=1)
							print 'metrics and servers found, but no valid snapshots found, valid'
					end
				end
				else
				begin
					select @isvalid = 1
					if (@debug=1)
						print 'metrics or servers not found, valid'
				end
			end
			else 
			begin
				-- check current metrics against the settings metrics
				if exists (select * from policymetric a inner join policymetric b on a.policyid = b.policyid and a.metricid = b.metricid
							where a.policyid = @policyid and a.assessmentid = @settingsid and b.assessmentid = @currentid
								and (a.isenabled <> b.isenabled
									 or a. reportkey <> b.reportkey
									 or a. reporttext <> b.reporttext
									 or a. severity <> b.severity
									 or a. severityvalues <> b.severityvalues))
				begin
					if (@debug=1)
					begin
						print 'current policymetric not matching settings'
						select * from policymetric a inner join policymetric b on a.policyid = b.policyid and a.metricid = b.metricid
							where a.policyid = @policyid and a.assessmentid = @settingsid and b.assessmentid = @currentid
								and (a.isenabled <> b.isenabled
									 or a. reportkey <> b.reportkey
									 or a. reporttext <> b.reporttext
									 or a. severity <> b.severity
									 or a. severityvalues <> b.severityvalues)
					end
					select @isvalid = 0
				end
				else
				begin
					-- use variables to work around sql 2000 syntax limitations
					select @assessmentdate=assessmentdate, @usebaseline=usebaseline 
						from assessment 
						where policyid = @policyid
							and assessmentid = @settingsid

					insert into @snapshots
						select a.registeredserverid, b.snapshotid
							from #tmp_sqlsecure_getpolicymemberlist a left join serversnapshot b on a.registeredserverid = b.registeredserverid
								and b.snapshotid in (select snapshotid from dbo.getsnapshotlist(@assessmentdate, @usebaseline))
							-- only include null snapshots if the snapshot not found metric is enabled
							where b.snapshotid is not null or exists (select * from policymetric where policyid = @policyid and assessmentid = @settingsid and metricid = 54 and isenabled = 1)

					if (@debug=1)
						select * from @snapshots

					insert into @snapshotssaved
						select distinct registeredserverid, snapshotid 
							from policyassessment 
							where policyid = @policyid 
								and assessmentid = @assessmentid

					if (@debug=1)
						select * from @snapshotssaved

					if (exists (select * 
									from @snapshots a left join @snapshotssaved b on a.registeredserverid = b.registeredserverid and isnull(a.snapshotid,0) = isnull(b.snapshotid, 0) 
									where b.registeredserverid is null)
						or exists (select * 
									from @snapshotssaved a left join @snapshots b on a.registeredserverid = b.registeredserverid and isnull(a.snapshotid,0) = isnull(b.snapshotid, 0) 
									where b.registeredserverid is null))
					begin
						if (@debug=1)
							print 'snapshots don''t match'
						select @isvalid = 0
					end
				end
			end
		end
		else	-- process saved assessments
		begin
			-- get the server member list for the assessment
			--create table #tmp_sqlsecure_getpolicymemberlist (registeredserverid int)	created above to handle duplicate use
			exec @err = [dbo].[isp_sqlsecure_getpolicymemberlist] 
				@policyid = @policyid, 
				@assessmentid = @assessmentid

			if not exists (select * from policyassessment where policyid = @policyid and assessmentid = @assessmentid)
			begin
				if (@debug=1)
					print 'policyassessments not found'
				if (exists (select * from policymetric where policyid = @policyid and assessmentid = @assessmentid and isenabled = 1)
					and exists (select * from #tmp_sqlsecure_getpolicymemberlist))
				begin
					-- use variables to work around sql 2000 syntax limitations
					select @assessmentdate=assessmentdate, @usebaseline=usebaseline 
						from assessment 
						where policyid = @policyid
							and assessmentid = @assessmentid

					if (exists (select snapshotid
							from serversnapshot
							where registeredserverid in (select registeredserverid from #tmp_sqlsecure_getpolicymemberlist)
									and snapshotid in (select snapshotid from dbo.getsnapshotlist(@assessmentdate, @usebaseline))))
					begin
						select @isvalid = 0
						if (@debug=1)
							print 'metrics and valid snapshots found, not valid'
					end
					else
					begin
						select @isvalid = 1
						if (@debug=1)
							print 'metrics and servers found, but no valid snapshots found, valid'
					end
				end
				else
				begin
					select @isvalid = 1
					if (@debug=1)
						print 'metrics or servers not found, valid'
				end
			end
			else 
			begin 
				-- check the metrics against the assessment settings to see if any changed
				if exists (select * from policymetric a left join policyassessment b on a.policyid = b.policyid and a.assessmentid = b.assessmentid and a.metricid = b.metricid
							where a.policyid = @policyid and a.assessmentid = @assessmentid
								and ((a.isenabled <> case when b.policyid is null then 0 else 1 end)
									 or a.reportkey <> b.metricreportkey
									 or a.reporttext <> b.metricreporttext
									 or a.severity <> b.metricseveritycode
									 or a.severityvalues <> b.metricseverityvalues))
								-- if only metric 54 is returned, then there were no snapshots and other metrics will not be returned
								and exists (select * from policyassessment where policyid = @policyid and assessmentid = @assessmentid and metricid <> 54)
				begin
					if (@debug=1)
					begin
						print 'policymetric not matching saved values from policyassessment'
						select * from policymetric a left join policyassessment b on a.policyid = b.policyid and a.assessmentid = b.assessmentid and a.metricid = b.metricid
							where a.policyid = @policyid and a.assessmentid = @assessmentid
								and ((a.isenabled <> case when b.policyid is null then 0 else 1 end)
									 or a.reportkey <> b.metricreportkey
									 or a.reporttext <> b.metricreporttext
									 or a.severity <> b.metricseveritycode
									 or a.severityvalues <> b.metricseverityvalues)
					end
					select @isvalid = 0
				end
				else
				begin
					-- use variables to work around sql 2000 syntax limitations
					select @assessmentdate=assessmentdate, @usebaseline=usebaseline 
						from assessment 
						where policyid = @policyid
							and assessmentid = @assessmentid

					insert into @snapshots
						select a.registeredserverid, b.snapshotid
							from #tmp_sqlsecure_getpolicymemberlist a left join serversnapshot b on a.registeredserverid = b.registeredserverid
								and b.snapshotid in (select snapshotid from dbo.getsnapshotlist(@assessmentdate, @usebaseline))
							-- only include null snapshots if the snapshot not found metric is enabled
							where b.snapshotid is not null or exists (select * from policymetric where policyid = @policyid and assessmentid = @assessmentid and metricid = 54 and isenabled = 1)

					if (@debug=1)
						select * from @snapshots

					insert into @snapshotssaved
						select distinct registeredserverid, snapshotid 
							from policyassessment 
							where policyid = @policyid 
								and assessmentid = @assessmentid

					if (@debug=1)
						select * from @snapshotssaved

					if (exists (select * 
									from @snapshots a left join @snapshotssaved b on a.registeredserverid = b.registeredserverid and isnull(a.snapshotid,0) = isnull(b.snapshotid, 0) 
									where b.registeredserverid is null)
						or exists (select * 
									from @snapshotssaved a left join @snapshots b on a.registeredserverid = b.registeredserverid and isnull(a.snapshotid,0) = isnull(b.snapshotid, 0) 
									where b.registeredserverid is null))
					begin
						if (@debug=1)
							print 'snapshots don''t match'
						select @isvalid = 0
					end
				end
			end
		end

		-- drop the temp table used for snapshot comparison
		drop table #tmp_sqlsecure_getpolicymemberlist
	end

	-- it passed all the tests, so it should be valid
	if (@isvalid = -1)
	begin
		if (@debug=1)
			print 'assessment is valid'
		select @isvalid = 1
	end

	select @valid = @isvalid
END

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_isassessmentdatacurrent]   TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_issqlagentrunning]'))
drop procedure [dbo].[isp_sqlsecure_issqlagentrunning]
GO

CREATE procedure [dbo].[isp_sqlsecure_issqlagentrunning] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks if SQL agent is running or not. Returns a Y or N
   -- 	    

	create table #tmpdata (data nvarchar(64))

	insert into #tmpdata exec master.dbo.xp_servicecontrol 'QUERYSTATE', 'SQLServerAgent' 

	select isrunning=CASE WHEN UPPER(data collate database_default) = N'RUNNING.' THEN N'Y' ELSE N'N' END from #tmpdata

	drop table #tmpdata

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_issqlagentrunning] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_issysadmin]'))
drop procedure [dbo].[isp_sqlsecure_issysadmin]
GO

CREATE procedure [dbo].[isp_sqlsecure_issysadmin] (@snapshotid int, @logintype nchar(1), @inputsid varbinary(85), @sqllogin nvarchar(128))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks if login or belong to sysadmin groups

	declare @loginname nvarchar(128)
	declare @errmsg nvarchar(500)
	declare @result nchar(1)

	-- if there is not such snapshotid then return error
	if not exists (select * from serversnapshot where snapshotid = @snapshotid)
	begin
		set @errmsg = 'Error: Snapshot id ' + CONVERT(varchar(10), @snapshotid) + ' not found'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	create table #tmplogins (sid varbinary(85), principalid int, name nvarchar(128), type nchar(1), serveraccess nchar(1), serverdeny nchar(1), disabled nchar(1))

	if (UPPER(@logintype) = 'W')
	begin
	
		create table #tmpsid (sid varbinary(85))
	
		-- insert current login to tmp table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select sid, principalid, name, type, serveraccess, serverdeny, disabled from serverprincipal where snapshotid = @snapshotid and sid = @inputsid)
	
		-- get all windows parents groups
		insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid
	
		-- insert all groups in serverprincipal table
		insert into #tmplogins (sid, principalid, name, type, serveraccess, disabled) (select a.sid, a.principalid, a.name, a.type, a.serveraccess, a.disabled from serverprincipal a, #tmpsid b where a.snapshotid = @snapshotid and a.sid = b.sid)

		select @loginname = name from serverprincipal where sid = @inputsid

		drop table #tmpsid				
	end
	else -- sql login type
	begin
		insert into #tmplogins (sid, principalid, name, type, serveraccess, serverdeny, disabled) (select a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled from serverprincipal a where a.snapshotid = @snapshotid and name=@sqllogin)
		set @loginname = @sqllogin
	end

	if exists (select 1 from vwloginfixedserverrole a, #tmplogins b where a.snapshotid = @snapshotid and a.principalid = b.principalid and UPPER(a.rolename) = 'SYSADMIN')
		set @result='Y'
	else
		set @result='N'

	if exists (select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmpresult%')
	begin
		insert into #tmpresult values (@result)
		return
	end

	select @result
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_issysadmin] TO [SQLSecureView]

GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_isversioncompatible]'))
drop procedure [dbo].[isp_sqlsecure_isversioncompatible]
GO

CREATE procedure [dbo].[isp_sqlsecure_isversioncompatible] (@dversion int, @dtype nvarchar(16))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks if the version for the type (schema or dal) is compatible.
   -- 	           The compatibleversion table only has currently supported versions


      if exists (select 1 from compatibleversion where compatibleversion = @dversion and UPPER(objecttype) = @dtype)

            select 'Y'

      else

            select 'N'

 
go

GRANT EXECUTE ON [dbo].[isp_sqlsecure_isversioncompatible] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_listallgroomingjobs]'))
drop procedure [dbo].[isp_sqlsecure_listallgroomingjobs]
GO

CREATE procedure [dbo].[isp_sqlsecure_listallgroomingjobs] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Return all SQLsecure grooming jobs.
   -- 	           

	EXEC msdb.dbo.sp_help_job @category_name  = 'SQLsecureGroomingJobs', @job_type = 'LOCAL'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_listallgroomingjobs] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_listallsnapshotjobs]'))
drop procedure [dbo].[isp_sqlsecure_listallsnapshotjobs]
GO

CREATE procedure [dbo].[isp_sqlsecure_listallsnapshotjobs] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Return all SQLsecure snapshot jobs not grooming jobs.
   -- 	           


	EXEC msdb.dbo.sp_help_job @category_name  = 'SQLsecureJobs', @job_type = 'LOCAL'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_listallsnapshotjobs] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_listjobschedule]'))
drop procedure [dbo].[isp_sqlsecure_listjobschedule]
GO

CREATE procedure [dbo].[isp_sqlsecure_listjobschedule] (@jobid uniqueidentifier)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Return all SQLsecure job schedule including snapshot and grooming jobs.
   -- 	           

	EXEC msdb.dbo.sp_help_job @job_id = @jobid, @job_aspect = 'SCHEDULES'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_listjobschedule] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_listjobstep]'))
drop procedure [dbo].[isp_sqlsecure_listjobstep]
GO

CREATE procedure [dbo].[isp_sqlsecure_listjobstep] (@jobid uniqueidentifier)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Return all SQLsecure job steps or collector command including snapshot and grooming jobs.
   -- 	           

	EXEC msdb.dbo.sp_help_job @job_id = @jobid, @job_aspect = 'STEPS'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_listjobstep] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_listjobtarget]'))
drop procedure [dbo].[isp_sqlsecure_listjobtarget]
GO

CREATE procedure [dbo].[isp_sqlsecure_listjobtarget] (@jobid uniqueidentifier)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Return all SQLsecure job target server (mostly local server name) including snapshot and grooming jobs.
   -- 	           

	EXEC msdb.dbo.sp_help_job @job_id = @jobid, @job_aspect = 'TARGETS'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_listjobtarget] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_marksnapshotbaseline]'))
drop procedure [dbo].[isp_sqlsecure_marksnapshotbaseline]
GO

CREATE procedure [dbo].[isp_sqlsecure_marksnapshotbaseline] (@snapshotid int, @baselinecomment nvarchar(500)='')
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Mark snapshot as baseline

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	-- Get application program name
	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	declare @connectionname nvarchar(128)
	set @connectionname = NULL
		
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to mark snapshot as baseline'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update', @category=N'Baseline', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	-- if there is not such snapshotid then return error
	if not exists (select * from serversnapshot where snapshotid = @snapshotid)
	begin
		set @errmsg = 'Error: Snapshot id ' + CONVERT(varchar(10), @snapshotid) + ' not found'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update', @category=N'Baseline', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	declare @str nvarchar(500)
	set @str = N'Update snapshot as baseline.'

	update serversnapshot set baseline = 'Y', baselinecomment = @baselinecomment where snapshotid = @snapshotid

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update', @category=N'Baseline', @description=@str, @connectionname = @connectionname

GO





SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_processpermission]'))
drop procedure [dbo].[isp_sqlsecure_processpermission]
GO

CREATE procedure [dbo].[isp_sqlsecure_processpermission] (@permissiontype nchar(1)='E')
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get process the permission set by processing the grant and deny permissions by inspecting various database rules

		
	delete from #tmppermission where objecttype IN ('U', 'V') and UPPER(permission) NOT IN ('ALTER', 'CONTROL', 'DELETE', 'INSERT', 'REFERENCES', 'SELECT', 'TAKE OWNERSHIP', 'UPDATE', 'VIEW CHANGE TRACKING', 'VIEW DEFINITION')
	delete from #tmppermission where objecttype NOT IN ('U', 'S', 'iSCM') and UPPER(permission) = 'VIEW CHANGE TRACKING'
	delete from #tmppermission where objecttype = 'iCOL' and UPPER(permission) NOT IN ('REFERENCES', 'SELECT', 'UPDATE')

	-- IF EXPLICIT TYPE THEN JUST DELETE EXTRA PERMISSION IF EXISTS THEN RETURN
	if (@permissiontype = 'X')
		return

	if exists (select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmppermission%')
	begin
		--print '========= isp_sqlsecure_processpermission'

		if exists (select 'x' from tempdb..sysobjects where type = 'U' and lower(name) like '#tmpsysadmin%')
		begin

			--print '========= has a sysadmin'

			-- IF SYSADMIN ROLE THEN ALL DENY CANNOT OVERRIDE THE GRANT PERMISSION
			-- SYSADMIN HAVE ALL PRIVILEGES
			update #tmppermission set isdeny = 'N', isgrant='Y' where permissiontype = 'EF' and objecttype <> 'iCO' and principalid in (select principalid from #tmpsysadmin)
		end

		--print '========= processing deleting extra grant permission'
		--select * from #tmppermission where isdeny = 'Y'

		delete from #tmpdenypermission

		-- LAST STEP IS TO NEGATE THE PERMISSION BASED ON DBID, OBJECT, SNAPSHOTID, PERMISSION NAME
		insert into #tmpdenypermission (
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permission, 
		parentobjectid,
		objectid, 
		objectname,
		objecttype, 
		schemaid, 
		schemaname,
		owner,
		ownername)
		select distinct
		snapshotid, 
		permissionlevel,
		logintype, 
		loginname, 
		connectionname, 
		databasename, 
		a.principalid, 
		principalname, 
		principaltype,
		databaseprincipal, 
		databaseprincipaltype, 
		grantor, 
		grantorname,
		grantee, 
		granteename,
		classid, 
		permission, 
		parentobjectid,
		objectid, 
		objectname,
		objecttype, 
		schemaid, 
		schemaname,
		owner,
		ownername
		from #tmppermission a
		where 
		permissiontype = 'EF' and 
		isdeny = 'Y'


		-- SQL SERVER SYNTAX ONLY DELETE
		-- DELETE ALL THE GRANT OR GRANT ALL PERMISSION THAT HAVE A DENY
		-- THE PERMISSION WITH DENY IS NOT DELETED
		delete #tmppermission 
		from #tmppermission a, #tmpdenypermission b
		where 
		a.snapshotid = b.snapshotid and 
		a.logintype = b.logintype and  
		a.loginname = b.loginname and  
		a.connectionname = b.connectionname and  
		a.databasename = b.databasename and  
		a.classid = b.classid and  
		a.permission = b.permission and  
		ISNULL(a.parentobjectid, '') = ISNULL(b.parentobjectid, '') and 
		a.objectid = b.objectid and  
		a.objectname = b.objectname and 
		a.objecttype = b.objecttype and  
		ISNULL(a.schemaid, '') = ISNULL(b.schemaid, '') and
		a.permissiontype = 'EF' and a.isdeny = 'N' and
		a.grantee = b.grantee and
		a.grantor = b.grantor
	end
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_processpermission] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_processsuspectaccounts]'))
drop procedure [dbo].[isp_sqlsecure_processsuspectaccounts]
GO

CREATE procedure [dbo].[isp_sqlsecure_processsuspectaccounts] (@snapshotid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Find and mark all windows accounts as suspect

	declare @inputsid varbinary(85)
	declare @type nvarchar(128)
	declare @name nvarchar(200)

	create table #tmpsid (sid varbinary(85))

	declare myc100 cursor for
		select sid, type, name from windowsaccount where snapshotid = @snapshotid and UPPER(state) = 'S'
	
	open myc100
	fetch next from myc100
	into @inputsid, @type, @name
	
	while @@fetch_status = 0
	begin
		-- get all the parent groups and their associated members
		insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid

		select * from #tmpsid

		update windowsaccount set state = 'S' where snapshotid = @snapshotid and sid IN (select a.sid from #tmpsid a, windowsaccount b where b.snapshotid = @snapshotid and a.sid = b.sid and (b.state IS NULL or b.state NOT IN ('S')))

		fetch next from myc100
		into @inputsid, @type, @name
	end
	
	close myc100
	deallocate myc100		
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_processsuspectaccountsos]'))
drop procedure [dbo].[isp_sqlsecure_processsuspectaccountsos]
GO

CREATE procedure [dbo].[isp_sqlsecure_processsuspectaccountsos] (@snapshotid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Find and mark all windows accounts as suspect in the serveroswindowsaccounts table

	declare @inputsid varbinary(85)
	declare @type nvarchar(128)
	declare @name nvarchar(200)

	create table #tmpsid (sid varbinary(85))

	declare myc100 cursor for
		select sid, type, name from serveroswindowsaccount where snapshotid = @snapshotid and UPPER(state) = 'S'
	
	open myc100
	fetch next from myc100
	into @inputsid, @type, @name
	
	while @@fetch_status = 0
	begin
		-- get all the parent groups and their associated members
		insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparentsos @snapshotid, @inputsid

		select * from #tmpsid

		update serveroswindowsaccount set state = 'S' where snapshotid = @snapshotid and sid IN (select a.sid from #tmpsid a, serveroswindowsaccount b where b.snapshotid = @snapshotid and a.sid = b.sid and (b.state IS NULL or b.state NOT IN ('S')))

		fetch next from myc100
		into @inputsid, @type, @name
	end
	
	close myc100
	deallocate myc100		
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removealljobs]'))
drop procedure [dbo].[isp_sqlsecure_removealljobs]
GO

CREATE procedure [dbo].[isp_sqlsecure_removealljobs] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove all SQLsecurejobs

	declare @jobid uniqueidentifier

	declare myc100 cursor for
		select job_id from msdb.dbo.sysjobs a, msdb.dbo.syscategories b where a.category_id = b.category_id and UPPER(b.name) IN ('SQLSECUREJOBS', 'SQLSECUREGROOMINGJOBS')
	
	open myc100
	fetch next from myc100
	into @jobid
	
	while @@fetch_status = 0
	begin
		exec isp_sqlsecure_removejob @jobid = @jobid

		fetch next from myc100
		into @jobid

	end
	
	close myc100
	deallocate myc100	


GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removedatabasedata]'))
drop procedure [dbo].[isp_sqlsecure_removedatabasedata]
GO

CREATE procedure [dbo].[isp_sqlsecure_removedatabasedata] (@snapshotid int, @dbid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove all the database data based on dbid

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = N'Error: Insufficient privileges to delete database data.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Remove', 	  @category=N'Database Data', @description=@errmsg, @connectionname = NULL
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN
	
	delete from databaseobjectpermission where snapshotid = @snapshotid and dbid = @dbid

	delete from databaseobject where snapshotid = @snapshotid and dbid = @dbid

	delete from databaseschemapermission where snapshotid = @snapshotid and dbid = @dbid

	delete from databaseprincipalpermission where snapshotid = @snapshotid and dbid = @dbid

	delete from databaserolemember where snapshotid = @snapshotid and dbid = @dbid

	delete from databaseschema where snapshotid = @snapshotid and dbid = @dbid

	delete from databaseprincipal where snapshotid = @snapshotid and dbid = @dbid

	select @err = @@error

	if @err <> 0
	begin
		set @errmsg = 'Error: Failed to remove database data with snapshot id ' + CONVERT(nvarchar(12), @snapshotid) + ' and ' + CONVERT(nvarchar(12), @dbid)
		RAISERROR (@errmsg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

	declare @str nvarchar(500)
	set @str = N'Remove all database data with snapshot id ' + CONVERT(nvarchar(12), @snapshotid) + ' and ' + CONVERT(nvarchar(12), @dbid)

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Remove', @category=N'Database', @description=@str, @connectionname = NULL

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removejob]'))
drop procedure [dbo].[isp_sqlsecure_removejob]
GO

CREATE procedure [dbo].[isp_sqlsecure_removejob] (@jobid uniqueidentifier, @jobname nvarchar(512) = '')
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Remove a job by either the jobid or job name.
   -- 	           
	declare @errmsg nvarchar(500)
	declare @programname nvarchar(128)
	declare @jobid2 uniqueidentifier

	set @jobid2 = null

	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	select @jobid2 = job_id from msdb.dbo.sysjobs where job_id = @jobid or UPPER(name) = UPPER(@jobname)
	if (@jobid2 is null)
	begin
		set @errmsg = 'Error: Failed to remove job.'
		if (@jobid is not null)
			set @errmsg = @errmsg + ' Job id ' + CONVERT(nvarchar(128), @jobid) + ' does not exist.'
		else if (@jobname is not null and len(rtrim(@jobname)) > 0)
			set @errmsg = @errmsg + ' Job name ' + @jobname + ' does not exist.'
		else 
			set @errmsg = @errmsg + ' No valid Job id or name was passed.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Add', @category=N'Job', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	EXEC msdb.dbo.sp_delete_job @job_id = @jobid2

	update registeredserver set jobid = NULL where jobid = @jobid2
GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removelicense]'))
drop procedure [dbo].[isp_sqlsecure_removelicense]
GO

CREATE procedure [dbo].[isp_sqlsecure_removelicense] (@licenseid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove a single license with license id
   -- 	           
	
	declare @result int
	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	-- Get application program name
	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	declare @connectionname nvarchar(128)
	set @connectionname = NULL
		
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to remove license'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Remove', @category=N'License Key', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end
		
	BEGIN TRAN
	
		delete from applicationlicense where licenseid = @licenseid

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to remove a license key with license id ' + CONVERT(NVARCHAR(256), @licenseid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		declare @str nvarchar(500)
		set @str = N'Remove license with license id ' + CONVERT(NVARCHAR(256),@licenseid) + N'.'

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Remove', @category=N'License Key', @description=@str, @connectionname = @connectionname

	COMMIT TRAN	
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removenotificationfromregisteredserver]'))
drop procedure [dbo].[isp_sqlsecure_removenotificationfromregisteredserver]
GO

CREATE procedure [dbo].[isp_sqlsecure_removenotificationfromregisteredserver]
(
	@registeredserverid int, 
	@notificationproviderid int 
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove a notification configuration from the selected registered server
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Delete', @category=N'Server Notification', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @providername nvarchar(128)
	select @providername=providername from notificationprovider where notificationproviderid = @notificationproviderid

	if (@providername is null)
	begin
		set @msg = 'Error: Invalid notification provider id ' + CONVERT(nvarchar, @notificationproviderid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

 	declare @connection nvarchar(128)
	select @connection=connectionname from registeredserver where registeredserverid = @registeredserverid

	if (@connection is null)
	begin
		set @msg = 'Error: Invalid registered server id ' + CONVERT(nvarchar, @registeredserverid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

		delete from [registeredservernotification] where notificationproviderid = @notificationproviderid and registeredserverid = @registeredserverid

		select @err = @@error

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @providername + '" from server "' + @connection + '"'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		set @msg = @category + N' "' + @providername + '" from server "' + @connection + '"'
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO





SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removenotificationprovider]'))
drop procedure [dbo].[isp_sqlsecure_removenotificationprovider]
GO

CREATE procedure [dbo].[isp_sqlsecure_removenotificationprovider]
(
	@notificationproviderid int
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove all notification provider information for the selected notification provider from repository
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Delete', @category=N'Notification Provider', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @providername nvarchar(128)
	select @providername=providername from notificationprovider where notificationproviderid = @notificationproviderid

	if (@providername is null)
	begin
		set @msg = 'Error: Invalid ' + @category + ' id ' + CONVERT(nvarchar, @notificationproviderid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else
	begin
		BEGIN TRAN
		
			delete from registeredservernotification where notificationproviderid = @notificationproviderid
			delete from notificationprovider where notificationproviderid = @notificationproviderid

			select @err = @@error

			if @err <> 0
			begin
				set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @providername + '" with id ' + CONVERT(NVARCHAR, @notificationproviderid)
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				ROLLBACK TRAN
				return -1
			end

			set @msg = @category + N' "' + @providername + '" with id ' + CONVERT(NVARCHAR, @notificationproviderid)
			exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

		COMMIT TRAN
	end
GO





SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removepolicy]'))
drop procedure [dbo].[isp_sqlsecure_removepolicy]
GO

CREATE procedure [dbo].[isp_sqlsecure_removepolicy]
(
	@policyid int,
	@assessmentid int = null		-- default to policy settings for backward compatibility
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove all policy information for the selected policy from repository
   --				Note that system policies cannot be removed
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @category2 nvarchar(32),@success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Delete', @category=N'Policy', @category2=N'Assessment', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @policyname nvarchar(128), @issystem bit, @hasassessments bit, @assessmentstate nchar(1)
	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	select @policyname=dbo.[getassessmentname](@policyid, @assessmentid) 
	select @issystem=issystempolicy from policy where policyid = @policyid  
	select @assessmentstate=assessmentstate from assessment where policyid = @policyid and assessmentid = @assessmentid

	if (@policyname is null)
	begin
		set @msg = 'Error: Invalid ' + @category + ' id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else if (@issystem = 1 and @assessmentstate = N'S')	-- system policy assessments can be deleted, but the policy settings cannot
		begin
			set @msg = 'Error: ' + @category + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' is a system ' + lower(@category) + ' and cannot be deleted'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	else if (@assessmentstate = N'A')		-- approved assessments cannot be deleted
		begin
			set @msg = 'Error: ' + @category2 + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' is an approved ' + @category2 + ' and cannot be deleted'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
	else
	begin
		-- don't allow deleting the policy if there are any assessments
		declare @cid int
		select @cid = -1
		if (@assessmentstate = N'S')
		begin
			select @cid = assessmentid from assessment where policyid = @policyid and assessmentstate = N'C'
			select @hasassessments = cast(count(*) as bit)
				from assessment
				where 
					policyid = @policyid
					and assessmentid <> @assessmentid
					and assessmentstate not in (N'S',N'C')
		end
		else
			select @hasassessments = 0

		if (@hasassessments = 1)
		begin
			set @msg = 'Error: ' + @category + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' has saved ' + @category2 + 's and cannot be deleted'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			return -1
		end
		else
		begin
			BEGIN TRAN
				delete from policychangelog where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				delete from policyassessmentdetail where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				delete from policyassessmentnotes where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				delete from policyassessment where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				delete from policyinterview where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				delete from policymember where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				delete from policymetric where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				delete from assessment where policyid = @policyid and assessmentid in (@assessmentid, @cid)
				if (@assessmentstate = N'S')
					delete from policy where policyid = @policyid

				select @err = @@error

				if @err <> 0
				begin
					set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
					exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
					RAISERROR (@msg, 16, 1)
					ROLLBACK TRAN
					return -1
				end

				set @msg = @category + N' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
				exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

			COMMIT TRAN
		end
	end
GO




SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removeregisteredserver]'))
drop procedure [dbo].[isp_sqlsecure_removeregisteredserver]
GO

CREATE procedure [dbo].[isp_sqlsecure_removeregisteredserver] (@connectionname nvarchar(500))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove registered server from the registeredserver table
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Remove', @category=N'Registered Server', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to remove ' + lower(@category) + ' "' + @connectionname + '"'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=@connectionname
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @registeredserverid int
	select @registeredserverid=registeredserverid from registeredserver where UPPER(connectionname) = UPPER(@connectionname)

	if (@registeredserverid is null)
	begin
		set @msg = 'Error: Invalid ' + @category + ' "' + @connectionname + '"'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=@connectionname
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if exists (select distinct a.registeredserverid 
				from policyassessment a 
					inner join assessment b on a.policyid = b.policyid 
						and a.assessmentid = b.assessmentid 
				where a.registeredserverid = @registeredserverid 
					and b.assessmentstate in (N'D', N'P', N'A'))
	begin
		set @msg = 'Error: ' + @category + ' "' + @connectionname + '" must be removed from all draft and published assessments before it can be removed from auditing.'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=@connectionname
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else
	begin
		BEGIN TRAN

		delete from filterrule where filterruleheaderid in (select filterruleheaderid from filterruleheader where UPPER(connectionname) = UPPER(@connectionname))
		delete from filterruleheader where  UPPER(connectionname) = UPPER(@connectionname)
		delete from policymember where  registeredserverid = @registeredserverid
		update policyassessment set registeredserverid = null where registeredserverid = @registeredserverid
		delete from registeredservernotification where  registeredserverid = @registeredserverid
		delete from registeredserver where  UPPER(connectionname) = UPPER(@connectionname)

		select @err = @@ERROR

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @connectionname + '"'
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=@connectionname
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end


		set @msg = @category + N' "' + @connectionname + '" with id ' + CONVERT(NVARCHAR, @registeredserverid)
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=@connectionname

		COMMIT TRAN
	end


GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removeregisteredserverfrompolicy]'))
drop procedure [dbo].[isp_sqlsecure_removeregisteredserverfrompolicy]
GO

CREATE procedure [dbo].[isp_sqlsecure_removeregisteredserverfrompolicy] 
(
	@policyid int, 
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@registeredserverid int
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove a registered server from the selected policy
   -- 	           

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @category2 nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Delete', @category=N'Policy Member', @category2=N'Assessment Member', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @policyname nvarchar(128),
			@state nchar(1)
	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	select @policyname=dbo.[getassessmentname](@policyid, @assessmentid) 
	select @state=assessmentstate 
		from assessment
		where policyid = @policyid 
			and assessmentid = @assessmentid

	if (@policyname is null)
	begin
		set @msg = 'Error: Invalid policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if (@state = N'A')
	begin
		set @msg = 'Error: Cannot remove server from assessment "' + @policyname + '" because it is an approved assessment.'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

 	declare @connection nvarchar(128)
	select @connection=connectionname from registeredserver where registeredserverid = @registeredserverid

	set @category= case when @state in (N'D', N'P') then @category2 else @category end
	if (@connection is null)
	begin
		set @msg = 'Error: Invalid registered server id ' + CONVERT(nvarchar, @registeredserverid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN
	
		delete from policymember 
			where policyid = @policyid 
				and assessmentid = @assessmentid
				and registeredserverid = @registeredserverid

		select @err = @@error

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @connection + '" from "' + @policyname + '" with id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		set @msg = N'Removed server ' + @connection
		set @state=dbo.getassessmentstatename(@state)
		exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@state, @description=@msg

		set @msg = @category + N' "' + @connection + '" from '  + @policyname
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO




SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removerule]'))
drop procedure [dbo].[isp_sqlsecure_removerule]
GO

CREATE procedure [dbo].[isp_sqlsecure_removerule] (@filterruleheaderid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove all the rules pertaining to this header id
   -- 	           
	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int
	
	declare @connectionname nvarchar(400)
	select @connectionname = connectionname from filterruleheader where filterruleheaderid = @filterruleheaderid

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to remove filter rule for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Remove', @category=N'Filter Rule', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN
	
		delete from filterrule where filterruleheaderid = @filterruleheaderid

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to delete from filterrule table with header id ' + CONVERT(nvarchar(64), @filterruleheaderid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		declare @str nvarchar(500)
		set @str = N'Removed filter rules for SQL Server instance ' + @connectionname + N', with Rule Header Id =  ' + CONVERT(nvarchar(64), @filterruleheaderid)
		
		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Remove', @category=N'Filter Rule', @description=@str, @connectionname = @connectionname
	
	COMMIT TRAN

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removeruleheader]'))
drop procedure [dbo].[isp_sqlsecure_removeruleheader]
GO

CREATE procedure [dbo].[isp_sqlsecure_removeruleheader] (@filterruleheaderid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove all the rules pertaining to this header
   -- 	           
	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	
	declare @connectionname nvarchar(400)
	select @connectionname = connectionname from filterruleheader where filterruleheaderid = @filterruleheaderid

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to remove filter for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Remove', @category=N'Filter', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN
		delete from filterrule where filterruleheaderid = @filterruleheaderid

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to delete from filterrule table with header id ' + CONVERT(nvarchar(64), @filterruleheaderid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end
			
		delete from filterruleheader where filterruleheaderid = @filterruleheaderid

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to delete from filterruleheader table with header id ' + CONVERT(nvarchar(64), @filterruleheaderid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		declare @str nvarchar(500)
		set @str = N'Removed filter for SQL Server instance ' + @connectionname + N', Rule Header Id = ' + CONVERT(nvarchar(64), @filterruleheaderid)

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Remove', @category=N'Filter', @description=@str, @connectionname = @connectionname
	
	COMMIT TRAN

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_removesnapshot]'))
drop procedure [dbo].[isp_sqlsecure_removesnapshot]
GO

CREATE procedure [dbo].[isp_sqlsecure_removesnapshot] (@snapshotid int)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Remove all snapshot information from repository
   -- 	           

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int
	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	declare @connectionname nvarchar(400), 
		@registeredserverid int,
		@snapshotname nvarchar(30)
	select @connectionname = connectionname, 
		@registeredserverid = registeredserverid,
		@snapshotname = convert(nvarchar, starttime, 101) + ' ' + convert(nvarchar, starttime, 108) + ' (UTC)' from serversnapshot where snapshotid = @snapshotid

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to remove snapshot for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Remove', @category=N'Snapshot', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if (@connectionname is null)
	begin
		set @errmsg = 'Error: Invalid snapshot id ' + CONVERT(nvarchar, @snapshotid)
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Remove', @category=N'Snapshot', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
	end

	if exists (select distinct a.registeredserverid 
				from policyassessment a 
					inner join assessment b on a.policyid = b.policyid 
						and a.assessmentid = b.assessmentid 
				where a.registeredserverid = @registeredserverid 
					and a.snapshotid = @snapshotid
					and b.assessmentstate in (N'D', N'P', N'A'))
	begin
		set @errmsg = 'Error: Snapshot "' + @snapshotname + '" for server "' + @connectionname + '" must be removed from all saved assessments before it can be removed from auditing. If it is used in an approved assessment, it can no longer be removed from auditing.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Remove', @category=N'Snapshot', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
	end
	else
	begin
		BEGIN TRAN
		
			
			delete from dbo.sqljob where SnapshotId = @snapshotid
			delete from dbo.sqljobproxy where snapshotid = @snapshotid
			delete from dbo.availabilitygroups where snapshotid = @snapshotid
			delete from dbo.availabilityreplicas where snapshotid = @snapshotid
			
			delete from databaseprincipalpermission where snapshotid = @snapshotid
			delete from databaseobjectpermission where snapshotid = @snapshotid
			delete from databaseschemapermission where snapshotid = @snapshotid
			delete from databaseobject where snapshotid = @snapshotid
			delete from databaseschema where snapshotid = @snapshotid
			delete from databaserolemember where snapshotid = @snapshotid
			delete from databaseprincipal where snapshotid = @snapshotid
			delete from sqldatabase where snapshotid = @snapshotid
			delete from windowsgroupmember where snapshotid = @snapshotid
			delete from windowsaccount where snapshotid = @snapshotid
			delete from serverpermission where snapshotid = @snapshotid
			delete from endpoint where snapshotid = @snapshotid
			delete from serverrolemember where snapshotid = @snapshotid
			delete from serverfilterrule where snapshotid = @snapshotid
			delete from serverfilterruleheader where snapshotid = @snapshotid
			delete from serverprincipal where snapshotid = @snapshotid
			delete from serverservice where snapshotid = @snapshotid
			delete from serverosobjectpermission where snapshotid = @snapshotid
			delete from serverosobject where snapshotid = @snapshotid
			delete from serverprotocol where snapshotid = @snapshotid
			delete from ancillarywindowsgroup where snapshotid = @snapshotid
			delete from serveroswindowsgroupmember where snapshotid = @snapshotid
			delete from serveroswindowsaccount where snapshotid = @snapshotid
			delete from serversnapshot where snapshotid = @snapshotid
		

			if @err <> 0
			begin
				set @errmsg = 'Error: Failed to delete snapshot information from repository'
				exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Remove', @category=N'Snapshot', @description=@errmsg, @connectionname = @connectionname
				RAISERROR (@errmsg, 16, 1)
				ROLLBACK TRAN
				return -1
			end

			declare @str nvarchar(500)
			set @str = N'Removed snapshot ' + @snapshotname + ', id=' + CONVERT(NVARCHAR, @snapshotid) + N' for SQL Server instance ' + @connectionname

			exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Remove', @category=N'Snapshot', @description=@str, @connectionname = @connectionname

		COMMIT TRAN

		-- AFTER REMOVE THE SNAPSHOT, NEED TO UPDATE THE REGISTEREDSERVER SNAPSHOTID COLUMN
		declare @lastsnapshotid int
		declare @lastsnapshottm datetime

		declare @currentstatus nchar(1)
		declare @currentsnapshottm datetime

		set @lastsnapshotid = 0

		if exists (select 1 from serversnapshot where UPPER(connectionname) = UPPER(@connectionname))
		begin
			select @lastsnapshotid = snapshotid, @lastsnapshottm = endtime from serversnapshot where snapshotid = (select max(snapshotid) from serversnapshot where UPPER(connectionname) = UPPER(@connectionname) and status IN ('S', 'W'))
			select @currentstatus = status, @currentsnapshottm = endtime from serversnapshot where snapshotid = (select max(snapshotid) from serversnapshot where UPPER(connectionname) = UPPER(@connectionname))
		end

		update registeredserver set lastcollectionsnapshotid = @lastsnapshotid, lastcollectiontm = @lastsnapshottm, currentcollectiontm = @currentsnapshottm, currentcollectionstatus = @currentstatus where UPPER(connectionname) = UPPER(@connectionname)
	end
GO




SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_allobjectswithpermissions]'))
drop procedure [dbo].[isp_sqlsecure_report_allobjectswithpermissions]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_allobjectswithpermissions]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400),
	@databaseName nvarchar(4000) 	--we don't use nvarchar(max) here for sQL Server 2000 support
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Display all objects with permissions in databases for all servers
   --              Notes:
   --               will not show any server level permissions that affect databases
   --               will not differentiate objects with same name in different schemas
   --               will not designate the table which owns a column 

	
CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid    

SELECT	e.connectionname AS 'Server',
		d.databasename AS 'DB',
		a.objectname AS 'Object',
		c.objecttypename AS 'Type',
		b.name AS 'User',
		dbo.getdatabaseprincipaltypename(b.type) AS 'User Type',
		dbo.getaccesstype(a.isdeny, a.isgrantwith, a.isgrant, 'N') AS 'Access Type',
		a.permission AS Privilege
FROM	vwdatabaseobjectpermission AS a,
		databaseprincipal AS b,
		objecttype AS c,
		sqldatabase AS d,
		dbo.getsnapshotlist(@rundate, @usebaseline) e
WHERE	e.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(e.connectionname) LIKE UPPER(@serverName)
		AND a.snapshotid = e.snapshotid
		AND a.snapshotid = b.snapshotid
		AND a.dbid = b.dbid
		AND a.grantee = b.uid
		AND a.objecttype = c.objecttype
		AND d.snapshotid = a.snapshotid
		AND d.dbid = a.dbid
		AND (@databaseName = '%' OR d.databasename in (select LTRIM(Value) from dbo.splitbydelimiter(@databaseName, ',')))

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_allobjectswithpermissions] TO [SQLSecureView]

GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_allobjectswithpermissions_user]'))
drop procedure [dbo].[isp_sqlsecure_report_allobjectswithpermissions_user]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_allobjectswithpermissions_user]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400),
	@databaseName nvarchar(4000) 	--we don't use nvarchar(max) here for sQL Server 2000 support
)
AS

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid    


SELECT	e.connectionname AS 'Server',
		d.databasename AS 'DB',
		a.objectname AS 'Object',
		c.objecttypename AS 'Type',
		b.name AS 'User',
		dbo.getdatabaseprincipaltypename(isnull(dbp.type, isnull(m.type, b.type))) as 'User Type',
		dbo.getaccesstype(a.isdeny, a.isgrantwith, a.isgrant, 'N') AS 'Access Type',
		a.permission AS Privilege,
		CASE m.sid WHEN b.usersid THEN '' ELSE isnull(m.name, dbp.name) END as 'Login',
		CASE isnull(sp.disabled, 'N') WHEN 'N' THEN isnull(wa.enabled, 1) ELSE 0 END as 'Enabled'
FROM	vwdatabaseobjectpermission AS a,
		databaseprincipal AS b left join vwwindowsgroupmembers as m
			on m.snapshotid = b.snapshotid
			AND (m.groupsid = b.usersid or m.sid = b.usersid)
			left join windowsaccount as wa
			on wa.snapshotid = b.snapshotid
			and wa.sid=m.sid
			left join vwdatabaserolemember as gm2
			on gm2.snapshotid = b.snapshotid
			AND (gm2.uid = b.uid)
			AND gm2.dbid = b.dbid
			left join databaseprincipal as dbp
			on gm2.rolememberuid = dbp.uid and gm2.snapshotid = dbp.snapshotid and gm2.dbid = dbp.dbid
			left join serverprincipal as sp
			on sp.snapshotid = b.snapshotid
			and (sp.sid=b.usersid OR sp.sid = dbp.usersid),
		objecttype AS c,
		sqldatabase AS d,
		dbo.getsnapshotlist(@rundate, @usebaseline) e
WHERE	e.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(e.connectionname) LIKE UPPER(@serverName)
		AND a.snapshotid = e.snapshotid
		AND a.snapshotid = b.snapshotid
		AND a.dbid = b.dbid
		AND a.grantee = b.uid
		AND a.objecttype = c.objecttype
		AND d.snapshotid = a.snapshotid
		AND d.dbid = a.dbid
		AND (@databaseName = '%' OR d.databasename in (select LTRIM(Value) from dbo.splitbydelimiter(@databaseName, ',')))
DROP TABLE #tmpservers

GO
GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_allobjectswithpermissions_user] TO [SQLSecureView]
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_authentication]'))
drop procedure [dbo].[isp_sqlsecure_report_authentication]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_authentication]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Check all servers for mixed mode authentication
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  

SELECT	DISTINCT a.connectionname
FROM	serversnapshot a, 
		dbo.getsnapshotlist(@rundate, @usebaseline) b
WHERE	b.registeredserverid IN (SELECT registeredserverid FROM #tmpservers) 
		AND a.snapshotid = b.snapshotid
		AND UPPER(a.connectionname) LIKE UPPER(@serverName)
		AND a.authenticationmode = 'M'

ORDER BY a.connectionname

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_authentication] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_checkdbchaining]'))
drop procedure [dbo].[isp_sqlsecure_report_checkdbchaining] 
GO

CREATE procedure [dbo].[isp_sqlsecure_report_checkdbchaining]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0		--defaults to false
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers for cross db ownership chaining
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid 

SELECT	DISTINCT a.connectionname,
		CASE WHEN crossdbownershipchaining = 'Y' 
			THEN 'Enabled' 
			ELSE 'Disabled'
		END	
FROM	serversnapshot a
WHERE	a.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND a.snapshotid IN (SELECT snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline))
		AND crossdbownershipchaining = 'Y'
ORDER BY a.connectionname

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_checkdbchaining] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_checksystemstoredprocedures]'))
drop procedure [dbo].[isp_sqlsecure_report_checksystemstoredprocedures] 
GO

CREATE procedure [dbo].[isp_sqlsecure_report_checksystemstoredprocedures]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers master db for direct/explicit permission on
   -- 				highly sensitive extended stored procedures

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid 

SELECT	e.connectionname, b.databasename, username = a.name, 
		objectname = c.name, d.permission, d.isgrant, d.isgrantwith
FROM	databaseprincipal a,
		sqldatabase b,
		databaseobject c,
		databaseobjectpermission d,
		dbo.getsnapshotlist(@rundate, @usebaseline) e
WHERE	e.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(e.connectionname) LIKE UPPER(@serverName)		
		AND a.snapshotid = e.snapshotid		
		AND a.snapshotid = b.snapshotid
		AND a.dbid = b.dbid
		AND b.databasename = 'master'
		AND c.snapshotid = b.snapshotid
		AND c.dbid = b.dbid
		AND d.grantee = a.uid 
		AND c.objectid = d.objectid
		AND d.snapshotid = c.snapshotid
		AND d.dbid = c.dbid
		AND c.type = 'X'
		AND (c.name = 'xp_cmdshell'
				OR c.name LIKE 'sp_OA%'
				OR (c.name LIKE 'xp_reg%' AND c.name <> 'xp_regread'))
		AND (d.isgrant = 'Y' OR d.isgrantwith = 'Y')
		AND a.name <> 'system_function_schema'

ORDER BY connectionname, databasename, username, objectname, permission

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_checksystemstoredprocedures] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_checkweakpassword]'))
drop procedure [dbo].[isp_sqlsecure_report_checkweakpassword]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_checkweakpassword]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers for xp mail
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  

SELECT	DISTINCT d.connectionname,
		a.name,
		passwordstatus = [dbo].[getpasswordstatusdescription](a.passwordstatus),
		a.disabled,
		a.defaultdatabase
FROM	serverprincipal a,
		sqldatabase b,
		dbo.getsnapshotlist(@rundate, @usebaseline) d
WHERE	d.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND a.snapshotid = d.snapshotid
		AND UPPER(d.connectionname) LIKE UPPER(@serverName)		
		AND a.snapshotid = b.snapshotid
		AND a.type = 'S'
		AND a.passwordstatus IS NOT NULL
		AND a.passwordstatus > 0 

ORDER BY d.connectionname, a.name

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_checkweakpassword] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_checkwellknowngroup]'))
drop procedure [dbo].[isp_sqlsecure_report_checkwellknowngroup]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_checkwellknowngroup]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers for well known windows groups like Everyone
   -- 

	CREATE TABLE #tmpservers (registeredserverid int)
	INSERT #tmpservers
		EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
			 @policyid = @policyid  
	           
	declare @snapshotid int
	declare @connectionname nvarchar(500)
	declare @status nchar(1)
	declare @name nvarchar(512)
	declare @sid varbinary(85)
	declare @access nvarchar(16)

	create table #tmpdata (connectionname nvarchar(400), name nvarchar(512), access nvarchar(16), groupname nvarchar(512))
	create table #tmpsid (sid varbinary(85))

	-- Go thru' all the snapshots and get the server
	DECLARE cursor1 CURSOR FOR SELECT snapshotid, connectionname FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers) AND UPPER(connectionname) LIKE UPPER(@serverName)

	open cursor1
	fetch next from cursor1
	into @snapshotid, @connectionname

	while @@fetch_status = 0
	begin
		declare cursor2 cursor for
			select a.windowsgroupname, b.sid, case when c.sid is null then 'via group' else 'SQL Login' end as access
			from ancillarywindowsgroup a
				inner join windowsaccount b on b.snapshotid = a.snapshotid
				left join serverprincipal c on c.snapshotid = a.snapshotid and b.sid = c.sid
			where a.snapshotid = @snapshotid
				and upper(a.windowsgroupname) = upper(b.name)

		open cursor2
		fetch next from cursor2
		into @name, @sid, @access

		while @@fetch_status = 0
		begin
			-- Get all direct logins
			insert into #tmpdata (connectionname, [name], access, groupname) (
				select @connectionname, @name, @access, '' from serverprincipal where snapshotid = @snapshotid and [sid] = @sid
			)

			-- Get all permissions via group membership			
			delete from #tmpsid

			--insert into #tmpsid (sid) values (@sid)
			insert into #tmpsid exec isp_sqlsecure_getwindowsgroupparents @snapshotid, @sid

			insert into #tmpdata (connectionname, [name], access, groupname) (
				select @connectionname, @name, @access, [name] from serverprincipal where snapshotid = @snapshotid and [sid] in (select [sid] from #tmpsid)
			)

			fetch next from cursor2
			into @name, @sid, @access

		end

		close cursor2
		deallocate cursor2

	fetch next from cursor1
	into @snapshotid, @connectionname

	end

	close cursor1
	deallocate cursor1

	DROP TABLE #tmpservers

	select distinct connectionname, [name], access, groupname from #tmpdata order by connectionname, [name], groupname

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_checkwellknowngroup] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_checkxpmail]'))
drop procedure [dbo].[isp_sqlsecure_report_checkxpmail]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_checkxpmail]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers for xp mail
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  

SELECT	DISTINCT d.connectionname, a.name
FROM	databaseobject a,
		sqldatabase b,
		dbo.getsnapshotlist(@rundate, @usebaseline) d
WHERE	d.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND a.snapshotid = d.snapshotid
		AND UPPER(d.connectionname) LIKE UPPER(@serverName)		
		AND a.snapshotid = b.snapshotid
		AND a.dbid = b.dbid
		AND a.type = 'X'
		AND a.name LIKE 'xp_%mail'

ORDER BY d.connectionname, a.name

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_checkxpmail] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_databaseroles]'))
drop procedure [dbo].[isp_sqlsecure_report_databaseroles]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_databaseroles] 
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              List all members of Database Roles on all databases on all Servers
   --              note, this explodes groups only for one level of nested roles. 
   --

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid    

;WITH cte_snapshots ( snapshotid, connectionname )
AS
(
	SELECT snapshotid, connectionname
		FROM dbo.getsnapshotlist(@rundate, @usebaseline) AS s
		WHERE s.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
			AND UPPER(s.connectionname) LIKE UPPER(@serverName)
		
)
,cte_allgroupmembers ( snapshotid, sid, type, name, groupsid, grouptype, groupname, grouplevel, rootsid, rootname )
AS
(
	SELECT snapshotid, sid, type, name, cast(null as varbinary(85)), cast(null as nvarchar(128)), CAST(null as nvarchar(200)), 0, sid, name
		FROM windowsaccount
		WHERE type <> 'User'
	UNION ALL
	SELECT m.snapshotid, m.sid, m.type, m.name, g.sid, g.type, g.name, g.grouplevel + 1, g.rootsid, g.rootname
		FROM cte_allgroupmembers g
			INNER JOIN vwwindowsgroupmembers m
				ON g.sid = m.groupsid
					and g.snapshotid = m.snapshotid
			INNER JOIN cte_snapshots s
				ON m.snapshotid = s.snapshotid
)
SELECT	s.connectionname AS [Server],
		db.databasename AS [Database],
		r.name AS [Role],
		m.name AS Member,
		dbo.getdatabaseprincipaltypename(m.type) AS logintype,
		'' AS Access,
		dbo.getyesnotext(m.isalias) AS isalias,
		dbo.getyesnotext(m.hasaccess) AS hasaccess
FROM	cte_snapshots AS s,
		sqldatabase AS db,
		databaseprincipal AS r,
		databaserolemember AS rm,
		databaseprincipal AS m
WHERE	db.snapshotid = s.snapshotid
		AND r.snapshotid = db.snapshotid
		AND r.dbid = db.dbid
		AND r.type = 'R'
		AND rm.snapshotid = r.snapshotid
		AND rm.dbid = r.dbid
		AND rm.groupuid = r.uid
		AND m.snapshotid = rm.snapshotid
		AND m.dbid = rm.dbid
		AND m.uid = rm.rolememberuid

UNION

SELECT	s.connectionname AS [Server],
		db.databasename AS [Database],
		r.name AS [Role],
		m.name AS Member,
		dbo.getdatabaseprincipaltypename(m.type) AS logintype,
		'via role ' + mr.name AS Access,
		dbo.getyesnotext(m.isalias) AS isalias,
		dbo.getyesnotext(m.hasaccess) AS hasaccess
FROM	cte_snapshots AS s,
		sqldatabase AS db,
		databaseprincipal AS r,
		databaserolemember AS rm,
		databaseprincipal AS mr,
		databaserolemember AS mrm,
		databaseprincipal AS m		
WHERE	db.snapshotid = s.snapshotid
		AND r.snapshotid = db.snapshotid
		AND r.dbid = db.dbid
		AND r.type = 'R'
		AND rm.snapshotid = r.snapshotid
		AND rm.dbid = r.dbid
		AND rm.groupuid = r.uid
		AND mr.snapshotid = rm.snapshotid
		AND mr.dbid = rm.dbid
		AND mr.uid = rm.rolememberuid
		AND mr.type = 'R'
		AND mrm.snapshotid = mr.snapshotid
		AND mrm.dbid = mr.dbid
		AND mrm.groupuid = mr.uid
		AND m.snapshotid = mrm.snapshotid
		AND m.dbid = mrm.dbid
		AND m.uid = mrm.rolememberuid

UNION

SELECT	s.connectionname AS [Server],
		db.databasename AS [Database],
		r.name AS [Role],
		gm.name AS Member,
		CASE WHEN gm.type = 'User' THEN 'Windows Login' ELSE 'Windows Group' END AS logintype,
		'via group ' + gm.groupname AS Access,
		'-',
		'-'
FROM	cte_snapshots AS s
		INNER JOIN sqldatabase AS db
			ON db.snapshotid = s.snapshotid
		INNER JOIN databaseprincipal AS r
			ON r.snapshotid = db.snapshotid
				AND r.dbid = db.dbid
				AND r.type = 'R'
		INNER JOIN databaserolemember AS rm
			ON rm.snapshotid = r.snapshotid
				AND rm.dbid = r.dbid
				AND rm.groupuid = r.uid
		INNER JOIN databaseprincipal AS mg
			ON mg.snapshotid = rm.snapshotid
				AND mg.dbid = rm.dbid
				AND mg.uid = rm.rolememberuid
				AND mg.type = 'G'
		INNER JOIN cte_allgroupmembers gm
			ON gm.snapshotid = mg.snapshotid
		AND gm.rootsid = mg.usersid
WHERE	gm.grouplevel > 0

ORDER BY s.connectionname, db.databasename, r.name

DROP TABLE #tmpservers

GO
 
GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_databaseroles] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_databaseroles_user]'))
drop procedure [dbo].[isp_sqlsecure_report_databaseroles_user]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_databaseroles_user] 
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              List all members of Database Roles on all databases on all Servers
   --              note, this explodes groups only for one level of nested roles. 
   --

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid    

;WITH cte_snapshots ( snapshotid, connectionname )
AS
(
	SELECT snapshotid, connectionname
		FROM dbo.getsnapshotlist(@rundate, @usebaseline) AS s
		WHERE s.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
			AND UPPER(s.connectionname) LIKE UPPER(@serverName)
		
)
,cte_allgroupmembers ( snapshotid, sid, type, name, groupsid, grouptype, groupname, grouplevel, rootsid, rootname )
AS
(
	SELECT snapshotid, sid, type, name, cast(null as varbinary(85)), cast(null as nvarchar(128)), CAST(null as nvarchar(200)), 0, sid, name
		FROM windowsaccount
		WHERE type <> 'User'
	UNION ALL
	SELECT m.snapshotid, m.sid, m.type, m.name, g.sid, g.type, g.name, g.grouplevel + 1, g.rootsid, g.rootname
		FROM cte_allgroupmembers g
			INNER JOIN vwwindowsgroupmembers m
				ON g.sid = m.groupsid
					and g.snapshotid = m.snapshotid
			INNER JOIN cte_snapshots s
				ON m.snapshotid = s.snapshotid
)
SELECT	s.connectionname AS [Server],
		db.databasename AS [Database],
		r.name AS [Role],
		m.name AS Member,
		dbo.getdatabaseprincipaltypename(m.type) AS logintype,
		'' AS Access,
		dbo.getyesnotext(m.isalias) AS isalias,
		dbo.getyesnotext(m.hasaccess) AS hasaccess,
		CASE gm.sid WHEN m.usersid THEN '' ELSE isnull(gm.name, dbp.name) END as 'Login',
		CASE isnull(sp.disabled, 'N') WHEN 'N' THEN isnull(wa.enabled, 1) ELSE 0 END as 'Enabled',
		dbo.getdatabaseprincipaltypename(isnull(dbp.type, gm.type)) as 'UserType'
FROM	cte_snapshots AS s,
		sqldatabase AS db,
		databaseprincipal AS r,
		databaserolemember AS rm,
		databaseprincipal AS m left join vwwindowsgroupmembers as gm
			on gm.snapshotid = m.snapshotid
			AND (gm.groupsid = m.usersid or gm.sid = m.usersid)
		left join vwdatabaserolemember as gm2
			on gm2.snapshotid = m.snapshotid
			AND (gm2.uid = m.uid)
			AND gm2.dbid = m.dbid
			left join databaseprincipal as dbp
			on gm2.rolememberuid = dbp.uid and gm2.snapshotid = dbp.snapshotid and gm2.dbid = dbp.dbid
		left join serverprincipal as sp
			on sp.snapshotid = m.snapshotid
			and (sp.sid=m.usersid OR sp.sid = dbp.usersid)
		left join windowsaccount as wa
			on wa.snapshotid = gm.snapshotid
			and wa.sid=gm.sid
WHERE	db.snapshotid = s.snapshotid
		AND r.snapshotid = db.snapshotid
		AND r.dbid = db.dbid
		AND r.type = 'R'
		AND rm.snapshotid = r.snapshotid
		AND rm.dbid = r.dbid
		AND rm.groupuid = r.uid
		AND m.snapshotid = rm.snapshotid
		AND m.dbid = rm.dbid
		AND m.uid = rm.rolememberuid

DROP TABLE #tmpservers

GO
 
GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_databaseroles_user] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_dbuserfixedrole]'))
drop procedure [dbo].[isp_sqlsecure_report_dbuserfixedrole]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_dbuserfixedrole] 
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --				Checks all servers and databases for guest being a member of database fixed roles
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid 

SELECT	e.connectionname, d.databasename, username = c.name, [role] = a.name
FROM	databaseprincipal a, 
		databaserolemember b, 
		databaseprincipal c,
		sqldatabase d,
		dbo.getsnapshotlist(@rundate, @usebaseline) e
WHERE	e.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(e.connectionname) LIKE UPPER(@serverName)		
		AND a.snapshotid = e.snapshotid 
		AND a.type = 'R'
		AND a.uid > 16383		--database fixed roles are 16384-16393
		AND a.uid < 16394 
		AND b.snapshotid = a.snapshotid
		AND c.snapshotid = a.snapshotid
		AND b.dbid = a.dbid
		AND c.dbid = a.dbid
		AND d.snapshotid = a.snapshotid
		AND d.dbid = a.dbid
		AND b.groupuid = a.uid
		AND b.rolememberuid = c.uid
		AND LOWER(c.name) IN ('public', 'guest') 
		AND c.hasaccess = 'Y'

ORDER BY connectionname, databasename, username, [role]

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_dbuserfixedrole] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getactivityhistory]'))
drop procedure [dbo].[isp_sqlsecure_report_getactivityhistory]
GO

CREATE PROCEDURE [dbo].[isp_sqlsecure_report_getactivityhistory]
(
	@server varchar(255),
	@status varchar(100),
	@startdate varchar(50),
	@enddate varchar(50),
	@login varchar(255),
	@policyid int = 1		--defaults to all
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Returns matching events for the Activity History Report
   -- 

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid               

SELECT	activitytype,
		CONVERT(nvarchar(10), eventtimestamp, 101) AS datestamp,
		CONVERT(nvarchar(8), eventtimestamp, 108) AS [timestamp],
		connectionname,
		serverlogin,
		[description]
FROM	SQLsecure.dbo.applicationactivity
WHERE	connectionname IN (SELECT r.connectionname FROM registeredserver r, #tmpservers t WHERE r.registeredserverid = t.registeredserverid)
		AND connectionname LIKE @server
		AND activitytype LIKE @status 
		AND eventtimestamp BETWEEN CONVERT(datetime, @startdate) AND CONVERT(datetime, @enddate) 
		AND UPPER(serverlogin) LIKE UPPER(@login)

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getactivityhistory] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getassessmentlist]'))
drop procedure [dbo].[isp_sqlsecure_report_getassessmentlist]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getassessmentlist]
(
	@policyid int
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a list of the current and saved assessments belonging to the policyid for selection by reports

SELECT	policyid, assessmentid, assessmentname
	FROM vwpolicy WHERE policyid = @policyid and assessmentstate <> N'S'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getassessmentlist] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getauditedinstances]'))
drop procedure [dbo].[isp_sqlsecure_report_getauditedinstances]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getauditedinstances]
(
	@rundate datetime = null,		-- defaults to all
	@connectionname nvarchar(256),
	@usebaseline bit = 0,			-- defaults to false
	@policyid int = 1,				-- defaults to all
	@assessmentid int = null		-- default to policy settings for backward compatibility
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
	--
	-- Description :
	--              Returns a list of all servers being audited at the selected rundate
	--				and optionally can just return the selected server
	-- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
        @policyid = @policyid, 
		@assessmentid = @assessmentid

SELECT	a.connectionname,
		a.servername,
		a.instancename,
		version =	CASE 
						WHEN SUBSTRING(a.version,1,3) = '08.' OR SUBSTRING(a.version,1,2) = '8.' 
							THEN 'SQL Server 2000 v'
						WHEN SUBSTRING(a.version,1,3) = '09.' OR SUBSTRING(a.version,1,2) = '9.'
							THEN 'SQL Server 2005 v'
						WHEN SUBSTRING(a.version,1,6) = '10.50.' -- check before the broader 2008 check
							THEN 'SQL Server 2008 R2 v'
						WHEN SUBSTRING(a.version,1,3) = '10.'
							THEN 'SQL Server 2008 v'
						WHEN SUBSTRING(a.version,1,3) = '11.'
							THEN 'SQL Server 2012 v'
						WHEN SUBSTRING(a.version,1,3) = '12.'
							THEN 'SQL Server 2014 v'
						ELSE ''
					END + a.version,
		a.edition,
		a.authenticationmode,
		a.os,
		a.loginauditmode,
		a.enableproxyaccount,
		a.enablec2audittrace,
		a.crossdbownershipchaining,
		a.casesensitivemode,
		numwindowsuser = (SELECT COUNT(1) FROM serverprincipal WHERE snapshotid = a.snapshotid AND [type] = 'U' AND serveraccess = 'Y' AND serverdeny = 'N'),
		numwindowsgroup = (SELECT COUNT(1) FROM serverprincipal WHERE snapshotid = a.snapshotid AND [type] = 'G' AND serveraccess = 'Y' AND serverdeny = 'N'),
		numsqllogin = (SELECT COUNT(1) FROM serverprincipal WHERE snapshotid = a.snapshotid AND [type] = 'S' AND serveraccess = 'Y' AND serverdeny = 'N'),
		a.starttime AS snapshottime
FROM	serversnapshot a
WHERE	snapshotid IN (SELECT snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline))
		AND registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND	(
			(UPPER(@connectionname) = 'ALL')
			OR 
			(UPPER(connectionname) = UPPER(@connectionname))
			)


DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getauditedinstances] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getauditedserverlist]'))
drop procedure [dbo].[isp_sqlsecure_report_getauditedserverlist]
GO

CREATE PROC [dbo].[isp_sqlsecure_report_getauditedserverlist]
(
	@policyid int = 1,				-- default to All Servers policy
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@assessmentid2 int = null		-- default to null for no multiple assessment processing
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all available servers in the selected policy or assessment for Reporting Services reports
   --				The value 'All servers in policy' is always added as the first item with id 0
   --				If assessmentid2 is passed, then it will return only servers that are in both assessment server lists
   --
   --				If no assessmentid is passed, then it will default to the policy
   --				If no policyid is passed, then it will default to all servers

create table #tmpservers (registeredserverid int)
	insert #tmpservers
		EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
			 @policyid = @policyid,
			 @assessmentid = @assessmentid

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[#servers]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
DROP TABLE #servers

CREATE TABLE #servers ([server] nvarchar(400), registeredserverid int)

INSERT INTO #servers VALUES('All servers in policy', 0)

INSERT INTO #servers 
	SELECT	connectionname AS [server], registeredserverid 
	FROM	vwregisteredserver
	WHERE	registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
	ORDER BY connectionname

if @assessmentid2 is null
	SELECT [server], registeredserverid FROM #servers
else
begin
	-- process the second assessment
	delete #tmpservers
	insert #tmpservers
		EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
			 @policyid = @policyid,
			 @assessmentid = @assessmentid2

	if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[#servers2]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	DROP TABLE #servers2

	CREATE TABLE #servers2 ([server] nvarchar(400), registeredserverid int)

	INSERT INTO #servers2 VALUES('All servers in policy', 0)	-- create the matching all servers record

	INSERT INTO #servers2 
		SELECT	connectionname AS [server], registeredserverid 
		FROM	vwregisteredserver
		WHERE	registeredserverid IN (SELECT registeredserverid FROM #tmpservers)

	SELECT [server], registeredserverid FROM #servers where registeredserverid in (SELECT registeredserverid FROM #servers2)

	DROP TABLE #servers2
end	

DROP TABLE #servers
DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getauditedserverlist] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getauditedserverlistnoall]'))
drop procedure [dbo].[isp_sqlsecure_report_getauditedserverlistnoall]
GO

CREATE PROC [dbo].[isp_sqlsecure_report_getauditedserverlistnoall]
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all available servers/connections for Reporting Services - doesn't bring back 
   --              "ALL" value like isp_sqlsecure_report_getauditedserverlist

	SELECT connectionname AS [server], registeredserverid FROM vwregisteredserver

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getauditedserverlistnoall] TO [SQLSecureView]
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getauditfilters]'))
drop procedure [dbo].[isp_sqlsecure_report_getauditfilters]
GO

CREATE PROCEDURE [dbo].[isp_sqlsecure_report_getauditfilters]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Gets audit filters setup for servers.
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid 

SELECT	servername = s.connectionname,
		rulename = sfheader.rulename,
		ruledescription = sfheader.description,
		modifiedby = sfheader.lastmodifiedby,
		modifiedon = sfheader.lastmodifiedtm,
		[type] = fclass.objectvalue,
		scope =	CASE
					WHEN sfrule.scope = 'A' THEN 'User and System'
					WHEN sfrule.scope = 'S' THEN 'System'
					WHEN sfrule.scope = 'U' THEN 'User'
				END,
		namematchstring =	CASE
								WHEN sfrule.matchstring = '' THEN '*'
								WHEN sfrule.matchstring IS NULL THEN '*'
								ELSE sfrule.matchstring
							END
FROM	serverfilterrule AS sfrule,
		serverfilterruleheader AS sfheader,
		filterruleclass AS fclass,
		dbo.getsnapshotlist(@rundate, @usebaseline) AS s
WHERE	s.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(s.connectionname) LIKE UPPER(@serverName)
		AND sfheader.snapshotid = s.snapshotid
		AND sfheader.filterruleheaderid = sfrule.filterruleheaderid
		AND sfheader.snapshotid = sfrule.snapshotid
		AND sfrule.class = fclass.objectclass

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getauditfilters] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getcomparesnapshotinfo]'))
drop procedure [dbo].[isp_sqlsecure_report_getcomparesnapshotinfo]
GO


CREATE procedure [dbo].[isp_sqlsecure_report_getcomparesnapshotinfo]
(
	@snapshotid int,
	@snapshotid2 int
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with a list of all snapshots for the selected server
   -- 	           

	select *, convert(nvarchar, starttime, 101) + ' ' + convert(nvarchar, starttime, 108) as snapshotname
		from vwserversnapshot
		where snapshotid in (@snapshotid, @snapshotid2) 
		order by snapshotid desc

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getcomparesnapshotinfo] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getdatabases]'))
drop procedure [dbo].[isp_sqlsecure_report_getdatabases]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getdatabases]
(
	@connectionname nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all databases for a particular server.

SELECT databasename
FROM sqldatabase
WHERE snapshotid = (
	SELECT lastcollectionsnapshotid
	FROM registeredserver
	WHERE upper(connectionname) = upper(@connectionname))


GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getdatabases] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getdatabaseuserpermissions]'))
drop procedure [dbo].[isp_sqlsecure_report_getdatabaseuserpermissions]
GO
 
CREATE procedure [dbo].[isp_sqlsecure_report_getdatabaseuserpermissions]
(
	@connectionname nvarchar(400),
	@database nvarchar(256),
	@rundate datetime=null,
	@usertablesonly bit=0,
	@includesource bit=0,
	@usebaseline bit = 0)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return all permissions for all users who can access a database
   --                  
 
      declare @snapshotid int, @logintype nchar(1), @sid varbinary(85), @name nvarchar(128), @databaseid int, @errmsg nvarchar(500)
 
 
      -- get the snapshotid for the server and rundate
      -- if the server is not valid then return error
      if not exists (select * from serversnapshot where upper(connectionname) = upper(@connectionname))
      begin
            set @errmsg = 'Error: SQL Server ' + @connectionname + ' not valid'
            RAISERROR (@errmsg, 16, 1)
            return -1
      end
 
      select @snapshotid=snapshotid from dbo.getsnapshotlist(@rundate, @usebaseline) where upper(connectionname) = upper(@connectionname)
 
      -- if there is not a valid snapshot then return error
      if (@snapshotid is null)
      begin
            set @errmsg = 'Error: A valid snapshot was not found for the specified run date'
            RAISERROR (@errmsg, 16, 1)
            return -1
      end
 
 
      -- get the databaseid
      -- if the database is not valid then return error
      if (@database IS NOT NULL and @database <> '')
      begin
            if exists (select * from serversnapshot where snapshotid = @snapshotid and casesensitivemode = 'Y')
            begin
 
                  if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and CONVERT(varbinary, databasename) = CONVERT(varbinary, @database))
                  begin
                        set @errmsg = 'Error: Invalid database name'
                        RAISERROR (@errmsg, 16, 1)
                        return
                  end 
            end
            else
            begin
                  if not exists (select 1 from sqldatabase where snapshotid = @snapshotid and UPPER(databasename) = UPPER(@database))
                  begin
                        set @errmsg = 'Error: Invalid database name'
                        RAISERROR (@errmsg, 16, 1)
                        return
                  end 
            end
      end
 
      select @databaseid = dbid from sqldatabase where snapshotid = @snapshotid and databasename = @database
 
      -- pull the logins to a temp table to combine from the different sources and eliminate duplicates
      create table #tmplogin ([type] nchar(1), [sid] varbinary(85), [name] nvarchar(128))
 
      -- get a list of all the serverprincipals that have directly defined access to the database
      insert into #tmplogin
            select distinct p.type, p.sid, p.name
                  from databaseprincipal u
                        inner join serverprincipal p on (u.snapshotid = p.snapshotid and u.usersid = p.sid)
                        inner join sqldatabase d on (u.snapshotid = d.snapshotid and u.dbid = d.dbid)
                  where d.snapshotid=@snapshotid
                        and d.dbid=@databaseid
      -- add all the sysadmins not already included
      insert into #tmplogin
            select p.type, p.sid, p.name
                  from serverprincipal p
                        inner join serverrolemember m on (m.snapshotid = p.snapshotid and m.memberprincipalid = p.principalid)
                  where p.snapshotid=@snapshotid
                        and m.principalid = dbo.getserverroleprincipalid(N'sysadmin')
                        and p.sid not in (select [sid] from #tmplogin)
      -- add all windows accounts not already included
      insert into #tmplogin
            select 'W' as [type], p.sid, p.name
                  from windowsaccount p
                  where p.snapshotid=@snapshotid
                        and p.sid not in (select [sid] from #tmplogin)
 
      -- loop through the logins getting the permissions for each one into the #tmpserverpermission table
      declare @type nchar(1), @inputsid varbinary(85), @sqllogin nvarchar(400)
      create table #tmpserverpermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))
 
      -- used for tracking statistics
      declare @exectime datetime, @count int, @lastcount int
      select @lastcount=0
 
      declare mycursor cursor for
            select [type], [sid], [name] from #tmplogin
      open mycursor
      fetch next from mycursor into @logintype, @sid, @name
 
      while (@@fetch_status = 0)
      begin
            select @type=case @logintype when N'S' then N'S' else N'W' end
            select @inputsid=case @type when N'S' then NULL else @sid end,
                        @sqllogin=case when @type = N'S' then @name else NULL end
            -- used for tracking statistics
            print 'Processing login ' + @name + '   type=' + @type + ' (' + @logintype + ')'
            select @exectime = getdate(), @count=0
 
            exec [dbo].[isp_sqlsecure_getuserpermission]
                        @snapshotid=@snapshotid,
                        @logintype=@type,
                        @inputsid=@inputsid,
                        @sqllogin=@sqllogin,
                        @databasename=@database,
                        @permissiontype=N'E'
 
            -- used for tracking statistics
            select @count=count(*) from #tmpserverpermission
            print '    Added ' + right(space(6) + cast(@count-@lastcount as nvarchar), 7) + ' records in ' + right(space(8) + cast(datediff(ms, @exectime, getdate()) as nvarchar), 9) + ' ms'
            select @lastcount = @count
 
            fetch next from mycursor into @logintype, @sid, @name
      end
 
      close mycursor
      deallocate mycursor
 
 
      --if user tables and views only, remove all objects except tables, views, columns and the database and server
      if (@usertablesonly = 1)
            delete from #tmpserverpermission
                  where permissionlevel='SCH'
                              or (permissionlevel='OBJ' and objecttype not in ('V', 'U', 'iCO'))
                              or (permissionlevel='SV' and objecttype not in ('iSRV'))
                              --or (permissionlevel='OBJ' and objecttype = ('V') and ownername in ('sys', 'INFORMATION_SCHEMA'))
 
      declare @sql nvarchar(4000)
      select @sql = 'select distinct
                                    dbo.getpermissionlevelname(permissionlevel) as permissionlevel,
                                    dbo.getlogintypename(logintype) as logintype,
                                    dbo.replacenullwithhyphen(loginname) as loginname,
									objecttypename=CASE WHEN b.objecttypename IS NULL THEN dbo.getclasstype(classid) ELSE b.objecttypename END,
									qualifiedname,
									permission, 			                                
                                    dbo.replacenullwithhyphen(principalname) as principalname, 
                                    dbo.getserverprincipaltypename(principaltype) as principaltype,
                                    dbo.replacenullwithhyphen(databaseprincipal) as databaseprincipal, 
                                    dbo.getdatabaseprincipaltypename(databaseprincipaltype) as databaseprincipaltype,
                                    grantorname,
                                    granteename,
                                    dbo.getaccesstype(isdeny, isgrantwith, isgrant, isrevoke) as access, 
									isgrant, 
                                    isgrantwith, 
                                    isrevoke, 
                                    isdeny,
                                    dbo.replacenullwithhyphen(schemaname) as schemaname,
                                    dbo.replacenullwithhyphen(ownername) as ownername,
                                    dbo.getyesnotext(isaliased) as isaliased,
                                    dbo.getyesnotext(inherited) as inherited'
 
      if (@includesource = 1)
            select @sql = @sql + ',
                                    sourcename,
                                    sourcetypename=CASE WHEN c.objecttypename IS NULL THEN sourcetype ELSE c.objecttypename END,
                                    sourcepermission'
 
      select @sql = @sql + ' from #tmpserverpermission a
                                          left outer join objecttype b on a.objecttype = b.objecttype'
 
      if (@includesource = 1)
            select @sql = @sql + ' left outer join objecttype c on a.sourcetype = c.objecttype'
 
      select @sql = @sql + ' order by logintype, granteename, permissionlevel, objecttypename, qualifiedname, permission'
 
      exec (@sql)
 
      drop table #tmpserverpermission
 
      drop table #tmplogin
 
GO
 
GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getdatabaseuserpermissions] TO [SQLSecureView]
 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getguestenabledservers]'))
drop procedure [dbo].[isp_sqlsecure_report_getguestenabledservers]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getguestenabledservers]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@connectionname nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all the databases that have guest users enabled.

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  

SELECT b.connectionname,
		a.databasename,
		a.[owner]
FROM sqldatabase a,
		serversnapshot b
WHERE a.snapshotid = b.snapshotid
		AND b.snapshotid IN (SELECT snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline)) 
		AND b.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND ((case when @connectionname = '%' or @connectionname = '' then 1 else 0 end = 1)
				or (UPPER(b.connectionname) = UPPER(@connectionname)))
		AND a.guestenabled = 'Y'
ORDER BY b.connectionname, a.databasename

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getguestenabledservers] TO [SQLSecureView]

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getpolicyinfo]'))
drop procedure [dbo].[isp_sqlsecure_report_getpolicyinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getpolicyinfo]
(
	@policyid int,
	@assessmentid int
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Gets all the policy information

SELECT * 
FROM vwpolicy
WHERE policyid = @policyid
	and assessmentid = @assessmentid
	
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getpolicyinfo] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getpolicylist]'))
drop procedure [dbo].[isp_sqlsecure_report_getpolicylist]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getpolicylist]
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a list of policies for selection by reports

SELECT	policyid, assessmentid, policyname 
	FROM vwpolicy WHERE assessmentstate = N'S'

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getpolicylist] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getserveraccess]'))
drop procedure [dbo].[isp_sqlsecure_report_getserveraccess]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getserveraccess]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@logintype nchar(1), 
	@inputsid varbinary(85), 
	@sqllogin nvarchar(128),
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all the server logins given the input sid or sql login

DECLARE @snapshotid int
DECLARE @connectionname nvarchar(500)
DECLARE @loginname nvarchar(128)
DECLARE @iscasesensitive nchar(1)

SET @iscasesensitive = 'Y'

CREATE TABLE #tmpserveraccess (snapshotid int, connectionname nvarchar(500), logintype nvarchar(40), loginname nvarchar(500))
CREATE TABLE #tmplogins ([sid] varbinary(85), principalid int, [name] nvarchar(128), [type] nchar(1), serveraccess nchar(1), serverdeny nchar(1), [disabled] nchar(1))

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  

-- Go thru' all the snapshots and get the server
DECLARE cursor1 CURSOR FOR (SELECT snapshotid, connectionname FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers) AND connectionname LIKE @serverName)

OPEN cursor1
FETCH NEXT FROM cursor1
INTO @snapshotid, @connectionname

WHILE @@fetch_status = 0
	BEGIN
		DELETE FROM #tmplogins
		SELECT @iscasesensitive = casesensitivemode FROM serversnapshot WHERE snapshotid = @snapshotid

		IF (@logintype = 'W')
			BEGIN
				IF EXISTS (SELECT * FROM windowsaccount WHERE snapshotid = @snapshotid AND [sid] = @inputsid)
					BEGIN
						CREATE TABLE #tmpsid ([sid] varbinary(85))
					
						-- insert current login to tmp table
						INSERT INTO #tmplogins ([sid], principalid, [name], [type], serveraccess, serverdeny, [disabled]) (SELECT DISTINCT [sid], principalid, [name], [type], serveraccess, serverdeny, [disabled] FROM serverprincipal WHERE snapshotid = @snapshotid AND [sid] = @inputsid)
					
						-- get all windows parents groups
						INSERT INTO #tmpsid EXEC isp_sqlsecure_getwindowsgroupparents @snapshotid, @inputsid
					
						-- insert all groups in serverprincipal table
						INSERT INTO #tmplogins ([sid], principalid, [name], [type], serveraccess, [disabled]) (SELECT DISTINCT a.sid, a.principalid, a.name, a.type, a.serveraccess, a.disabled FROM serverprincipal a, #tmpsid b WHERE a.snapshotid = @snapshotid AND a.sid = b.sid)
				
						SELECT @loginname = [name] FROM serverprincipal WHERE [sid] = @inputsid
				
						DROP TABLE #tmpsid				
					END
			END
		ELSE -- sql login type
			BEGIN
				IF (@iscasesensitive = 'Y')
					INSERT INTO #tmplogins ([sid], principalid, [name], [type], serveraccess, serverdeny, [disabled]) (SELECT DISTINCT a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled FROM serverprincipal a WHERE a.snapshotid = @snapshotid AND [type] = 'S' AND CONVERT(VARBINARY, [name])=CONVERT(VARBINARY, @sqllogin))
				ELSE
					INSERT INTO #tmplogins ([sid], principalid, [name], [type], serveraccess, serverdeny, [disabled]) (SELECT DISTINCT a.sid, a.principalid, a.name, a.type, a.serveraccess, a.serverdeny, a.disabled FROM serverprincipal a WHERE a.snapshotid = @snapshotid AND [type] = 'S' AND UPPER([name])=UPPER(@sqllogin))

				SET @loginname = @sqllogin
			END

		-- Check if any of these logins have deny or no access, if so then don't show
		IF EXISTS (SELECT 1 FROM #tmplogins)
			BEGIN
				IF EXISTS (SELECT 1 FROM #tmplogins WHERE serveraccess = 'Y' AND (serverdeny IS NULL OR serverdeny <> 'Y') AND ([disabled] = '' OR [disabled] <> 'Y'))
					BEGIN
						INSERT INTO #tmpserveraccess (snapshotid, connectionname, logintype, loginname)
						SELECT DISTINCT @snapshotid, @connectionname, dbo.getserverprincipaltypename([type]) AS [type], [name] FROM #tmplogins				
					END
			END

		FETCH NEXT FROM cursor1
		INTO @snapshotid, @connectionname

	END

CLOSE cursor1
DEALLOCATE cursor1

DROP TABLE #tmpservers

SELECT DISTINCT * FROM #tmpserveraccess

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getserveraccess] TO [SQLSecureView]

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getserversnapshotlist]'))
drop procedure [dbo].[isp_sqlsecure_report_getserversnapshotlist]
GO


CREATE procedure [dbo].[isp_sqlsecure_report_getserversnapshotlist]
(
	@registeredserverid int
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Return a table with a list of all snapshots for the selected server
   -- 	           

	select snapshotid, 
			convert(nvarchar, starttime, 101) + ' ' + convert(nvarchar, starttime, 108) as snapshotname
		from vwserversnapshot
		where registeredserverid = @registeredserverid 
			and [status] in (N'S', N'W')
		order by starttime desc

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getserversnapshotlist] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getsqlsecurelogins]'))
drop procedure [dbo].[isp_sqlsecure_report_getsqlsecurelogins]
GO

CREATE PROC [dbo].[isp_sqlsecure_report_getsqlsecurelogins]
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Gets all Windows users and their access to SQLsecure.

CREATE TABLE #tmplogins (sid varbinary(85), loginname nvarchar(500), logintype nvarchar(32), serveraccess nvarchar(16), applicationpermission nvarchar(16))

INSERT INTO #tmplogins(sid, loginname,logintype,serveraccess,applicationpermission)
EXEC isp_sqlsecure_getaccessinfo

SELECT loginname, logintype, serveraccess, applicationpermission
FROM #tmplogins
WHERE UPPER(logintype) LIKE UPPER('Windows%')

DROP TABLE #tmplogins

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getsqlsecurelogins] TO [SQLSecureView]
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getuserdatabasepermissions]'))
drop procedure [dbo].[isp_sqlsecure_report_getuserdatabasepermissions]
GO

CREATE PROCEDURE [dbo].[isp_sqlsecure_report_getuserdatabasepermissions]
	@rundate datetime = null,
	@user nvarchar(400),
	@server nvarchar(400),
	@permission nvarchar(1),
	@usertype nvarchar(1),
	@usebaseline bit = 0
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Generate data for Users Permissions Reports

	SET NOCOUNT ON
	DECLARE @snapshotid int
	DECLARE @sid varbinary(85)
	DECLARE @databasename nvarchar(200)
	declare @logintype nchar(1)
	declare @validuser nchar(1)
	declare @iscasesensitive nchar(1)

	IF EXISTS (SELECT name FROM sysobjects WHERE xtype='u' AND name='#tmpserverpermission')
	BEGIN
		DROP TABLE #tmpserverpermission
	END

	CREATE TABLE #tmpserverpermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), 
	databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1),
	isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))

	--If the user wants information about ALL servers

	IF(@server = '%')
	BEGIN
		DECLARE @connectionname nvarchar(400)
		DECLARE c CURSOR FOR SELECT DISTINCT connectionname FROM serversnapshot
	
		OPEN c

		FETCH NEXT FROM c INTO @connectionname

		WHILE @@FETCH_STATUS = 0
		BEGIN
			SELECT @snapshotid = snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE upper(connectionname) = upper(@connectionname)

			select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

			set @validuser = 'N'
	
			if (UPPER(@usertype) = 'W')
			begin
				if exists (select 1 from windowsaccount where snapshotid = @snapshotid and UPPER(name)= UPPER(@user))
					set @validuser = 'Y'
	
			end
			else
			begin
				if (@iscasesensitive = 'Y')
				begin

					if exists (select 1 from serverprincipal where snapshotid = @snapshotid and CONVERT(varbinary(256), name)= CONVERT(varbinary(256), @user) and type = 'S')
						set @validuser = 'Y'

				end
				else
				begin
					if exists (select 1 from serverprincipal where snapshotid = @snapshotid and UPPER(name)= UPPER(@user) and type = 'S')
						set @validuser = 'Y'

				end
	
			end
	
	
			if (@validuser = 'Y')
			begin

				IF (LEN(@snapshotid) > 0)
				BEGIN
					-- Get Databases info
					DECLARE cdb CURSOR FOR SELECT databasename FROM sqldatabase WHERE snapshotid = @snapshotid
					OPEN cdb
					FETCH NEXT FROM cdb INTO @databasename
					WHILE @@FETCH_STATUS = 0
					BEGIN
						IF(@usertype = 'W')
						BEGIN
							SELECT @sid = sid FROM windowsaccount WHERE UPPER(name) = @user
							EXEC isp_sqlsecure_getuserpermission @snapshotid=@snapshotid, @logintype='W', @inputsid=@sid, @sqllogin='', @databasename=@databasename, @permissiontype=@permission
						END
						ELSE
						BEGIN
							EXEC isp_sqlsecure_getuserpermission @snapshotid=@snapshotid, @logintype='S' ,@inputsid=null, @sqllogin=@user, @databasename=@databasename, @permissiontype=@permission
						END
	
						FETCH NEXT FROM c INTO @databasename
					END
	
					CLOSE cdb
					DEALLOCATE cdb
				END
				FETCH NEXT FROM c INTO @connectionname
			END
			CLOSE c
			DEALLOCATE c
		end
	END
	ELSE
	BEGIN
		SELECT @snapshotid = snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE upper(connectionname) = upper(@server)

		select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

		set @validuser = 'N'

		if (UPPER(@usertype) = 'W')
		begin
			if exists (select 1 from windowsaccount where snapshotid = @snapshotid and UPPER(name)= UPPER(@user))
				set @validuser = 'Y'

		end
		else
		begin
			if (@iscasesensitive = 'Y')
			begin

				if exists (select 1 from serverprincipal where snapshotid = @snapshotid and CONVERT(varbinary(256), name)= CONVERT(varbinary(256), @user) and type = 'S')
					set @validuser = 'Y'

			end
			else
			begin
				if exists (select 1 from serverprincipal where snapshotid = @snapshotid and UPPER(name)= UPPER(@user) and type = 'S')
					set @validuser = 'Y'

			end

		end
	
		delete from #tmpserverpermission

		if (@validuser = 'Y')
		begin

			IF (LEN(@snapshotid) > 0)
			BEGIN
				-- Get Databases info
				DECLARE c CURSOR FOR SELECT databasename FROM sqldatabase WHERE snapshotid = @snapshotid
				OPEN c
				FETCH NEXT FROM c INTO @databasename
				WHILE @@FETCH_STATUS = 0
				BEGIN
	
					IF(UPPER(@usertype) = 'W')
					BEGIN
						SELECT @sid = sid FROM windowsaccount WHERE snapshotid = @snapshotid and UPPER(name)= UPPER(@user)
						EXEC isp_sqlsecure_getuserpermission @snapshotid=@snapshotid, @logintype='W', @inputsid=@sid, @sqllogin='', @databasename=@databasename, @permissiontype=@permission
					END
					ELSE
					BEGIN
						EXEC isp_sqlsecure_getuserpermission @snapshotid=@snapshotid, @logintype='S' ,@inputsid=NULL, @sqllogin=@user, @databasename=@databasename, @permissiontype=@permission
					END
	
					FETCH NEXT FROM c INTO @databasename
				END
	
				CLOSE c
				DEALLOCATE c
			END
		end
	END

	SELECT DISTINCT 
		granteename, grantorname, permission, isgrant, isgrantwith, isdeny, qualifiedname, ownername, isaliased, objecttypename= dbo.getobjecttypename(objecttype), databasename
	FROM #tmpserverpermission 
	ORDER BY databasename, objecttypename, qualifiedname, permission

	DROP TABLE #tmpserverpermission

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getuserdatabasepermissions] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getuserinfo]'))
drop procedure [dbo].[isp_sqlsecure_report_getuserinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_getuserinfo] 
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Get all user information from all servers and databases
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  

SELECT	d.connectionname,
		a.name as loginname,
		dbo.getserverprincipaltypename(a.type) as logintype,
		c.databasename,
		b.name as username, 
		dbo.getyesnotext(b.isalias) as isalias,
		dbo.getyesnotext(b.hasaccess) as hasaccess, 
		b.defaultschemaname as defaultschema
FROM	serverprincipal a,
		databaseprincipal b,
		sqldatabase c,
		dbo.getsnapshotlist(@rundate, @usebaseline) d
WHERE	d.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(d.connectionname) LIKE UPPER(@serverName)
		AND a.snapshotid = d.snapshotid
		AND b.snapshotid = a.snapshotid 
		AND c.snapshotid = b.snapshotid 
		AND a.sid = b.usersid 
		AND b.dbid = c.dbid 
		AND a.type IN ('U', 'G', 'S')

ORDER BY connectionname, loginname, logintype, databasename, username, isalias, hasaccess, defaultschema

DROP TABLE #tmpservers

GO
 
GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getuserinfo] TO [SQLSecureView]
 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getuserpermissions]'))
drop procedure [dbo].[isp_sqlsecure_report_getuserpermissions]
GO

CREATE PROCEDURE [dbo].[isp_sqlsecure_report_getuserpermissions]
(
	@user nvarchar(400),
	@server nvarchar(400),
	@usertype nvarchar(1),
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0		--defaults to false
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description : 
   --              Generate data for Users Permissions Reports

	SET NOCOUNT ON
	DECLARE @snapshotid int
	DECLARE @sid varbinary(85)
	DECLARE @databasename nvarchar(200)
	declare @validuser nchar(1)

	IF EXISTS (SELECT name FROM sysobjects WHERE xtype='u' AND name='#tmpserverpermission')
	BEGIN
		DROP TABLE #tmpserverpermission
	END

	-- Prevent SQL injection
	select @user = replace(@user, '*', '%')
	select @user = replace(@user, '--', '')
	select @user = replace(@user, ';', '')
	select @user = replace(@user, '''', '')

	CREATE TABLE #tmpservers (registeredserverid int)
		INSERT #tmpservers
			EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
				 @policyid = @policyid 

	CREATE TABLE #tmpserverpermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), 
	databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), 
	isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), 
	isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))

	CREATE TABLE #tmpserver (connectionname nvarchar(500), loginname nvarchar(250), logintype nvarchar(32), serveraccess nvarchar(32), [disabled] nvarchar(16), [role] nvarchar(500))

	CREATE TABLE #tmproles (rolename nvarchar(256))

	declare @login nvarchar(500)
	declare @logintype nvarchar(32)
	declare @serveraccess nvarchar(32)
	declare @disabled nvarchar(16)
	declare @roles nvarchar(1000)
	declare @rolename nvarchar(256)
	set @roles = ''
	declare @count int

	declare @iscasesensitive nchar(1)

	--If the user wants information about ALL servers
	IF(@server = '%')
	BEGIN
		DECLARE @connectionname nvarchar(400)
		
		DECLARE cc CURSOR FOR SELECT snapshotid, connectionname FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers) AND UPPER(connectionname) LIKE UPPER(@server)
		
		OPEN cc

		FETCH NEXT FROM cc INTO @snapshotid, @connectionname

		WHILE @@FETCH_STATUS = 0
		BEGIN

			select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

			set @validuser = 'N'
	
			if (UPPER(@usertype) = 'W')
			begin
				if exists (select 1 from windowsaccount where snapshotid = @snapshotid and UPPER([name])= UPPER(@user))
					set @validuser = 'Y'
	
			end
			else
			begin
				if (@iscasesensitive = 'Y')
				begin

					if exists (select 1 from serverprincipal where snapshotid = @snapshotid and CONVERT(varbinary(256), name)= CONVERT(varbinary(256), @user) and type = 'S')
						set @validuser = 'Y'

				end
				else
				begin
					if exists (select 1 from serverprincipal where snapshotid = @snapshotid and UPPER(name)= UPPER(@user) and type = 'S')
						set @validuser = 'Y'

				end
	
			end
	
	
			if (@validuser = 'Y')
				begin

				--Server Level Permissions
				IF (LEN(@snapshotid) > 0)
				BEGIN
					IF(UPPER(@usertype) = 'W')
					BEGIN
						SELECT @sid = sid FROM windowsaccount WHERE snapshotid = @snapshotid and UPPER(name) = UPPER(@user)
					END
				END
	
				set @login = @user
		
				if (UPPER(@usertype) = 'W')
					set @logintype = 'Windows Account'
				else
					set @logintype = 'SQL Login'
			
		
				if (UPPER(@iscasesensitive) = 'Y')
				begin
					select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and CONVERT(VARBINARY, name)=CONVERT(VARBINARY, @login)
				end
				else
				begin
					select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and UPPER(name)=UPPER(@login)
				end
		
				delete from #tmproles
				set @roles = ''
		
				exec isp_sqlsecure_getfixedloginrole @snapshotid=@snapshotid, @logintype=@usertype, @inputsid=@sid, @sqllogin=@user
		
				if exists (select 1 from #tmproles)
				begin
					
					declare c1 cursor for select distinct rolename from #tmproles where rolename is not null and rolename <> ''
				
					open c1
			
					fetch next from c1 into @rolename

					set @count = 0
			
					while @@fetch_status = 0
					begin
						if (@count > 0)
						begin
							set @roles = @roles + ', ' + @rolename
						end
						else
						begin
							set @roles = @rolename
						end
	
						set @count = @count + 1
		
						fetch next from c1 into @rolename
					end
		
					close c1
					deallocate c1
		
				end			
		
				-- insert server info 
				insert into #tmpserver (connectionname, loginname, logintype, serveraccess, [disabled], [role]) values (@connectionname, @login, @logintype, @serveraccess, @disabled, @roles)
			end

			FETCH NEXT FROM cc INTO @snapshotid, @connectionname
		END
		CLOSE cc
		DEALLOCATE cc
	END
	ELSE
	BEGIN
		SELECT @snapshotid = snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers) AND UPPER(connectionname) LIKE UPPER(@server)
		
		select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

		set @validuser = 'N'

		if (UPPER(@usertype) = 'W')
		begin
			if exists (select 1 from windowsaccount where snapshotid = @snapshotid and UPPER(name)= UPPER(@user))
				set @validuser = 'Y'

		end
		else
		begin
			if (@iscasesensitive = 'Y')
			begin

				if exists (select 1 from serverprincipal where snapshotid = @snapshotid and CONVERT(varbinary(256), name)= CONVERT(varbinary(256), @user) and type = 'S')
					set @validuser = 'Y'

			end
			else
			begin
				if exists (select 1 from serverprincipal where snapshotid = @snapshotid and UPPER(name)= UPPER(@user) and type = 'S')
					set @validuser = 'Y'

			end

		end

		if (@validuser = 'Y')
		begin

			--Server Level Permissions
			IF (LEN(@snapshotid) > 0)
			BEGIN
				IF(UPPER(@usertype) = 'W')
				BEGIN
					SELECT @sid = sid FROM windowsaccount WHERE snapshotid = @snapshotid and UPPER(name) = UPPER(@user)
				END
			END
	
			set @login = @user
	
			if (UPPER(@usertype) = 'W')
				set @logintype = 'Windows Account'
			else
				set @logintype = 'SQL Login'
		
			select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid
	
			if (UPPER(@iscasesensitive) = 'Y')
			begin
				select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and CONVERT(VARBINARY, name)=CONVERT(VARBINARY, @login)
			end
			else
			begin
				select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and UPPER(name)=UPPER(@login)
			end

			delete from #tmproles
			set @roles = ''

			exec isp_sqlsecure_getfixedloginrole @snapshotid=@snapshotid, @logintype=@usertype, @inputsid=@sid, @sqllogin=@user

			if exists (select 1 from #tmproles)
			begin
				declare c1 cursor for select distinct rolename from #tmproles where rolename is not null and rolename <> ''
			
				open c1

				set @count = 0

				fetch next from c1 into @rolename
		
				while @@fetch_status = 0
				begin

					if (@count > 0)
					begin
						set @roles = @roles + ', ' + @rolename
					end
					else
					begin
						set @roles = @rolename
					end

					set @count = @count + 1
	
					fetch next from c1 into @rolename
				end
	
				close c1
				deallocate c1
	
			end			
	
			-- insert server info 
			insert into #tmpserver (connectionname, loginname, logintype, serveraccess, [disabled], [role]) values (@server, @login, @logintype, @serveraccess, @disabled, @roles)
		end
	END

	-- display the top login info
	select distinct connectionname, loginname, logintype, serveraccess, [disabled], [role] from #tmpserver

	DROP TABLE #tmpserverpermission

	DROP TABLE #tmpservers

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getuserpermissions] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getuserpermissions_user]'))
drop procedure [dbo].[isp_sqlsecure_report_getuserpermissions_user]
GO

CREATE PROCEDURE [dbo].[isp_sqlsecure_report_getuserpermissions_user]
(
	@user nvarchar(400),
	@server nvarchar(400),
	@usertype nvarchar(1),
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0		--defaults to false
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description : 
   --              Generate data for Users Permissions Reports

	SET NOCOUNT ON
	DECLARE @snapshotid int
	DECLARE @sid varbinary(85)
	DECLARE @databasename nvarchar(200)
	declare @validuser nchar(1)

	IF EXISTS (SELECT name FROM sysobjects WHERE xtype='u' AND name='#tmpserverpermission')
	BEGIN
		DROP TABLE #tmpserverpermission
	END

	-- Prevent SQL injection
	select @user = replace(@user, '*', '%')
	select @user = replace(@user, '--', '')
	select @user = replace(@user, ';', '')
	select @user = replace(@user, '''', '')

	CREATE TABLE #tmpservers (registeredserverid int)
		INSERT #tmpservers
			EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
				 @policyid = @policyid 

	CREATE TABLE #tmpserverpermission (snapshotid int, permissionlevel nvarchar(15), logintype nchar(1), loginname nvarchar(256), connectionname nvarchar(400), databasename nvarchar(256), principalid int, principalname nvarchar(128), principaltype nchar(1), 
	databaseprincipal nvarchar(128), databaseprincipaltype nchar(1), grantor int, grantorname nvarchar(128), grantee int, granteename nvarchar(128), classid int, permissiontype nvarchar(4), coveringfrom nvarchar(15), permission nvarchar(256), isgrant nchar(1), 
	isgrantwith nchar(1), isrevoke nchar(1), isdeny nchar(1), parentobjectid int, objectid int, objectname nvarchar(256), qualifiedname nvarchar(256), objecttype nvarchar(64), schemaid int, schemaname nvarchar(128), owner int, ownername nvarchar(128), 
	isaliased nchar(1), inherited nchar(1), sourcename nvarchar(256), sourcetype nvarchar(256), sourcepermission nvarchar(256))

	CREATE TABLE #tmpserver (connectionname nvarchar(500), loginname nvarchar(250), logintype nvarchar(32), serveraccess nvarchar(32), [disabled] nvarchar(16), [role] nvarchar(500), [userlogin] nvarchar(250))

	CREATE TABLE #tmpserverbase (connectionname nvarchar(500), loginname nvarchar(250), logintype nvarchar(32), serveraccess nvarchar(32), [disabled] nvarchar(16), [role] nvarchar(500))

	CREATE TABLE #tmproles (rolename nvarchar(256))

	declare @login nvarchar(500)
	declare @logintype nvarchar(32)
	declare @serveraccess nvarchar(32)
	declare @disabled nvarchar(16)
	declare @roles nvarchar(1000)
	declare @rolename nvarchar(256)
	set @roles = ''
	declare @count int

	declare @iscasesensitive nchar(1)

	--If the user wants information about ALL servers
	IF(@server = '%')
	BEGIN
		DECLARE @connectionname nvarchar(400)
		
		DECLARE cc CURSOR FOR SELECT snapshotid, connectionname FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers) AND UPPER(connectionname) LIKE UPPER(@server)
		
		OPEN cc

		FETCH NEXT FROM cc INTO @snapshotid, @connectionname

		WHILE @@FETCH_STATUS = 0
		BEGIN

			select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

			set @validuser = 'N'
	
			if (UPPER(@usertype) = 'W')
			begin
				if exists (select 1 from windowsaccount where snapshotid = @snapshotid and UPPER([name])= UPPER(@user))
					set @validuser = 'Y'
	
			end
			else
			begin
				if (@iscasesensitive = 'Y')
				begin

					if exists (select 1 from serverprincipal where snapshotid = @snapshotid and CONVERT(varbinary(256), name)= CONVERT(varbinary(256), @user) and type = 'S')
						set @validuser = 'Y'

				end
				else
				begin
					if exists (select 1 from serverprincipal where snapshotid = @snapshotid and UPPER(name)= UPPER(@user) and type = 'S')
						set @validuser = 'Y'

				end
	
			end
	
	
			if (@validuser = 'Y')
				begin

				--Server Level Permissions
				IF (LEN(@snapshotid) > 0)
				BEGIN
					IF(UPPER(@usertype) = 'W')
					BEGIN
						SELECT @sid = sid FROM windowsaccount WHERE snapshotid = @snapshotid and UPPER(name) = UPPER(@user)
					END
				END
	
				set @login = @user
		
				if (UPPER(@usertype) = 'W')
					set @logintype = 'Windows Account'
				else
					set @logintype = 'SQL Login'
			
		
				if (UPPER(@iscasesensitive) = 'Y')
				begin
					select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and CONVERT(VARBINARY, name)=CONVERT(VARBINARY, @login)
				end
				else
				begin
					select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and UPPER(name)=UPPER(@login)
				end
		
				delete from #tmproles
				set @roles = ''
		
				exec isp_sqlsecure_getfixedloginrole @snapshotid=@snapshotid, @logintype=@usertype, @inputsid=@sid, @sqllogin=@user
		
				if exists (select 1 from #tmproles)
				begin
					
					declare c1 cursor for select distinct rolename from #tmproles where rolename is not null and rolename <> ''
				
					open c1
			
					fetch next from c1 into @rolename

					set @count = 0
			
					while @@fetch_status = 0
					begin
						if (@count > 0)
						begin
							set @roles = @roles + ', ' + @rolename
						end
						else
						begin
							set @roles = @rolename
						end
	
						set @count = @count + 1
		
						fetch next from c1 into @rolename
					end
		
					close c1
					deallocate c1
		
				end			
		
				-- insert server info 
				insert into #tmpserverbase (connectionname, loginname, logintype, serveraccess, [disabled], [role]) values 
					(@connectionname, @login, @logintype, @serveraccess, @disabled, @roles)

				INSERT INTO #tmpserver
				SELECT connectionname, loginname, logintype, isnull(sp.serveraccess, m.serveraccess), 
					CASE isnull(sp.[disabled], m.[disabled]) WHEN 'N' THEN (CASE isnull(wa.enabled, 1) WHEN 0 THEN 'Y' ELSE 'N' END) ELSE 'Y' END,
					[role], isnull(gm.name, loginname)
				FROM #tmpserverbase m left join vwwindowsgroupmembers as gm
					on gm.snapshotid = @snapshotid
					AND @usertype = 'W'
					AND (gm.groupsid = @sid or gm.sid = @sid)
					left join serverprincipal as sp
					on sp.snapshotid = @snapshotid
					and (sp.sid=gm.sid)
					left join windowsaccount as wa
					on wa.snapshotid = gm.snapshotid
					and wa.sid=gm.sid

			end

			FETCH NEXT FROM cc INTO @snapshotid, @connectionname
		END
		CLOSE cc
		DEALLOCATE cc
	END
	ELSE
	BEGIN
		SELECT @snapshotid = snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers) AND UPPER(connectionname) LIKE UPPER(@server)
		
		select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid

		set @validuser = 'N'

		if (UPPER(@usertype) = 'W')
		begin
			if exists (select 1 from windowsaccount where snapshotid = @snapshotid and UPPER(name)= UPPER(@user))
				set @validuser = 'Y'

		end
		else
		begin
			if (@iscasesensitive = 'Y')
			begin

				if exists (select 1 from serverprincipal where snapshotid = @snapshotid and CONVERT(varbinary(256), name)= CONVERT(varbinary(256), @user) and type = 'S')
					set @validuser = 'Y'

			end
			else
			begin
				if exists (select 1 from serverprincipal where snapshotid = @snapshotid and UPPER(name)= UPPER(@user) and type = 'S')
					set @validuser = 'Y'

			end

		end

		if (@validuser = 'Y')
		begin

			--Server Level Permissions
			IF (LEN(@snapshotid) > 0)
			BEGIN
				IF(UPPER(@usertype) = 'W')
				BEGIN
					SELECT @sid = sid FROM windowsaccount WHERE snapshotid = @snapshotid and UPPER(name) = UPPER(@user)
				END
			END
	
			set @login = @user
	
			if (UPPER(@usertype) = 'W')
				set @logintype = 'Windows Account'
			else
				set @logintype = 'SQL Login'
		
			select @iscasesensitive = casesensitivemode from serversnapshot where snapshotid = @snapshotid
	
			if (UPPER(@iscasesensitive) = 'Y')
			begin
				select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and CONVERT(VARBINARY, name)=CONVERT(VARBINARY, @login)
			end
			else
			begin
				select @serveraccess = serveraccess, @disabled=[disabled] from serverprincipal where snapshotid = @snapshotid and UPPER(name)=UPPER(@login)
			end

			delete from #tmproles
			set @roles = ''

			exec isp_sqlsecure_getfixedloginrole @snapshotid=@snapshotid, @logintype=@usertype, @inputsid=@sid, @sqllogin=@user

			if exists (select 1 from #tmproles)
			begin
				declare c1 cursor for select distinct rolename from #tmproles where rolename is not null and rolename <> ''
			
				open c1

				set @count = 0

				fetch next from c1 into @rolename
		
				while @@fetch_status = 0
				begin

					if (@count > 0)
					begin
						set @roles = @roles + ', ' + @rolename
					end
					else
					begin
						set @roles = @rolename
					end

					set @count = @count + 1
	
					fetch next from c1 into @rolename
				end
	
				close c1
				deallocate c1
	
			end			
	
			-- insert server info 
			insert into #tmpserverbase (connectionname, loginname, logintype, serveraccess, [disabled], [role]) values 
				(@server, @login, @logintype, @serveraccess, @disabled, @roles)

			INSERT INTO #tmpserver
			SELECT connectionname, loginname, logintype, isnull(sp.serveraccess, m.serveraccess), 
				CASE isnull(sp.[disabled], m.[disabled]) WHEN 'N' THEN (CASE isnull(wa.enabled, 1) WHEN 0 THEN 'Y' ELSE 'N' END) ELSE 'Y' END, 
				[role], isnull(gm.name, loginname)
			FROM #tmpserverbase m left join vwwindowsgroupmembers as gm
				on gm.snapshotid = @snapshotid
				AND @usertype = 'W'
				AND (gm.groupsid = @sid or gm.sid = @sid)
				left join serverprincipal as sp
				on sp.snapshotid = @snapshotid
				and sp.sid=gm.sid
				left join windowsaccount as wa
				on wa.snapshotid = gm.snapshotid
				and wa.sid=gm.sid
		end
	END

	-- display the top login info
	select distinct connectionname, loginname, logintype, serveraccess, [disabled], [role], [userlogin] from #tmpserver

	DROP TABLE #tmpserverpermission

	DROP TABLE #tmpservers
	DROP TABLE #tmpserverbase


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getuserpermissions_user] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_getuserserveraccess]'))
drop procedure [dbo].[isp_sqlsecure_report_getuserserveraccess]
GO

CREATE PROCEDURE [dbo].[isp_sqlsecure_report_getuserserveraccess]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@logintype nchar(1), 
	@user nvarchar(128),
	@servername nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Gets the servers that can be accessed by a user SQL login or Windows account
   -- 
   
-- Replace any SQL injection characters in the user string.
SELECT @user = REPLACE(@user, '*', '%')
SELECT @user = REPLACE(@user, '--', '')
SELECT @user = REPLACE(@user, ';', '')
SELECT @user = REPLACE(@user, '''', '')

-- Note that this SP has a small but definite potential to return the wrong user
-- if two snapshots for the selected rundate have the same name with different SIDs

-- If windows user get the SID of the user.
DECLARE @tempsid varbinary(85)
IF @logintype = 'W' 
	SELECT TOP 1 @tempsid = a.sid FROM windowsaccount a, dbo.getsnapshotlist(@rundate, @usebaseline) b WHERE a.snapshotid = b.snapshotid AND UPPER([name]) LIKE UPPER(@user)

-- Query using the second stored proc for servers that the user has access to.	
EXEC isp_sqlsecure_report_getserveraccess
	@rundate = @rundate,
	@logintype = @logintype, 
	@inputsid = @tempsid, 
	@sqllogin = @user,
	@policyid = @policyid,
	@usebaseline = @usebaseline,
	@serverName = @servername

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_getuserserveraccess] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_msdb_sp_check]'))
drop procedure [dbo].[isp_sqlsecure_report_msdb_sp_check]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_msdb_sp_check] @rundate datetime = null
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers msdb for direct/explicit permission on sp
   -- 	           

	select e.connectionname, b.databasename, username=a.name, objectname=c.name, d.permission, d.isgrant, d.isgrantwith
		from 
			databaseprincipal a,
			sqldatabase b,
			databaseobject c,
			databaseobjectpermission d,
			dbo.getsnapshotlist(@rundate, 0) e
		where a.snapshotid = e.snapshotid and 
			a.snapshotid = b.snapshotid and
			a.dbid = b.dbid and
			b.databasename in ('msdb') and
			c.snapshotid = b.snapshotid and
			c.dbid = b.dbid and
			d.grantee = a.uid and 
			c.objectid = d.objectid and
			d.snapshotid = c.snapshotid and
			d.dbid = c.dbid and
			c.type = 'P' and
			(d.isgrant = 'Y' or d.isgrantwith = 'Y') and
			lower(a.name) in ('public', 'guest')
		order by connectionname, databasename, username, objectname, permission

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_msdb_sp_check] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_orphanedlogins]'))
drop procedure [dbo].[isp_sqlsecure_report_orphanedlogins]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_orphanedlogins]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers for orphaned windows account
   -- 	           

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  
((
SELECT	d.connectionname, a.name,
		[type] = CASE WHEN a.type = 'G' THEN 'Group' ELSE 'User' END,
		-- if there are any resolved accounts in the domain
		--		then this account is likely an orphan
		--		otherwise the entire domain is suspect
		[state] = CASE WHEN EXISTS (SELECT snapshotid FROM windowsaccount WHERE substring([name], 0, charindex('\', [name])) = substring(a.name, 0, charindex('\',a.name)) AND [state] = 'G') THEN 'Orphan' ELSE 'Suspect' END
FROM	serverprincipal a 
		INNER JOIN windowsaccount b ON a.snapshotid = b.snapshotid AND a.sid = b.sid
		LEFT JOIN ancillarywindowsgroup c ON a.snapshotid = c.snapshotid AND a.name = c.windowsgroupname
		INNER JOIN serversnapshot d ON a.snapshotid = d.snapshotid
WHERE	a.snapshotid IN (SELECT snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline))
		AND d.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(d.connectionname) LIKE UPPER(@serverName)
		AND a.type IN ('G', 'U')	-- Principal type is Windows Group or User
		AND b.state = 'S'			-- State is suspect
		AND c.windowsgroupname IS NULL	-- Account is not OS controlled well-known
)
union
(
SELECT	d.connectionname, b.name, 
		[type] = CASE WHEN b.type != 'User' and b.type != 'Unknown' THEN 'Group' ELSE b.type END,
		-- if there are any resolved accounts in the domain
		--		then this account is likely an orphan
		--		otherwise the entire domain is suspect
		[state] = CASE WHEN EXISTS (SELECT snapshotid FROM windowsaccount WHERE substring([name], 0, charindex('\', [name])) = substring(b.name, 0, charindex('\',b.name)) AND [state] = 'G') THEN 'Orphan' ELSE 'Suspect' END
FROM	serveroswindowsaccount b 
		
		LEFT JOIN ancillarywindowsgroup c ON b.snapshotid = c.snapshotid AND b.name = c.windowsgroupname
		INNER JOIN serversnapshot d ON b.snapshotid = d.snapshotid
WHERE	b.snapshotid IN (SELECT snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline))
		AND d.registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
		AND UPPER(d.connectionname) LIKE UPPER(@serverName)
		AND b.type IN ('WellknownGroup', 'User', 'Unknown', 'LocalGroup')	-- Principal type is Windows Group or User
		AND b.state = 'S'			-- State is suspect
		AND c.windowsgroupname IS NULL	-- Account is not OS controlled well-known
))

ORDER BY d.connectionname, a.name

DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_orphanedlogins] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO
 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_serverroles]'))
drop procedure [dbo].[isp_sqlsecure_report_serverroles]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_serverroles] 
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0,		--defaults to false
	@serverName nvarchar(400)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              List all direct members of Server Roles on all Servers
   --   

CREATE TABLE #tmpservers (registeredserverid int)
INSERT #tmpservers
    EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
         @policyid = @policyid  

SELECT	s.connectionname as [Server],
		r.name as [Role],
		m.name as Member,
		dbo.getserverprincipaltypename(m.type) as [Type],
		dbo.getyesnotext(m.serveraccess) as serveraccess,
		dbo.getyesnotext(m.serverdeny) as serverdeny,
		dbo.getyesnotext(m.disabled) as [disabled]
FROM	serversnapshot as s,
		serverprincipal as r,
		serverrolemember as rm,
		serverprincipal as m
WHERE	s.snapshotid IN (SELECT snapshotid FROM dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers))
		AND UPPER(s.connectionname) LIKE UPPER(@serverName)
		AND r.snapshotid = s.snapshotid
		AND r.type IN ('R', 'S')
		AND rm.snapshotid = r.snapshotid
		AND rm.principalid = r.principalid
		AND m.snapshotid = rm.snapshotid
		AND m.principalid = rm.memberprincipalid

ORDER BY s.connectionname, r.name, m.type, m.name

DROP TABLE #tmpservers

GO
 
GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_serverroles] TO [SQLSecureView]

GO
USE [SQLsecure];
GO
/****** Object:  StoredProcedure [dbo].[isp_sqlsecure_report_suspectsqllogins]    Script Date: 7/25/2016 1:04:27 AM ******/
SET ANSI_NULLS ON;
GO
SET QUOTED_IDENTIFIER ON;
GO


CREATE PROCEDURE [dbo].[isp_sqlsecure_report_suspectsqllogins]
    (
      @rundate DATETIME = NULL ,	--defaults to all
      @policyid INT = 1 ,			--defaults to all
      @usebaseline BIT = 0 ,		--defaults to false
      @serverName NVARCHAR(400)
    )
AS -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
  
    CREATE TABLE #tmpservers
        (
          registeredserverid INT
        );
    INSERT  #tmpservers
            EXEC [dbo].[isp_sqlsecure_getpolicymemberlist] @policyid = @policyid;  

    SELECT  snapshotid ,
            connectionname
    INTO    #ids
    FROM    serversnapshot d
    WHERE   d.snapshotid IN (
            SELECT  snapshotid
            FROM    dbo.getsnapshotlist(@rundate, @usebaseline) )
            AND d.registeredserverid IN ( SELECT    registeredserverid
                                          FROM      #tmpservers )
            AND UPPER(d.connectionname) LIKE UPPER(@serverName);
            
            
	            
    SELECT  d.connectionname ,
            a.name ,
            [type] = CASE WHEN a.type = 'G' THEN 'Group'
                          ELSE 'User'
                     END ,
		-- if there are any resolved accounts in the domain
		--		then this account is likely an orphan
		--		otherwise the entire domain is suspect
            '' [state]
    FROM    vwserverprincipal a
            INNER JOIN #ids d ON a.snapshotid = d.snapshotid
    WHERE   NOT EXISTS ( SELECT 1
                         FROM   serverpermission perm
                         WHERE  perm.grantee = a.principalid
                                AND perm.isgrant = 'Y'
                                AND perm.snapshotid IN ( SELECT
                                                              snapshotid
                                                         FROM #ids ) )
            AND NOT EXISTS ( SELECT 1
                             FROM   databaseobjectpermission dbp
                             WHERE  dbp.grantee = a.principalid
                                    AND dbp.isgrant = 'Y'
                                    AND dbp.snapshotid IN ( SELECT
                                                              snapshotid
                                                            FROM
                                                              #ids ) )
            AND NOT EXISTS ( SELECT 1
                             FROM   databaseprincipalpermission dbp
                             WHERE  dbp.grantee = a.principalid
                                    AND dbp.isgrant = 'Y'
                                    AND dbp.snapshotid IN ( SELECT
                                                              snapshotid
                                                            FROM
                                                              #ids ) )
            AND NOT EXISTS ( SELECT 1
                             FROM   databaseschemapermission dbp
                             WHERE  dbp.grantee = a.principalid
                                    AND dbp.isgrant = 'Y'
                                    AND dbp.snapshotid IN ( SELECT
                                                              snapshotid
                                                            FROM
                                                              #ids ) )
    GROUP BY d.connectionname ,
            a.name ,
            a.type
    ORDER BY d.connectionname ,
            a.name;

    DROP TABLE #tmpservers;
    DROP TABLE #ids;


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_report_sysadmin_administrator]'))
drop procedure [dbo].[isp_sqlsecure_report_sysadmin_administrator]
GO

CREATE procedure [dbo].[isp_sqlsecure_report_sysadmin_administrator]
(
	@rundate datetime = null,	--defaults to all
	@policyid int = 1,			--defaults to all
	@usebaseline bit = 0		--defaults to false
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Checks all servers for sysadmin adminstrators
   -- 	

	CREATE TABLE #tmpservers (registeredserverid int)
	INSERT #tmpservers
		EXEC [dbo].[isp_sqlsecure_getpolicymemberlist]
			 @policyid = @policyid 
           
	declare @snapshotid int
	declare @connectionname nvarchar(500)
	declare @status nchar(1)

	create table #tmpdata (connectionname nvarchar(400), login nvarchar(256), fixedrole nvarchar(100))

	-- Go thru' all the snapshots and get the server
	declare cursor1 cursor for select snapshotid, connectionname from dbo.getsnapshotlist(@rundate, @usebaseline) WHERE registeredserverid IN (SELECT registeredserverid FROM #tmpservers)
	
	open cursor1
	fetch next from cursor1
	into @snapshotid, @connectionname

	while @@fetch_status = 0
	begin

		if exists (select * from serverrolemember 
					where snapshotid = @snapshotid 
						and principalid = 3 
						and memberprincipalid in (select principalid 
													from serverprincipal 
													where snapshotid = @snapshotid 
														and sid = 0x01020000000000052000000020020000
													)
					)
		begin
			insert into #tmpdata (connectionname, login, fixedrole) values (@connectionname, 'BUILTIN\ADMINISTRATORS', 'sysadmin')			
		end


	fetch next from cursor1
	into @snapshotid, @connectionname

	end

	close cursor1
	deallocate cursor1

	select distinct connectionname, login, fixedrole from #tmpdata order by connectionname, login, fixedrole

	DROP TABLE #tmpservers

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_report_sysadmin_administrator] TO [SQLSecureView]

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_startalljobs]'))
drop procedure [dbo].[isp_sqlsecure_startalljobs]
GO

CREATE procedure [dbo].[isp_sqlsecure_startalljobs] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Start all SQLsecure SQL Server jobs

	declare @jobid uniqueidentifier

	declare myc100 cursor for
		select job_id from msdb.dbo.sysjobs a, msdb.dbo.syscategories b where a.category_id = b.category_id and a.enabled = 1 and UPPER(b.name) IN ('SQLSECUREJOBS', 'SQLSECUREGROOMINGJOBS')
	
	open myc100
	fetch next from myc100
	into @jobid
	
	while @@fetch_status = 0
	begin
		exec isp_sqlsecure_startjob @jobid = @jobid

		fetch next from myc100
		into @jobid

	end
	
	close myc100
	deallocate myc100	


GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_startjob]'))
drop procedure [dbo].[isp_sqlsecure_startjob]
GO

CREATE procedure [dbo].[isp_sqlsecure_startjob] (@jobid uniqueidentifier)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Start a job.
   -- 	           

	EXEC msdb.dbo.sp_start_job @job_id = @jobid

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_stopalljobs]'))
drop procedure [dbo].[isp_sqlsecure_stopalljobs]
GO

CREATE procedure [dbo].[isp_sqlsecure_stopalljobs] 
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Stop all SQLsecure SQL Server jobs

	declare @jobid uniqueidentifier

	declare myc100 cursor for
		select job_id from msdb.dbo.sysjobs a, msdb.dbo.syscategories b where a.category_id = b.category_id and a.enabled = 1 and UPPER(b.name) IN ('SQLSECUREJOBS', 'SQLSECUREGROOMINGJOBS')
	
	open myc100
	fetch next from myc100
	into @jobid
	
	while @@fetch_status = 0
	begin
		exec isp_sqlsecure_stopjob @jobid = @jobid

		fetch next from myc100
		into @jobid

	end
	
	close myc100
	deallocate myc100	


GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_stopjob]'))
drop procedure [dbo].[isp_sqlsecure_stopjob]
GO

CREATE procedure [dbo].[isp_sqlsecure_stopjob] (@jobid uniqueidentifier)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --             Stop a job.
   -- 	           

	EXEC msdb.dbo.sp_stop_job @job_id = @jobid

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateallcredentials]'))
drop procedure [dbo].[isp_sqlsecure_updateallcredentials]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateallcredentials] (@serverlogin nvarchar(128), @serverpassword nvarchar(128))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update all registered server credentials.   The credentials are used to connect to a SQL Server and also to get group memberships.
   -- 	           This will replace any blank credentials on any registered server with the specified credentials after upgrading to version 2.0.

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int, @str nvarchar(500)
	declare @registeredserverid int, @connectionname nvarchar(400), @setsql bit, @setos bit

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to update credentials for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update All Credentials', @category=N'Server', @description=@errmsg, @connectionname = null
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	declare servercursor cursor static for
		select 
			registeredserverid, 
			connectionname, 
			case when len(sqlserverlogin) = 0 then 1 else 0 end, 
			case when len(serverlogin) = 0 then 1 else 0 end
		from registeredserver
		where (sqlserverauthtype <> 'S' and len(sqlserverlogin) = 0)
				or len(serverlogin) = 0
	open servercursor

	fetch next from servercursor into @registeredserverid, @connectionname, @setsql, @setos
	while @@fetch_status = 0
	begin
		set @str = N''
		if (@setsql = 1)
		begin
			update registeredserver set sqlserverlogin = @serverlogin, sqlserverpassword = @serverpassword, sqlserverauthtype = N'W' where registeredserverid = @registeredserverid
			select @err = @@error
				
			set @str = N'SQL Server'
		end

		if (@setos = 1 and @err = 0)
		begin
			update registeredserver set serverlogin = @serverlogin, serverpassword = @serverpassword where registeredserverid = @registeredserverid
			select @err = @@error

			set @str = @str + case when len(@str) > 0 then N' and ' else N'' end + N'Operating System'
		end

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to update registeredserver table with credentials information'
			RAISERROR (@errmsg, 16, 1)
			return -1
		end
		else
		begin
			set @str = N'Updated empty ' + @str + N' credentials for SQL Server instance ' + @connectionname
		end

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update Credentials', @category=N'Server', @description=@str, @connectionname = @connectionname

		fetch next from servercursor into @registeredserverid, @connectionname, @setsql, @setos
	end

	close servercursor
	deallocate servercursor

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updatenotificationprovider]'))
drop procedure [dbo].[isp_sqlsecure_updatenotificationprovider]
GO

CREATE procedure [dbo].[isp_sqlsecure_updatenotificationprovider]
(
	@notificationproviderid int, 
	@providername nvarchar(64), 
	@providertype nvarchar(32), 
	@servername nvarchar(256), 
	@port int, 
	@timeout int, 
	@requiresauthentication bit, 
	@username nvarchar(128), 
	@password nvarchar(128), 
	@sendername nvarchar(128), 
	@senderemail nvarchar(128) 
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update Notification Provider with new info

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Update', @category=N'Notification Provider', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @name nvarchar(128)
	select @name=providername from notificationprovider where notificationproviderid = @notificationproviderid

	if (@name is null)
	begin
		set @msg = 'Error: Invalid ' + @category + ' id ' + CONVERT(nvarchar, @notificationproviderid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else if exists(select * from notificationprovider where notificationproviderid <> @notificationproviderid AND UPPER(providername) = UPPER(@providername))
	begin
		set @msg = 'Error: Cannot rename ' + lower(@category) + ' "' + @name + '" to "' + @providername + '". Name already exists'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else
	begin
		BEGIN TRAN

		update notificationprovider
		set 
			providername=@providername, 
			providertype=@providertype, 
			servername=@servername, 
			port=@port,
			[timeout]=@timeout, 
			requiresauthentication=@requiresauthentication, 
			username=@username, 
			[password]=@password, 
			sendername=@sendername, 
			senderemail=@senderemail 
		where notificationproviderid = @notificationproviderid

		select @err = @@error

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @name + '" with id ' + CONVERT(NVARCHAR, @notificationproviderid)
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		set @msg = @category + N' "' + @providername + '" with id ' + CONVERT(NVARCHAR, @notificationproviderid)
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

		COMMIT TRAN
	end


GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updatepolicy]'))
drop procedure [dbo].[isp_sqlsecure_updatepolicy]
GO

CREATE procedure [dbo].[isp_sqlsecure_updatepolicy]
(
	@policyid int, 
	@assessmentid int,
	@policyname nvarchar(128), 
	@policydescription nvarchar(2048), 
	@assessmentstate nchar(1), 
	@isdynamic bit, 
	@dynamicselection nvarchar(4000), 
	@assessmentname nvarchar(128), 
	@assessmentdescription nvarchar(2048), 
	@assessmentnotes nvarchar(4000), 
	@assessmentdate datetime, 
	@usebaseline bit, 
	@interviewname nvarchar(256) = null, 
	@interviewtext nvarchar(max) = null
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update policy with new info
   --			   Note system policies cannot be updated and a policy cannot be changed to or from type system

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @category2 nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Update', @category=N'Policy', @category2=N'Assessment', @success=N'Success Audit', @failure=N'Failure Audit'

	-- because it is passed in, we can use the state here before the first message to fix the category
	declare @isassessment bit
	select @isassessment = case when @assessmentstate in (N'D', N'P', N'A') then 1 else 0 end
	if (@isassessment = 1)
		set @category = @category2

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @name nvarchar(128), @aname nvarchar(128),@issystem bit
	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	select @name=policyname, @issystem=issystempolicy from policy where policyid = @policyid
	select @aname=assessmentname from assessment where policyid = @policyid and assessmentid = @assessmentid

	if (@name is null)
	begin
		set @msg = 'Error: Invalid ' + @category + ' id ' + CONVERT(nvarchar, @policyid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else if (@issystem = 1 and @name <> @policyname)
	begin
		set @msg = 'Error: ' + @category + ' "' + @name + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' is a system ' + lower(@category) + ' and cannot be updated'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else if exists(select * from [policy] where policyid <> @policyid AND UPPER(policyname) = UPPER(@policyname))
	begin
		set @msg = 'Error: Cannot rename ' + lower(@category) + ' "' + @name + '" to "' + @policyname + '". This name already exists and must be unique.'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else if (@isassessment = 1 and exists(select * from [assessment] where policyid = @policyid and assessmentid <> @assessmentid AND UPPER(assessmentname) = UPPER(@assessmentname)))
	begin
		set @msg = 'Error: Cannot rename ' + lower(@category2) + ' "' + @aname + '" to "' + @assessmentname + '". This name already exists and must be unique within the policy.'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end
	else
	begin
		BEGIN TRAN

		if exists (select * 
					from [policy] 
					where 
						policyid = @policyid 
						and (policyname <> @policyname 
								or policydescription <> @policydescription))
		begin
			update [policy] set
					policyname=@policyname, 
					policydescription=@policydescription
				where 
					policyid = @policyid 

			select @err = @@error

			if @err <> 0
			begin
				ROLLBACK TRAN
				set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @name + '" with id ' + CONVERT(NVARCHAR, @policyid)
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				return -1
			end
		end

		select @msg = N''
		-- see if any values have changed for logging
		declare @oldassessmentstate nchar(1), 
				@oldisdynamic bit, 
				@olddynamicselection nvarchar(4000), 
				@oldassessmentname nvarchar(128), 
				@oldassessmentdescription nvarchar(2048), 
				@oldassessmentnotes nvarchar(4000), 
				@oldassessmentdate datetime, 
				@oldusebaseline bit 
		select @oldassessmentstate = assessmentstate,
				@oldisdynamic = isdynamic, 
				@olddynamicselection = isnull(dynamicselection, N''), 
				@oldassessmentname = assessmentname, 
				@oldassessmentdescription = assessmentdescription, 
				@oldassessmentnotes = assessmentnotes, 
				@oldassessmentdate = assessmentdate, 
				@oldusebaseline = usebaseline
			from [assessment]
			where 
				policyid = @policyid 
				and assessmentid = @assessmentid

		if (@oldassessmentstate <> @assessmentstate 
				or @oldisdynamic <> @isdynamic 
				or @olddynamicselection <> @dynamicselection 
				or @oldassessmentname <> @assessmentname 
				or @oldassessmentdescription <> @assessmentdescription 
				or @oldassessmentnotes <> @assessmentnotes 
				or @oldassessmentdate <> @assessmentdate 
				or @oldusebaseline <> @usebaseline)
		begin
			update [assessment] set
					assessmentstate=@assessmentstate,
					isdynamic=@isdynamic, 
					dynamicselection=@dynamicselection, 
					assessmentname=@assessmentname, 
					assessmentdescription=@assessmentdescription, 
					assessmentnotes=@assessmentnotes, 
					assessmentdate=@assessmentdate, 
					usebaseline=@usebaseline 
				where 
					policyid = @policyid 
					and assessmentid = @assessmentid

			select @err = @@error

			if @err <> 0
			begin
				ROLLBACK TRAN
				set @msg = 'Error: Failed to ' + lower(@action) + ' assessment for "' + @name + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessmentid ' + CONVERT(NVARCHAR, @assessmentid)
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				return -1
			end

			if (@oldassessmentstate <> @assessmentstate)
			begin
				set @msg = N'Assessment state changed from ' + dbo.getassessmentstatename(@oldassessmentstate) + N' to ' + dbo.getassessmentstatename(@assessmentstate)
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end

			if (@oldisdynamic <> @isdynamic)
			begin
				set @msg = N'Server selection changed to ' + case when @isdynamic = 1 then N' dynamic' else N' manual' end
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end

			if (@isdynamic = 1 and @olddynamicselection <> @dynamicselection)
			begin
				set @msg = N'Server selection changed to include all servers ' + @dynamicselection
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end

			if (@oldassessmentname <> @assessmentname)
			begin
				set @msg = N'Assessment name changed from ' + @oldassessmentname + N' to ' + @assessmentname
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end

			if (@oldassessmentdescription <> @assessmentdescription)
			begin
				set @msg = N'Assessment description changed from ' + @oldassessmentdescription + N' to ' + @assessmentdescription
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end

			if (@oldassessmentnotes <> @assessmentnotes)
			begin
				set @msg = N'Assessment notes changed from ' + @oldassessmentnotes + N' to ' + @assessmentnotes
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end

			if (@oldassessmentdate <> @assessmentdate)
			begin
				set @msg = N'Assessment data selection date changed from ' + CONVERT(nvarchar, @oldassessmentdate, 109) + N' to ' + convert(nvarchar, @assessmentdate, 109)
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end

			if (@oldusebaseline <> @usebaseline)
			begin
				set @msg = N'Assessment data selection changed to use ' + case when @usebaseline = 1 then N' only baseline snapshots' else N' any snapshots' end
				exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
			end
		end

		-- delete policymembers if the policy has switched to dynamic
		if (@isdynamic=1 and exists (SELECT * FROM policymember WHERE policyid = @policyid and assessmentid = @assessmentid))
		begin
			DELETE policymember 
				WHERE policyid = @policyid 
					and assessmentid = @assessmentid

			select @err = @@error

			if @err <> 0
			begin
				ROLLBACK TRAN
				set @msg = 'Error: Failed to delete policy members for dynamic ' + lower(@category) + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				return -1
			end
		end

		-- update the interview if it is passed, if it is null, then leave it alone
		if (@interviewname IS NOT NULL OR @interviewtext IS NOT NULL)
		begin
			if (LEN(RTRIM(ISNULL(@interviewname, '') + ISNULL(CONVERT(NVARCHAR(100), @interviewtext), ''))) = 0)
			begin
				-- if the passed value is empty, make sure the interview doesn't exist
				if exists (SELECT * FROM policyinterview WHERE policyid = @policyid and assessmentid = @assessmentid)
				begin
					DELETE policyinterview 
						WHERE policyid = @policyid 
							and assessmentid = @assessmentid

					select @err = @@error

					if @err <> 0
					begin
						ROLLBACK TRAN
						set @msg = 'Error: Failed to delete policy interview for ' + lower(@category) + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
						exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
						RAISERROR (@msg, 16, 1)
						return -1
					end

					set @msg = N'Internal Review Notes removed'
					exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
				end
			end
			else
			begin
				-- if the interview exists, add it, otherwise update it
				if exists (SELECT * FROM policyinterview WHERE policyid = @policyid and assessmentid = @assessmentid)
				begin
					declare @oldinterviewname nvarchar(256), 
							@oldpointer bigint,
							@newpointer bigint,
							@textlength bigint,
							@oldtext nvarchar(4000),
							@newtext nvarchar(4000),
							@interviewtextchanged bit

					select @oldinterviewname = interviewname,
							@interviewtextchanged = case when datalength(isnull(interviewtext,N'')) <> datalength(isnull(@interviewtext,N'')) then 1 else 0 end,
							@textlength = datalength(isnull(@interviewtext,N''))
						from policyinterview
						where 
							policyid = @policyid 
							and assessmentid = @assessmentid

					if (@interviewtextchanged = 0)
					begin
						select @oldpointer = 0,
								@newpointer = 0

						while (@oldpointer < @textlength
								and @newpointer < datalength(@interviewtext))
						begin
							select @interviewtextchanged = case when substring(interviewtext,@oldpointer,4000) <> substring(@interviewtext,@newpointer,4000) then 1 else 0 end,
									@oldpointer = @oldpointer + 4000,
									@newpointer = @newpointer + 4000
								from policyinterview
								where 
									policyid = @policyid 
									and assessmentid = @assessmentid
							
							if (@interviewtextchanged = 1)
								break
						end					
					end

					if (@oldinterviewname <> @interviewname
						or  @interviewtextchanged = 1)
					begin
						update policyinterview set
							interviewname = isnull(@interviewname,''),
							interviewtext = isnull(@interviewtext,'')
						where policyid = @policyid
							and assessmentid = @assessmentid

						select @err = @@error

						if @err <> 0
						begin
							ROLLBACK TRAN
							set @msg = 'Error: Failed to update policy interview for ' + lower(@category) + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
							exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
							RAISERROR (@msg, 16, 1)
							return -1
						end

						if (@oldinterviewname <> @interviewname)
						begin
							set @msg = N'Internal Review Notes Title changed from ' + @oldinterviewname + N' to ' + @interviewname
							exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
						end

						if (@interviewtextchanged = 1)
						begin
							set @msg = N'Internal Review Notes changed'
							exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
						end
					end
				end
				else
				begin
					insert into policyinterview (
							policyid,
							assessmentid,
							istemplate,
							interviewname,
							interviewtext
							)
						values (
							@policyid,
							@assessmentid,
							0,
							isnull(@interviewname,''),
							isnull(@interviewtext,'')
							)

					select @err = @@error

					if @err <> 0
					begin
						ROLLBACK TRAN
						set @msg = 'Error: Failed to add policy interview for ' + lower(@category) + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
						exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
						RAISERROR (@msg, 16, 1)
						return -1
					end

					set @msg = N'Internal Review Notes added'
					exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
				end
			end

			-- if it is the policy settings then make sure to match the current assessment interview to the policy interview
			if (@assessmentstate = N'S')
			begin
				declare @currentid int
				select @currentid=assessmentid 
					from assessment
					where
						policyid = @policyid
						and assessmentstate = N'C'

				-- if there is no current assessment, then it will be fixed when it is created, so don't worry about it here
				if (@currentid is not null)
				begin
					DELETE policyinterview 
						WHERE policyid = @policyid 
							and assessmentid = @currentid

					INSERT INTO policyinterview (
								policyid,
								assessmentid,
								istemplate,
								interviewname,
								interviewtext
								)
						SELECT policyid,
								@currentid,
								istemplate,
								interviewname,
								interviewtext
							FROM policyinterview 
						WHERE policyid = @policyid 
							and assessmentid = @assessmentid
				end
			end
		end

		set @msg = @category + N' "' + @policyname + '" with policy id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

		COMMIT TRAN
	end


GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updatepolicyassessmentnotes]'))
drop procedure [dbo].[isp_sqlsecure_updatepolicyassessmentnotes]
GO

CREATE procedure [dbo].[isp_sqlsecure_updatepolicyassessmentnotes]
(
	@policyid int,
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@metricid int,
	@snapshotid int,
	@isexplained bit,
	@notes nvarchar(4000)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update policyassessmentnotes with new metric configuration

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Update', @category=N'Explanation Notes', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @policyname nvarchar(128)
	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	select @policyname=[dbo].[getassessmentname](@policyid,@assessmentid)
	if (@policyname is null)
	begin
		set @msg = 'Error: Invalid policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @metricname nvarchar(256)
	select @metricname=metricname from metric where metricid = @metricid and metricid > 0
	if (@metricname is null)
	begin
		set @msg = 'Error: Invalid metric id ' + CONVERT(nvarchar, @metricid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

	-- see if any values have changed for logging
	declare @policyassessmentnotesid int,
			@oldisexplained bit,
			@oldnotes nvarchar(4000),
			@assessmentstate nvarchar(20) 
	select @oldisexplained = 0, @oldnotes= N''
	select @assessmentstate = assessmentstate
		from assessment
		where policyid = @policyid 
			and assessmentid = @assessmentid 
	select @err = @@error

	if (@err <> 0 or @assessmentstate is null)
	begin
		ROLLBACK TRAN
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' with policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' and metric id ' + CONVERT(nvarchar, @metricid) + '. Unable to retrieve assessment.'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	select @policyassessmentnotesid = policyassessmentnotesid,
			@oldisexplained = isexplained, 
			@oldnotes = notes
		from [policyassessmentnotes]
		where policyid = @policyid 
			and assessmentid = @assessmentid 
			and metricid = @metricid 
			and snapshotid = @snapshotid

	if (@oldisexplained <> @isexplained
		or @oldnotes <> @notes)
	begin
		if (len(rtrim(isnull(@notes, N''))) = 0 and @isexplained = 0)
		begin
			if (@policyassessmentnotesid is not null)
			begin
				delete 
					from [policyassessmentnotes]
					where policyassessmentnotesid = @policyassessmentnotesid

			select @err = @@error

			if @err <> 0
			begin
				set @msg = 'Error: Failed to remove ' + lower(@category) + ' with policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' and metric id ' + CONVERT(nvarchar, @metricid) + ' and snapshot id ' + CONVERT(nvarchar, @snapshotid)
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				ROLLBACK TRAN
				return -1
			end
			end
		end
		else if (@policyassessmentnotesid is null)
		begin
			insert into [policyassessmentnotes] (
					policyid,
					assessmentid,
					metricid,
					snapshotid,
					isexplained, 
					notes)
				values (
					@policyid, 
					@assessmentid,
					@metricid,
					@snapshotid,
					@isexplained, 
					@notes )

			select @err = @@error

			if @err <> 0
			begin
				set @msg = 'Error: Failed to add ' + lower(@category) + ' with policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' and metric id ' + CONVERT(nvarchar, @metricid) + ' and snapshot id ' + CONVERT(nvarchar, @snapshotid)
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				ROLLBACK TRAN
				return -1
			end
		end
		else
		begin
			update [policyassessmentnotes] set 
					isexplained=@isexplained, 
					notes=@notes 
				where policyassessmentnotesid = @policyassessmentnotesid

			select @err = @@error

			if @err <> 0
			begin
				set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' with policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' and metric id ' + CONVERT(nvarchar, @metricid) + ' and snapshot id ' + CONVERT(nvarchar, @snapshotid)
				exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
				RAISERROR (@msg, 16, 1)
				ROLLBACK TRAN
				return -1
			end
		end

		if (@oldisexplained <> @isexplained)
		begin
			set @msg = N'Security Check ' + @metricname + N' has been marked' + case when @isexplained = 1 then N' explained'  else N' not explained'  end
			exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
		end

		if (@oldnotes <> @notes)
		begin
			set @msg = N'Security Check ' + @metricname + N' explanation notes changed from ' + @oldnotes + N' to ' + @notes
			exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
		end

		set @msg = @category + N' policy "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' and metric "' + @metricname + '" with id ' + CONVERT(NVARCHAR, @metricid)
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null
	end

	COMMIT TRAN

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updatepolicymetric]'))
drop procedure [dbo].[isp_sqlsecure_updatepolicymetric]
GO

CREATE procedure [dbo].[isp_sqlsecure_updatepolicymetric]
(
	@policyid int,
	@assessmentid int = null,		-- default to policy settings for backward compatibility
	@metricid int,
	@isenabled bit,
	@reportkey nvarchar(32),
	@reporttext nvarchar(4000),
	@severity int,
	@severityvalues nvarchar(4000)
)
AS
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update policymetric with new metric configuration

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @category2 nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Update', @category=N'Security Check', @category2=N'Policy', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @policyname nvarchar(128)
	select @assessmentid = isnull(@assessmentid,[dbo].[getdefaultassessmentid](@policyid))
	select @policyname=[dbo].[getassessmentname](@policyid,@assessmentid)
	if (@policyname is null)
	begin
		set @msg = 'Error: Invalid policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	select @category2 = case when assessmentstate in (N'D', N'P', N'A') then 'Assessment' else 'Policy' end
		from assessment
		where policyid = @policyid
			and assessmentid = @assessmentid

	declare @metricname nvarchar(256)
	select @metricname=metricname from metric where metricid = @metricid and metricid > 0
	if (@metricname is null)
	begin
		set @msg = 'Error: Invalid metric id ' + CONVERT(nvarchar, @metricid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

	-- see if any values have changed for logging
	declare @oldisenabled bit,
			@oldreportkey nvarchar(32),
			@oldreporttext nvarchar(4000),
			@oldseverity int,
			@oldseverityvalues nvarchar(4000),
			@assessmentstate nvarchar(20) 
	select @oldisenabled = a.isenabled, 
			@oldreportkey = a.reportkey, 
			@oldreporttext = a.reporttext, 
			@oldseverity = a.severity, 
			@oldseverityvalues = a.severityvalues, 
			@assessmentstate = b.assessmentstate
		from [policymetric] a, assessment b 
		where a.policyid = @policyid 
			and a.assessmentid = @assessmentid 
			and a.metricid = @metricid 
			and b.policyid = @policyid 
			and b.assessmentid = @assessmentid 

	select @err = @@error

	if (@err <> 0 or @assessmentstate is null)
	begin
		ROLLBACK TRAN
		set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' with policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' and metric id ' + CONVERT(nvarchar, @metricid) + '. Unable to retrieve policy metric.'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	if (@oldisenabled <> @isenabled
		or @oldreportkey <> @reportkey 
		or @oldreporttext <> @reporttext
		or @oldseverity <> @severity
		or @oldseverityvalues <> @severityvalues)
	begin
		update [policymetric] set 
				isenabled=@isenabled, 
				reportkey=@reportkey, 
				reporttext=@reporttext, 
				severity=@severity, 
				severityvalues=@severityvalues 
			where policyid = @policyid 
				and assessmentid = @assessmentid
				and metricid = @metricid

		select @err = @@error

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' with policy id ' + CONVERT(nvarchar, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid) + ' and metric id ' + CONVERT(nvarchar, @metricid)
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		select @assessmentstate=assessmentstate 
			from [assessment] 
			where policyid = @policyid 
				and assessmentid = @assessmentid

		if (@oldisenabled <> @isenabled)
		begin
			set @msg = N'Security Check ' + @metricname + case when @isenabled = 1 then N' enabled' else N' disabled' end
			exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
		end

		if (@oldreportkey <> @reportkey)
		begin
			set @msg = N'Security Check ' + @metricname + N' External Cross Reference changed from ' + @oldreportkey + N' to ' + @reportkey
			exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
		end

		if (@oldreporttext <> @reporttext)
		begin
			set @msg = N'Security Check ' + @metricname + N' External Cross Reference changed from ' + @oldreporttext + N' to ' + @reporttext
			exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
		end

		if (@oldseverity <> @severity)
		begin
			set @msg = N'Security Check ' + @metricname + N' Risk Level changed from ' + dbo.getpolicyseverityname(@oldseverity) + N' to ' + dbo.getpolicyseverityname(@severity)
			exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
		end

		if (@oldseverityvalues <> @severityvalues)
		begin
			set @msg = N'Security Check ' + @metricname + N' configured values changed from ' + @oldseverityvalues + N' to ' + @severityvalues
			exec isp_sqlsecure_addpolicychangelog @policyid=@policyid, @assessmentid=@assessmentid, @state=@assessmentstate, @description=@msg
		end

		set @msg = @category + ' "' + @metricname + '" with id ' + CONVERT(NVARCHAR, @metricid)+ N' on ' + @category2 + ' "' + @policyname + '" with id ' + CONVERT(NVARCHAR, @policyid) + ' and assessment id ' + CONVERT(NVARCHAR, @assessmentid)
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null
	end

	COMMIT TRAN

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateregisteredserverauditfolders]'))
drop procedure [dbo].[isp_sqlsecure_updateregisteredserverauditfolders]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateregisteredserverauditfolders] (@connectionname nvarchar(500), @auditfoldersstring nvarchar(max))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update registered server audit folders string.   The audit folders are used by collector to get file system permission informations

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to update credentials for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update Audit Folders', @category=N'Server', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if not exists (select * from registeredserver where UPPER(connectionname) = UPPER(@connectionname))
	begin
		set @errmsg = 'Error: Invalid connection name - ' + @connectionname
		RAISERROR (@errmsg, 16, 1)
	end
	else
	begin
		BEGIN TRAN

		update registeredserver set auditfoldersstring = @auditfoldersstring where UPPER(connectionname) = UPPER(@connectionname)

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to update registeredserver table with audit folders information'
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		declare @str nvarchar(500)
		set @str = N'Updated audit folders for SQL Server instance ' + @connectionname

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update Audit Folders', @category=N'Server', @description=@str, @connectionname = @connectionname
		
		COMMIT TRAN
	
	end
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateregisteredservercredentials]'))
drop procedure [dbo].[isp_sqlsecure_updateregisteredservercredentials]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateregisteredservercredentials] (@connectionname nvarchar(500), @loginname nvarchar(128), @loginpassword nvarchar(300), @authmode nvarchar(256), @serverlogin nvarchar(256), @serverpassword nvarchar(256))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update registered server credentials.   The credentials are used to connect to a SQL Server and also to get group memberships.
   -- 	           This information might change from time to time so there is a need to update the master registered server record

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to update credentials for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update Credentials', @category=N'Server', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if not exists (select * from registeredserver where UPPER(connectionname) = UPPER(@connectionname))
	begin
		set @errmsg = 'Error: Invalid connection name - ' + @connectionname
		RAISERROR (@errmsg, 16, 1)
	end
	else
	begin
		BEGIN TRAN

		update registeredserver set sqlserverlogin = @loginname, sqlserverpassword = @loginpassword, sqlserverauthtype = @authmode, serverlogin = @serverlogin, serverpassword = @serverpassword where UPPER(connectionname) = UPPER(@connectionname)

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to update registeredserver table with credentials information'
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		declare @str nvarchar(500)
		set @str = N'Updated credentials for SQL Server instance ' + @connectionname

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update Credentials', @category=N'Server', @description=@str, @connectionname = @connectionname
		
		COMMIT TRAN
	
	end
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateregisteredserverinfo]'))
drop procedure [dbo].[isp_sqlsecure_updateregisteredserverinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateregisteredserverinfo] (@connectionname nvarchar(500), @authmode nvarchar(1), @os nvarchar(512), @version nvarchar(256), @edition nvarchar(256), @enableproxyaccount nchar(1), @enablec2 nchar(10), @ownerchaining nchar(1))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update registered server with auditing and versioning information.
   -- 	           This information might change from time to time so there is a need to update the master registered server record

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Access denial. Insufficient privilege.'
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	if not exists (select * from registeredserver where UPPER(connectionname) = UPPER(@connectionname))
	begin
		set @errmsg = 'Error: Invalid connection name - ' + @connectionname
		RAISERROR (@errmsg, 16, 1)
	end
	else
	begin
		BEGIN TRAN

		update registeredserver set authenticationmode = @authmode, os = @os, version = @version, edition = @edition, enableproxyaccount = @enableproxyaccount, enablec2audittrace = @enablec2, crossdbownershipchaining = @ownerchaining where UPPER(connectionname) = UPPER(@connectionname)

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to update registeredserver table'
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		declare @str nvarchar(500)
		set @str = N'Update server information with connection name ' + @connectionname

		declare @programname nvarchar(128)
		select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'UPDATE', @category=N'SERVER', @description=@str, @connectionname = @connectionname
		
		COMMIT TRAN
	
	end


GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateregisteredservernotification]'))
drop procedure [dbo].[isp_sqlsecure_updateregisteredservernotification]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateregisteredservernotification]
(
	@registeredserverid int, 
	@notificationproviderid int, 
	@snapshotstatus nchar(1), 
	@policymetricseverity int, 
	@recipients nvarchar(1024)
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update Notification info for a registered server

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Update', @category=N'Server Notification', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @providername nvarchar(128)
	select @providername=providername from notificationprovider where notificationproviderid = @notificationproviderid

	if (@providername is null)
	begin
		set @msg = 'Error: Invalid notification provider id ' + CONVERT(nvarchar, @notificationproviderid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @connection nvarchar(400)
	select @connection=connectionname from [registeredserver] where registeredserverid = @registeredserverid

	if (@connection is null)
	begin
		set @msg = 'Error: Invalid server id ' + CONVERT(nvarchar, @registeredserverid)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
		RAISERROR (@msg, 16, 1)
		return -1
	end

	BEGIN TRAN

		update registeredservernotification
		set 
			snapshotstatus=@snapshotstatus, 
			policymetricseverity=@policymetricseverity, 
			recipients=@recipients  
		where 
			notificationproviderid = @notificationproviderid 
			and registeredserverid = @registeredserverid

		select @err = @@error

		if @err <> 0
		begin
			set @msg = 'Error: Failed to ' + lower(@action) + ' ' + lower(@category) + ' "' + @providername + '" for server ' + @connection
			exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = null
			RAISERROR (@msg, 16, 1)
			ROLLBACK TRAN
			return -1
		end

		set @msg = @category + N' "' + @providername + '" for server ' + @connection
		exec isp_sqlsecure_addactivitylog @activitytype=@success, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname=null

	COMMIT TRAN

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updatereportconfigureinfo]'))
drop procedure [dbo].[isp_sqlsecure_updatereportconfigureinfo]
GO

CREATE procedure [dbo].[isp_sqlsecure_updatereportconfigureinfo] 
(
	@reportserver nvarchar(128), 
	@servervirtualdirectory nvarchar(256), 
	@managervirtualdirectory nvarchar(256),
	@port int,
	@usessl tinyint,
	@username nvarchar(128),
	@repository nvarchar(128), 
	@targetdirectory nvarchar(256)
)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update report configuration table

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = N'Error: Insufficient privileges to update report configuration.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update', @category=N'Report', @description=@errmsg, @connectionname = NULL
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN
	
	-- remove any old data and just insert the new values
	delete from reports
	insert into reports 
		values(@reportserver,
			@servervirtualdirectory,
			@managervirtualdirectory,
			@port,
			@usessl,
			@username,
			@repository,
			@targetdirectory)

	select @err = @@error

	if @err <> 0
	begin
		set @errmsg = 'Error: Failed to update report configuration'
		RAISERROR (@errmsg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

	declare @str nvarchar(500)
	set @str = N'Updated report configuration table'

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update', @category=N'Report', @description=@str, @connectionname = NULL

	COMMIT TRAN

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateretentionperiod]'))
drop procedure [dbo].[isp_sqlsecure_updateretentionperiod]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateretentionperiod] (@connectionname nvarchar(400), @retentionperiod int=60)
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update the snapshot retention period associated with the given registered server
   -- 	           

	declare @err int
	declare @errmsg nvarchar(500)
	declare @ans int

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = N'Error: Insufficient privileges to update registered server retention period.'
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update', 	  @category=N'Server', @description=@errmsg, @connectionname = @connectionname
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN

	if not exists (select * from registeredserver where UPPER(connectionname) = UPPER(@connectionname))
	begin
			set @errmsg = 'Error: Connection name ' + @connectionname + ' not found.' 
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
	end
		
	update registeredserver set snapshotretentionperiod = @retentionperiod where UPPER(connectionname) = UPPER(@connectionname)

	select @err = @@error

	if @err <> 0
	begin
		set @errmsg = 'Error: Failed to update snapshot retention period in registeredserver table with connection name ' + @connectionname
		RAISERROR (@errmsg, 16, 1)
		ROLLBACK TRAN
		return -1
	end

	declare @str nvarchar(500)
	set @str = N'Updated registered server retention period to ' + CONVERT(nvarchar(10), @retentionperiod)

	exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update', @category=N'Server', @description=@str, @connectionname = @connectionname

	
	COMMIT TRAN

GO

GRANT EXECUTE ON [dbo].[isp_sqlsecure_updateretentionperiod] TO [SQLSecureView]

GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updaterule]'))
drop procedure [dbo].[isp_sqlsecure_updaterule]
GO

CREATE procedure [dbo].[isp_sqlsecure_updaterule] (@filterruleheaderid int, @filterruleid int, @class int, @scope nvarchar(64), @matchstring nvarchar(1000))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update rule info.
   -- 	           
	declare @err int
	declare @ans int
	declare @errmsg nvarchar(500)

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
		
	declare @connectionname nvarchar(400)
	select @connectionname = connectionname from filterruleheader where filterruleheaderid = @filterruleheaderid

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to update filter rule for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update', @category=N'Filter Rule', @description=@errmsg, @connectionname = ''
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN
	
		update filterrule set class = @class, scope = @scope, matchstring = @matchstring where filterruleheaderid = @filterruleheaderid and filterruleid = @filterruleid

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to update filterrule table with header id ' + CONVERT(nvarchar(64), @filterruleheaderid) + ' and rule id ' + CONVERT(nvarchar(64), @filterruleid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end


		declare @str nvarchar(500)
		set @str = N'Updated filter rule for SQL Server instance ' + @connectionname + ', Rule Header Id = ' + CONVERT(nvarchar(64), @filterruleheaderid) + N', Rule Id = ' + CONVERT(nvarchar(64), @filterruleid) + N', Class = ' + CONVERT(nvarchar(32), @class) + N', Scope = ' + @scope + N', MatchString = ' + @matchstring

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update', @category=N'Filter Rule', @description=@str, @connectionname = ''
	
	COMMIT TRAN

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateruleheader]'))
drop procedure [dbo].[isp_sqlsecure_updateruleheader]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateruleheader] (@filterruleheaderid int, @rulename nvarchar(256), @description nvarchar(80))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update rule name. Connection name cannot be changed.
   -- 	           
	declare @err int
	declare @ans int
	declare @errmsg nvarchar(500)

	declare @programname nvarchar(128)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
		
	declare @connectionname nvarchar(400)
	select @connectionname = connectionname from filterruleheader where filterruleheaderid = @filterruleheaderid

	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @errmsg = 'Error: Insufficient privileges to update filter for SQL Server instance ' + @connectionname
		exec isp_sqlsecure_addactivitylog @activitytype=N'Failure Audit', @source=@programname, @eventcode=N'Update', @category=N'Filter', @description=@errmsg, @connectionname = ''
		RAISERROR (@errmsg, 16, 1)
		return -1
	end

	BEGIN TRAN
	
		update filterruleheader set rulename = @rulename, description = @description, lastmodifiedtm = GETUTCDATE() where filterruleheaderid = @filterruleheaderid

		select @err = @@error

		if @err <> 0
		begin
			set @errmsg = 'Error: Failed to update filterruleheader table with header id ' + CONVERT(nvarchar(64), @filterruleheaderid)
			RAISERROR (@errmsg, 16, 1)
			ROLLBACK TRAN
			return -1
		end
		
		declare @str nvarchar(500)
		set @str = N'Update filter rule for SQL Server instance ' + @connectionname + N', Rule Header Id = ' + CONVERT(NVARCHAR(64), @filterruleheaderid) + N' and Filter Ruler Name = ' + @rulename

		exec isp_sqlsecure_addactivitylog @activitytype=N'Success Audit', @source=@programname, @eventcode=N'Update', @category=N'Filter', @description=@str, @connectionname = ''
	
	COMMIT TRAN

GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updatesnapshotstatus]'))
drop procedure [dbo].[isp_sqlsecure_updatesnapshotstatus]
GO

CREATE procedure [dbo].[isp_sqlsecure_updatesnapshotstatus] (@connectionname nvarchar(400))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Find all previous snapshots marked as running, log and change to error status

	declare @err int, @msg nvarchar(500)

	declare @programname nvarchar(128), @action nvarchar(32), @category nvarchar(32), @success nvarchar(32), @failure nvarchar(32)
	select @programname = program_name from master..sysprocesses where spid= @@spid and sid = SUSER_SID(SYSTEM_USER)
	select @action=N'Update', @category=N'Snapshot Status', @success=N'Success Audit', @failure=N'Failure Audit'

	declare @ans int
	exec @ans = [isp_sqlsecure_isadmin]

	if (@ans = 0)
	begin
		set @msg = N'Error: Insufficient privileges to ' + lower(@action) + ' a ' + lower(@category)
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = @connectionname
		RAISERROR (@msg, 16, 1)
		return -1
	end

	-- if there is no such server then return error
	if not exists (select * from registeredserver where upper(connectionname) = upper(@connectionname))
	begin
		set @msg = 'Error: Server ' + @connectionname + ' not found'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = @connectionname
		RAISERROR (@msg, 16, 1)
		return -1
	end

	declare @count int
	select @count=count(*) from serversnapshot
		where upper(connectionname) = upper(@connectionname) and [status] = 'I'
	if (@count > 0)
	begin
		set @msg = N'Collector aborted during processing. See log for details.'
		update serversnapshot set status='E',snapshotcomment=@msg
			where upper(connectionname) = upper(@connectionname) and [status] = 'I'
		set @msg = N'Updated snapshot status for ' + convert(nvarchar(10), @count) + ' hung snapshots'
		exec isp_sqlsecure_addactivitylog @activitytype=@failure, @source=@programname, @eventcode=@action, @category=@category, @description=@msg, @connectionname = @connectionname
	end

	return @count

GO


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[isp_sqlsecure_updateweakpasswordlist]'))
drop procedure [dbo].[isp_sqlsecure_updateweakpasswordlist]
GO

CREATE procedure [dbo].[isp_sqlsecure_updateweakpasswordlist] ( @passwordListId int,
																@customPasswordList nvarchar(max),
																@customListUpdated DateTime,
																@additionalPasswordList nvarchar(max),
																@additionalListUpdated DateTime,
																@passwordCheckingEnabled nchar(1))
as
   -- Idera SQLsecure Version 2.7
   --
   -- (c) Copyright 2005-2016 Idera, Inc., all rights reserved.
   -- SQLsecure, Idera and the Idera Logo are trademarks or registered trademarks
   -- of Idera, Inc. or its subsidiaries in the United States and other jurisdictions.
   --
   -- Description :
   --              Update policy with new info
   --			   Note system policies cannot be updated and a policy cannot be changed to or from type system

		BEGIN TRAN

		UPDATE configuration SET lastupdated = GETUTCDATE(), isweakpassworddetectionenabled = @passwordCheckingEnabled
		
		declare @rowsFound int
		
		select @rowsFound = count(*) from weakwordlist where passwordlistid = @passwordListId
		
		if (@rowsFound = 1)
		BEGIN
			UPDATE weakwordlist SET custompasswordlist = @customPasswordList,
									customlistupdated = @customListUpdated,
									additionalpasswordlist = @additionalPasswordList,
									additionallistupdated = @additionalListUpdated 
			WHERE passwordlistid = @passwordListId
		END
		ELSE
		BEGIN
			INSERT INTO weakwordlist (	custompasswordlist,
										customlistupdated,
										additionalpasswordlist,
										additionallistupdated)
							  VALUES (	@customPasswordList,
										@customListUpdated,
										@additionalPasswordList,
										@additionalListUpdated)
		END
		COMMIT TRAN

GO


